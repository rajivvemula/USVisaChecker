# Starter pipeline


# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - ApolloQA/*
pr:
 - master

pool:
  vmImage: 'windows-latest'

variables:
- name: SourceDir
  value: '$(Build.SourcesDirectory)/ApolloQA'

stages:

- stage: QA2
  displayName: 'QA2'
  jobs: 
  - job: RunAutomatedTest
    displayName: 'Run Automated Tests'
    steps:
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: '**/ApolloQA.sln'
          feedsToUse: 'select'
      - task: VSBuild@1
        inputs:
          solution: '**\ApolloQA.sln'
          restoreNugetPackages: true

      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'Apollo - Dev'
          KeyVaultName: 'XBIBAOAZCKV2-QA2'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: Set-DisplayResolution -Width 1920 -Height 1080 -Force

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $url = "https://www.autoitscript.com/cgi-bin/getfile.pl?autoit3/autoit-v3-setup.exe"
            $output = "$(System.DefaultWorkingDirectory)\autoit-v3-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $output
            Start-Process -Wait  -FilePath '$(System.DefaultWorkingDirectory)\autoit-v3-setup.exe' -ArgumentList '/S','/v','/qn' -passthru


      - task: VSTest@2
        displayName: 'Running a Smoke Test'
        continueOnError: true
        timeoutInMinutes: 120
        env:
            ApolloSQL: $(ApolloSQL)
            CosmosDB-EndpointUrl: $(CosmosDB-EndpointUrl)
            CosmosDB-AuthorizationKey: $(CosmosDB-AuthorizationKey)
            BROWSER: "Chrome"
            HIGHLIGHT_ON: "false"
            CURRENT_SEVERITY_LEVEL: "info"
            AZUREDEVOPS_PAT: $(System.AccessToken)
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            **\ApolloQA.dll
            !**\*TestAdapter.dll
            !**\obj\**
          searchFolder: '$(System.DefaultWorkingDirectory)'
          testRunTitle: 'SmokeTest'


      - task: SpecFlowPlus@0
        inputs:
          projectFilePath: '$(System.DefaultWorkingDirectory)/ApolloQA'
          projectName: 'ApolloQA'
          projectLanguage: 'en'
          bindingAssemblies: '$(Build.SourcesDirectory)/ApolloQA/bin/Debug/netcoreapp3.1/ApolloQA.dll'
          testExecutionJson: '$(Build.SourcesDirectory)/ApolloQA/bin/Debug/netcoreapp3.1/TestExecution.json'

          
        

      - task: CopyFiles@2
        displayName: 'Copy TestResults'
        inputs:
          SourceFolder: $(Agent.TempDirectory)/TestResults
          Contents: '**/*'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/TestResults_QA2'
          OverWrite: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Test Results Files'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/TestResults_QA2'
          ArtifactName: 'TestResults_QA2'
          
- stage: UAT
  displayName: 'UAT'
  jobs: 
  - deployment: automation_uat
    environment: automation_uat
    displayName: Run QA Automated Tests in UAT

  - job: RunAutomatedTest
    displayName: 'Run Automated Tests'
    steps:
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: '**/ApolloQA.sln'
          feedsToUse: 'select'
      - task: VSBuild@1
        inputs:
          solution: '**\ApolloQA.sln'
          restoreNugetPackages: true

      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'Apollo - Dev'
          KeyVaultName: 'XBIBAOAZCKV-UAT'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: Set-DisplayResolution -Width 1920 -Height 1080 -Force

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $url = "https://www.autoitscript.com/cgi-bin/getfile.pl?autoit3/autoit-v3-setup.exe"
            $output = "$(System.DefaultWorkingDirectory)\autoit-v3-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $output
            Start-Process -Wait  -FilePath '$(System.DefaultWorkingDirectory)\autoit-v3-setup.exe' -ArgumentList '/S','/v','/qn' -passthru


      - task: VSTest@2
        displayName: 'Running a Smoke Test'
        continueOnError: true
        timeoutInMinutes: 120
        env:
            ApolloSQL: $(ApolloSQL)
            CosmosDB-EndpointUrl: $(CosmosDB-EndpointUrl)
            CosmosDB-AuthorizationKey: $(CosmosDB-AuthorizationKey)
            BROWSER: "Chrome"
            HIGHLIGHT_ON: "false"
            CURRENT_SEVERITY_LEVEL: "info"
            AZUREDEVOPS_PAT: $(System.AccessToken)
            ENVIRONMENT_FILE: "uat.env.json"
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            **\ApolloQA.dll
            !**\*TestAdapter.dll
            !**\obj\**
          searchFolder: '$(System.DefaultWorkingDirectory)'
          testRunTitle: 'SmokeTest'


      - task: SpecFlowPlus@0
        inputs:
          projectFilePath: '$(System.DefaultWorkingDirectory)/ApolloQA'
          projectName: 'ApolloQA'
          projectLanguage: 'en'
          bindingAssemblies: '$(Build.SourcesDirectory)/ApolloQA/bin/Debug/netcoreapp3.1/ApolloQA.dll'
          testExecutionJson: '$(Build.SourcesDirectory)/ApolloQA/bin/Debug/netcoreapp3.1/TestExecution.json'

          
        

      - task: CopyFiles@2
        displayName: 'Copy TestResults'
        inputs:
          SourceFolder: $(Agent.TempDirectory)/TestResults
          Contents: '**/*'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/TestResults_UAT'
          OverWrite: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Test Results Files'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/TestResults_UAT'
          ArtifactName: 'TestResults_UAT'