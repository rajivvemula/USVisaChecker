# Starter pipeline


# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master

pr:
 - master

pool:
  vmImage: 'ubuntu-latest'


variables:
  solution: '**/*.sln'
  project: '**/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: Build
    jobs:
    - job: Build
      pool:
        vmImage: 'ubuntu-latest'
      displayName: 'Build job'
      steps:
        # The first task is the dotnet command build, pointing to our csproj file
        - task: UseDotNet@2
          inputs:
            version: 6.0.x
        # This script will consume all Variables that end with _VARNAME and load the variable names into appsettings.json
        # then once the secrets are downloaded, FileTransform task can be run to consume the downloaded secrets.
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              $appSettingsPath = "$(System.DefaultWorkingDirectory)/ApolloTests/appsettings.json"
              $appSettingsJson = Get-Content $appSettingsPath -Raw | ConvertFrom-Json

              $appSettingsJson.PSObject.Properties | ForEach-Object {
                  if ($_.Name -like "*_VARNAME") {
                      echo "Setting variable: "+$_
                      $appSettingsJson | add-member -Name $_.Value -value "TBD" -MemberType NoteProperty -force
                }
              }
              $appSettingsJson | ConvertTo-Json | Set-Content $appSettingsPath


        - task: DotNetCoreCLI@2
          inputs:
            command: 'build'
            arguments: '--configuration $(buildConfiguration)'
            projects: '$(project)'
          displayName: 'dotnet build $(buildConfiguration)'

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(System.DefaultWorkingDirectory)'
            artifactName: drop