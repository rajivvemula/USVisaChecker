using ApolloTests.Data.Entities.Context;
using ApolloTests.Data.Entities.Coverage;
using ApolloTests.Data.EntityBuilder;
using ApolloTests.Data.Rating;
using HitachiQA.Helpers;
using HitachiQA.Source.Helpers;
using System;
using TechTalk.SpecFlow;

namespace ApolloTests.StepDefinitions
{
    [Binding]
    public class KeywordsStepDefinitions
    {
        public IEnumerable<string> keywords;
        private CosmosContext CosmosContext;
        private SQLContext SQLContext;
        private RestAPI RestAPI;
        private SharedData Shared;
        private IObjectContainer ObjectContainer;
        private SQL SQL;
        private KeywordMappingUtil KeywordMappingUtil;
        public KeywordsStepDefinitions(IObjectContainer container)
        {
            ObjectContainer = container;
            CosmosContext = container.Resolve<CosmosContext>();
            SQLContext = container.Resolve<SQLContext>();
            RestAPI = container.Resolve<RestAPI>();
            Shared = container.Resolve<SharedData>();
            SQL = container.Resolve<SQL>();
            KeywordMappingUtil = container.Resolve<KeywordMappingUtil>();
        }
        [When(@"user loads all Keywords from the DB")]
        public void WhenUserLoadsAllKeywordsFromTheDB()
        {
            keywords = SQL.executeQuery("SELECT Name  FROM [reference].[Keyword] where StatusId=0").Select(it => (string)it["Name"]);
        }


        [Then(@"All Keywords are added to this file for '([^']*)'")]
        public void ThenAllKeywordsAreAddedToThisFileFor(string state)
        {
            string workingDirectory = Environment.CurrentDirectory;
            string projectDirectory = Directory.GetParent(workingDirectory).Parent.Parent.FullName;

            string FILEPATH = Path.Combine(projectDirectory, "Features\\Rating\\CA\\Keywords.feature");

            string CUTSTRING = $"#AUTOGENERATED BELOW THIS FOR STATE {state}";
            string CUTSTRINGEND = $"#AUTOGENERATED ABOVE THIS FOR STATE {state}";

            var featureFile = File.ReadAllText(FILEPATH);

            string result;
            String PersistedBelow = null;
            if (featureFile.Contains(CUTSTRING))
            {
                result = featureFile.Substring(0, featureFile.IndexOf(CUTSTRING));
                PersistedBelow = featureFile.Substring(featureFile.IndexOf(CUTSTRINGEND) + CUTSTRING.Length);
            }
            else
            {
                result = featureFile;
            }

            result += "\n" + CUTSTRING + "\n";
            foreach (var keyword in keywords)
            {
                result += $"| {state} | {keyword} | \n";
            }
            result += "\n" + CUTSTRINGEND + "\n";

            result += PersistedBelow;

            File.WriteAllText(FILEPATH, result);

        }

        [Given(@"quote for line=(.*) and Keyword '([^']*)' in '([^']*)' is set to Quoted")]
        public void GivenQuoteForLineAndKeywordInIsSetToQuoted(LineEnum line, string keyword, string stateCode)
        {
            QuoteBuilder quoteBuilder;


            quoteBuilder = new QuoteBuilder(ObjectContainer, line, stateCode, KeywordMappingUtil.GetUsingKeywordName(line, keyword));
            Log.Info("Taxonomy: " + quoteBuilder.ClassCodeKeyword.TaxonomyName);

            quoteBuilder.Modifiers_CA.experienceModifier.AdjustmentPercentage = 10m;
            quoteBuilder.Modifiers_CA.scheduleModifiers.EMPLOYEES.AdjustmentPercentage = 1m;
            quoteBuilder.Modifiers_CA.scheduleModifiers.CLASSIFICATION.AdjustmentPercentage = 1m;
            quoteBuilder.Modifiers_CA.scheduleModifiers.EQUIPMENT.AdjustmentPercentage = 1m;
            quoteBuilder.Modifiers_CA.scheduleModifiers.SAFETYORGANIZATION.AdjustmentPercentage = 1m;
            quoteBuilder.Modifiers_CA.scheduleModifiers.MANAGEMENT.AdjustmentPercentage = 1m;

            var quote = quoteBuilder.Build();
        }

    }
}
