// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.GenerateTestData.CA
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Generate_CA_HotShotTruckingCali_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Generate_CA_HotshotTruckingCali_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/GenerateTestData/CA", "Generate_CA_HotShotTruckingCali_I", "Populate the system with testing data primarily base on most common policy types " +
                    "per book of business.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Generate_CA_HotShotTruckingCali_I")))
            {
                global::ApolloQAAutomation.Features.GenerateTestData.CA.Generate_CA_HotShotTruckingCali_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate CA Hot Shot Trucking successfully purchases a policy for Cali")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generate_CA_HotShotTruckingCali_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Generate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        public void GenerateCAHotShotTruckingSuccessfullyPurchasesAPolicyForCali()
        {
            string[] tagsOfScenario = new string[] {
                    "Generate",
                    "CA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate CA Hot Shot Trucking successfully purchases a policy for Cali", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table726 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table726.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "95135",
                            "CA"});
#line 7
 testRunner.Given("user starts a quote with:", ((string)(null)), table726, "Given ");
#line hidden
#line 10
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table727 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table727.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 11
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table727, "Then ");
#line hidden
#line 17
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table728 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address",
                            "Mailing Address"});
                table728.AddRow(new string[] {
                            "1900",
                            "Individual/Sole Proprietor",
                            "4205 Watkins Way",
                            "",
                            "San Jose",
                            "",
                            "Yes"});
#line 19
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table728, "And ");
#line hidden
#line 22
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table729 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth",
                            "Fifth Wheel"});
                table729.AddRow(new string[] {
                            "3D3KR19D97G838924",
                            "California",
                            "12000",
                            "No"});
#line 24
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table729, "And ");
#line hidden
#line 27
 testRunner.Then("user adds another vehicle or trailer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table730 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address"});
                table730.AddRow(new string[] {
                            "5NMZU3LB2JH065041",
                            "California"});
#line 28
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table730, "And ");
#line hidden
#line 31
 testRunner.Then("user adds another vehicle or trailer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table731 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table731.AddRow(new string[] {
                            "1FTNE2EW0DDA17671",
                            "California",
                            "10000"});
#line 32
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table731, "And ");
#line hidden
#line 35
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table732 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table732.AddRow(new string[] {
                            "Chris",
                            "Rock",
                            "CA",
                            "03/13/1986",
                            "Yes less than 1 year",
                            "",
                            "",
                            "",
                            "No",
                            "A0002147"});
                table732.AddRow(new string[] {
                            "Eric",
                            "Smith",
                            "CA",
                            "04/01/1988",
                            "Yes less than 1 year",
                            "",
                            "",
                            "",
                            "No",
                            "A0003144"});
                table732.AddRow(new string[] {
                            "Mike",
                            "Jones",
                            "CA",
                            "09/03/1989",
                            "Yes less than 1 year",
                            "",
                            "",
                            "",
                            "No",
                            "A0002168"});
#line 37
 testRunner.And("user creates a driver with these values:", ((string)(null)), table732, "And ");
#line hidden
#line 42
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table733 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table733.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table733.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table733.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
                table733.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the California De" +
                                "partment of Motor Vehicles?",
                            "No"});
                table733.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table733.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table733.AddRow(new string[] {
                            "Do you haul large equipment or machinery?",
                            "No"});
                table733.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table733.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table733.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table733.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table733.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table733.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table733.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
#line 43
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table733, "Then ");
#line hidden
#line 59
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table734 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table734.AddRow(new string[] {
                            "First Name",
                            "John"});
                table734.AddRow(new string[] {
                            "Last Name",
                            "Jones"});
                table734.AddRow(new string[] {
                            "Business Email",
                            "Auction@yopmail.com"});
                table734.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table734.AddRow(new string[] {
                            "Business Website",
                            ""});
                table734.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table734.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table734.AddRow(new string[] {
                            "Owner\'s First Name",
                            "OwnerzFirstName"});
                table734.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "OwnerzLastName"});
                table734.AddRow(new string[] {
                            "Owner\'s Address",
                            "4205 Watkins Way"});
                table734.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table734.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "95135"});
                table734.AddRow(new string[] {
                            "Owner\'s City",
                            "San Jose"});
                table734.AddRow(new string[] {
                            "Owner\'s State",
                            "California"});
#line 61
 testRunner.And("user enters contact information:", ((string)(null)), table734, "And ");
#line hidden
#line 77
 testRunner.Then("user clicks continue from the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.Then("user verifies the appearance of the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table735 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table735.AddRow(new string[] {
                            "Yearly",
                            "No"});
                table735.AddRow(new string[] {
                            "Policy Coverages",
                            "$100,000 Combined Single Limit"});
#line 79
 testRunner.And("user completes their Quote", ((string)(null)), table735, "And ");
#line hidden
#line 83
 testRunner.Then("user clicks continue from the Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.Then("user verifies the appearance of the Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table736 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "OLF",
                            "Who Holds Vehicle"});
                table736.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "Myself"});
                table736.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "Myself"});
                table736.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "Myself"});
#line 85
 testRunner.And("user fills out the Additional Information page:", ((string)(null)), table736, "And ");
#line hidden
#line 90
 testRunner.Then("user clicks continue from Additional Information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table737 = new TechTalk.SpecFlow.Table(new string[] {
                            "Payment Plan",
                            "Card Type"});
                table737.AddRow(new string[] {
                            "12 Monthly",
                            "Visa"});
#line 91
 testRunner.Then("user goes to purchase a plan using the following information:", ((string)(null)), table737, "Then ");
#line hidden
#line 94
 testRunner.Then("user clicks purchase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.Then("user verifies the Thank You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
