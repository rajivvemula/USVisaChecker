// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.CommAuto.Referred.TransportationAndWarehousing_Referred
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_MilkHaulingUnder300Miles_RFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_MilkHaulingUnder300Miles_R.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Referred/TransportationAndWarehousing_Referred", "CA_MilkHaulingUnder300Miles_R", "CA Milk Hauling Under 300 Miles Referred In Illinois", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_MilkHaulingUnder300Miles_R")))
            {
                global::ApolloQAAutomation.Features.CommAuto.Referred.TransportationAndWarehousing_Referred.CA_MilkHaulingUnder300Miles_RFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Milk Hauling Under 300 Miles Referred")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_MilkHaulingUnder300Miles_R")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Referred")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("IL")]
        public void CAMilkHaulingUnder300MilesReferred()
        {
            string[] tagsOfScenario = new string[] {
                    "CA",
                    "Regression",
                    "Transportation",
                    "Referred",
                    "IL"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Milk Hauling Under 300 Miles Referred", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table191.AddRow(new string[] {
                            "Milk Hauling: under 300 miles",
                            "2",
                            "I Lease a Space From Others",
                            "Vehicles",
                            "60185",
                            "CA"});
#line 6
 testRunner.Given("user starts a quote with:", ((string)(null)), table191, "Given ");
#line hidden
#line 9
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table192.AddRow(new string[] {
                            "TEST CA REFER",
                            "",
                            ""});
#line 10
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table192, "Then ");
#line hidden
#line 16
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table193.AddRow(new string[] {
                            "2010",
                            "Corporation",
                            "100 Main St",
                            "",
                            "West Chicago",
                            ""});
#line 18
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table193, "And ");
#line hidden
#line 21
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table194.AddRow(new string[] {
                            "2HGFA16517H504306",
                            "Illinois",
                            "4250"});
#line 23
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table194, "And ");
#line hidden
#line 26
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table195.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "IL",
                            "10/05/1989",
                            "Yes 3 or more years",
                            "",
                            "",
                            "",
                            "No",
                            "L12345678901"});
#line 28
 testRunner.And("user creates a driver with these values:", ((string)(null)), table195, "And ");
#line hidden
#line 31
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table196.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table196.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table196.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table196.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table196.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table196.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table196.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "5"});
                table196.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            ""});
                table196.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table196.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table196.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table196.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table196.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
                table196.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Illinois Comm" +
                                "erce Commission?",
                            "No"});
#line 32
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table196, "Then ");
#line hidden
#line 48
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table197.AddRow(new string[] {
                            "First Name",
                            "TEST FN"});
                table197.AddRow(new string[] {
                            "Last Name",
                            "TEST LN"});
                table197.AddRow(new string[] {
                            "Business Email",
                            "QAAutomation@biberk.com"});
                table197.AddRow(new string[] {
                            "Business Phone",
                            "(123) 123-1321"});
                table197.AddRow(new string[] {
                            "Business Website",
                            ""});
                table197.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table197.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table197.AddRow(new string[] {
                            "Owner\'s First Name",
                            "TEST FN"});
                table197.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "TEST LN"});
                table197.AddRow(new string[] {
                            "Owner\'s Address",
                            "100 Main St"});
                table197.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table197.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "60185"});
                table197.AddRow(new string[] {
                            "Owner\'s City",
                            "West Chicago"});
                table197.AddRow(new string[] {
                            "Owner\'s State",
                            "Illinois"});
#line 49
 testRunner.And("user enters contact information:", ((string)(null)), table197, "And ");
#line hidden
#line 65
 testRunner.Then("user verifies the appearance of the Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "OLF",
                            "Who Holds Vehicle"});
                table198.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "The Business"});
#line 66
 testRunner.And("user fills out the Additional Information page:", ((string)(null)), table198, "And ");
#line hidden
#line 69
 testRunner.Then("user clicks continue from Additional Information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.And("user verifies the CA refer confirmation appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
