// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.CommAuto.Declined.AutoServicesAndDealers_Declined
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_RetailStoreAutomotiveParts_DFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_RetailStoreAutomotiveParts_D.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Declined/AutoServicesAndDealers_Declined", "CA_RetailStoreAutomotiveParts_D", @"Feature file to test the following new questions:
1. Do you have new or used vehicle/trailer inventory that you sell or lease to others? (This question causes question 2 to appear and is tested as part of the first scneario)
2. This policy is only for vehicles you own or lease for business purposes and also add to the policy.  It does not cover vehicles held for sale as inventory.  Separate coverage known as auto dealers coverage must be purchased.
3. Do you rent vehicles/trailers to others for pay?

Retail Store: Automotive Parts
4303 Harmony Church Rd, Adams, TN 37010", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_RetailStoreAutomotiveParts_D")))
            {
                global::ApolloQAAutomation.Features.CommAuto.Declined.AutoServicesAndDealers_Declined.CA_RetailStoreAutomotiveParts_DFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Retail Store Automotive Parts Declined Garage Keepers Insurance Coverage Servi" +
            "ce Repair")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_RetailStoreAutomotiveParts_D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SC")]
        public void CARetailStoreAutomotivePartsDeclinedGarageKeepersInsuranceCoverageServiceRepair()
        {
            string[] tagsOfScenario = new string[] {
                    "Declined",
                    "CA",
                    "Regression",
                    "SC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Retail Store Automotive Parts Declined Garage Keepers Insurance Coverage Servi" +
                    "ce Repair", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table14.AddRow(new string[] {
                            "Retail Store: Automotive Parts",
                            "7",
                            "I Work at a Job Site",
                            "Vehicles;Tools or Equipment",
                            "37010",
                            "CA"});
#line 13
 testRunner.Given("user starts a quote with:", ((string)(null)), table14, "Given ");
#line hidden
#line 16
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table15.AddRow(new string[] {
                            "test",
                            "No",
                            ""});
#line 17
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table15, "Then ");
#line hidden
#line 20
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table16.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "4303 Harmony Church Rd",
                            "",
                            "Adams",
                            ""});
#line 22
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table16, "And ");
#line hidden
#line 25
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Towing Or Roadside"});
                table17.AddRow(new string[] {
                            "1FTFW1E88NFA58133",
                            "Tennessee",
                            "No"});
#line 27
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table17, "And ");
#line hidden
#line 30
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "Accident",
                            "DLNumber"});
                table18.AddRow(new string[] {
                            "Test",
                            "Driver",
                            "TN",
                            "03/13/1986",
                            "No",
                            "085671243"});
#line 32
 testRunner.And("user creates a driver with these values:", ((string)(null)), table18, "And ");
#line hidden
#line 35
 testRunner.Then("user continues to the Operations page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table19.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table19.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table19.AddRow(new string[] {
                            "Do you have new or used vehicle/trailer inventory that you sell or lease to other" +
                                "s?",
                            "Yes"});
                table19.AddRow(new string[] {
                            "This policy is only for vehicles you own or lease for business purposes and also " +
                                "add to the policy.  It does not cover vehicles held for sale as inventory.  Sepa" +
                                "rate coverage known as auto dealers coverage must be purchased.",
                            "I do not agree"});
                table19.AddRow(new string[] {
                            "Do you rent vehicles/trailers to others for pay?",
                            "No"});
#line 36
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table19, "Then ");
#line hidden
#line 43
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table20.AddRow(new string[] {
                            "First Name",
                            "Test"});
                table20.AddRow(new string[] {
                            "Last Name",
                            "Driver"});
                table20.AddRow(new string[] {
                            "Business Email",
                            "abc@321.com"});
                table20.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table20.AddRow(new string[] {
                            "Business Website",
                            ""});
                table20.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table20.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table20.AddRow(new string[] {
                            "Owner\'s First Name",
                            "Test"});
                table20.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "Owner"});
                table20.AddRow(new string[] {
                            "Owner\'s Address",
                            "4303 Harmony Church Rd"});
                table20.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table20.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "37010"});
                table20.AddRow(new string[] {
                            "Owner\'s City",
                            "Adams"});
                table20.AddRow(new string[] {
                            "Owner\'s State",
                            "SC"});
#line 44
 testRunner.And("user enters contact information:", ((string)(null)), table20, "And ");
#line hidden
#line 60
 testRunner.Then("user verifies the appearance of the Decline page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Retail Store Automotive Parts Declined Renting Vehicles To Others For Pay")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_RetailStoreAutomotiveParts_D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NewCAQuestions")]
        public void CARetailStoreAutomotivePartsDeclinedRentingVehiclesToOthersForPay()
        {
            string[] tagsOfScenario = new string[] {
                    "Declined",
                    "CA",
                    "Regression",
                    "SC",
                    "NewCAQuestions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Retail Store Automotive Parts Declined Renting Vehicles To Others For Pay", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table21.AddRow(new string[] {
                            "Retail Store: Automotive Parts",
                            "7",
                            "I Work at a Job Site",
                            "Vehicles;Tools or Equipment",
                            "37010",
                            "CA"});
#line 64
 testRunner.Given("user starts a quote with:", ((string)(null)), table21, "Given ");
#line hidden
#line 67
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table22.AddRow(new string[] {
                            "test",
                            "No",
                            ""});
#line 68
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table22, "Then ");
#line hidden
#line 71
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table23.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "4303 Harmony Church Rd",
                            "",
                            "Adams",
                            ""});
#line 73
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table23, "And ");
#line hidden
#line 76
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Towing Or Roadside"});
                table24.AddRow(new string[] {
                            "1FTFW1E88NFA58133",
                            "Tennessee",
                            "No"});
#line 78
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table24, "And ");
#line hidden
#line 81
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "Accident",
                            "DLNumber"});
                table25.AddRow(new string[] {
                            "Test",
                            "Driver",
                            "TN",
                            "03/13/1986",
                            "No",
                            "085671243"});
#line 83
 testRunner.And("user creates a driver with these values:", ((string)(null)), table25, "And ");
#line hidden
#line 86
 testRunner.Then("user continues to the Operations page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table26.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table26.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table26.AddRow(new string[] {
                            "Do you have new or used vehicle/trailer inventory that you sell or lease to other" +
                                "s?",
                            "No"});
                table26.AddRow(new string[] {
                            "Do you rent vehicles/trailers to others for pay?",
                            "Yes"});
#line 87
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table26, "Then ");
#line hidden
#line 93
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table27.AddRow(new string[] {
                            "First Name",
                            "Test"});
                table27.AddRow(new string[] {
                            "Last Name",
                            "Driver"});
                table27.AddRow(new string[] {
                            "Business Email",
                            "abc@321.com"});
                table27.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table27.AddRow(new string[] {
                            "Business Website",
                            ""});
                table27.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table27.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table27.AddRow(new string[] {
                            "Owner\'s First Name",
                            "Test"});
                table27.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "Owner"});
                table27.AddRow(new string[] {
                            "Owner\'s Address",
                            "4303 Harmony Church Rd"});
                table27.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table27.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "37010"});
                table27.AddRow(new string[] {
                            "Owner\'s City",
                            "Adams"});
                table27.AddRow(new string[] {
                            "Owner\'s State",
                            "SC"});
#line 94
 testRunner.And("user enters contact information:", ((string)(null)), table27, "And ");
#line hidden
#line 110
 testRunner.Then("user verifies the appearance of the Decline page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
