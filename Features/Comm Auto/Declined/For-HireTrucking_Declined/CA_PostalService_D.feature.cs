// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.CommAuto.Declined.For_HireTrucking_Declined
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_PostalService_DFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_PostalService_D.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Declined/For-HireTrucking_Declined", "CA_PostalService_D", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_PostalService_D")))
            {
                global::BiBerkLOB.Features.CommAuto.Declined.For_HireTrucking_Declined.CA_PostalService_DFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Industry",
                        "Employees",
                        "Location",
                        "Own or Lease",
                        "ZIP Code",
                        "LOB"});
            table61.AddRow(new string[] {
                        "Postal Service",
                        "2",
                        "I Run My Business From Property I Own",
                        "Vehicles",
                        "77449",
                        "CA"});
#line 7
 testRunner.Given("user starts a quote with:", ((string)(null)), table61, "Given ");
#line hidden
#line 10
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name of Business",
                        "DBA",
                        "Policy Start Date"});
            table62.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 11
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table62, "Then ");
#line hidden
#line 17
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Year Business Started",
                        "How Business Structured",
                        "Address1",
                        "Address2",
                        "City",
                        "Select an Address"});
            table63.AddRow(new string[] {
                        "2012",
                        "Corporation",
                        "18942 Sandelford Dr",
                        "",
                        "Katy",
                        ""});
#line 18
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table63, "And ");
#line hidden
#line 21
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "VIN",
                        "Parking Address",
                        "Vehicle Worth"});
            table64.AddRow(new string[] {
                        "4S7PT9J18RC013879",
                        "Texas",
                        "2800"});
#line 22
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table64, "And ");
#line hidden
#line 25
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "DLState",
                        "DOB",
                        "CDL",
                        "ILDDC",
                        "ILViolation",
                        "ILDLRevoked",
                        "Accident",
                        "DLNumber"});
            table65.AddRow(new string[] {
                        "Chuck",
                        "Norris",
                        "TX",
                        "03131988",
                        "Yes 3 or more years",
                        "",
                        "",
                        "",
                        "No",
                        "02938544"});
#line 27
 testRunner.And("user creates a driver with these values:", ((string)(null)), table65, "And ");
#line hidden
#line 30
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_PostalService_D gets decline due to hauling type: Coal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_PostalService_D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TX")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        public void CA_PostalService_DGetsDeclineDueToHaulingTypeCoal()
        {
            string[] tagsOfScenario = new string[] {
                    "Transportation",
                    "Declined",
                    "Regression",
                    "TX",
                    "CA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_PostalService_D gets decline due to hauling type: Coal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table66.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table66.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table66.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table66.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table66.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table66.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table66.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table66.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table66.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "Coal"});
                table66.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table66.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table66.AddRow(new string[] {
                            "Do you participate in a delivery service on behalf of Amazon.com, Inc.?",
                            "No"});
                table66.AddRow(new string[] {
                            "Do you rent, hire, or borrow any vehicles?",
                            "No"});
                table66.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table66.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
#line 34
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table66, "Then ");
#line hidden
#line 51
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table67.AddRow(new string[] {
                            "First Name",
                            "Larry"});
                table67.AddRow(new string[] {
                            "Last Name",
                            "Barry"});
                table67.AddRow(new string[] {
                            "Business Email",
                            "a@b.com"});
                table67.AddRow(new string[] {
                            "Business Phone",
                            "5558675309"});
                table67.AddRow(new string[] {
                            "Business Website",
                            ""});
                table67.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table67.AddRow(new string[] {
                            "Owner\'s First Name",
                            "Larry"});
                table67.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "Barry"});
                table67.AddRow(new string[] {
                            "Owner\'s Address",
                            "18942 Sandelford Dr"});
                table67.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table67.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "77449"});
                table67.AddRow(new string[] {
                            "Owner\'s City",
                            "Katy"});
                table67.AddRow(new string[] {
                            "Owner\'s State",
                            "Texas"});
#line 53
 testRunner.And("user enters contact information:", ((string)(null)), table67, "And ");
#line hidden
#line 68
 testRunner.Then("user verifies the appearance of the Decline page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_PostalService_D gets decline due to hauling type: Livestock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_PostalService_D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TX")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        public void CA_PostalService_DGetsDeclineDueToHaulingTypeLivestock()
        {
            string[] tagsOfScenario = new string[] {
                    "Transportation",
                    "Declined",
                    "Regression",
                    "TX",
                    "CA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_PostalService_D gets decline due to hauling type: Livestock", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table68.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table68.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table68.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table68.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table68.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table68.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table68.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table68.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table68.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "Livestock"});
                table68.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table68.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table68.AddRow(new string[] {
                            "Do you participate in a delivery service on behalf of Amazon.com, Inc.?",
                            "No"});
                table68.AddRow(new string[] {
                            "Do you rent, hire, or borrow any vehicles?",
                            "No"});
                table68.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table68.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
#line 72
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table68, "Then ");
#line hidden
#line 89
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table69.AddRow(new string[] {
                            "First Name",
                            "Larry"});
                table69.AddRow(new string[] {
                            "Last Name",
                            "Barry"});
                table69.AddRow(new string[] {
                            "Business Email",
                            "a@b.com"});
                table69.AddRow(new string[] {
                            "Business Phone",
                            "5558675309"});
                table69.AddRow(new string[] {
                            "Business Website",
                            ""});
                table69.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table69.AddRow(new string[] {
                            "Owner\'s First Name",
                            "Larry"});
                table69.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "Barry"});
                table69.AddRow(new string[] {
                            "Owner\'s Address",
                            "18942 Sandelford Dr"});
                table69.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table69.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "77449"});
                table69.AddRow(new string[] {
                            "Owner\'s City",
                            "Katy"});
                table69.AddRow(new string[] {
                            "Owner\'s State",
                            "Texas"});
#line 91
 testRunner.And("user enters contact information:", ((string)(null)), table69, "And ");
#line hidden
#line 106
 testRunner.Then("user verifies the appearance of the Decline page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_PostalService_D gets decline due to hauling type: Sugarcane")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_PostalService_D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TX")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        public void CA_PostalService_DGetsDeclineDueToHaulingTypeSugarcane()
        {
            string[] tagsOfScenario = new string[] {
                    "Transportation",
                    "Declined",
                    "Regression",
                    "TX",
                    "CA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_PostalService_D gets decline due to hauling type: Sugarcane", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table70.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table70.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table70.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table70.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table70.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table70.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table70.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table70.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table70.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "Sugarcane"});
                table70.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table70.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table70.AddRow(new string[] {
                            "Do you participate in a delivery service on behalf of Amazon.com, Inc.?",
                            "No"});
                table70.AddRow(new string[] {
                            "Do you rent, hire, or borrow any vehicles?",
                            "No"});
                table70.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table70.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
#line 110
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table70, "Then ");
#line hidden
#line 127
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table71.AddRow(new string[] {
                            "First Name",
                            "Larry"});
                table71.AddRow(new string[] {
                            "Last Name",
                            "Barry"});
                table71.AddRow(new string[] {
                            "Business Email",
                            "a@b.com"});
                table71.AddRow(new string[] {
                            "Business Phone",
                            "5558675309"});
                table71.AddRow(new string[] {
                            "Business Website",
                            ""});
                table71.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table71.AddRow(new string[] {
                            "Owner\'s First Name",
                            "Larry"});
                table71.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "Barry"});
                table71.AddRow(new string[] {
                            "Owner\'s Address",
                            "18942 Sandelford Dr"});
                table71.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table71.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "77449"});
                table71.AddRow(new string[] {
                            "Owner\'s City",
                            "Katy"});
                table71.AddRow(new string[] {
                            "Owner\'s State",
                            "Texas"});
#line 129
 testRunner.And("user enters contact information:", ((string)(null)), table71, "And ");
#line hidden
#line 144
 testRunner.Then("user verifies the appearance of the Decline page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
