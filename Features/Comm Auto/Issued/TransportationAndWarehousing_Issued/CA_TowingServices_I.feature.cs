// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.CommAuto.Issued.TransportationAndWarehousing_Issued
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_TowingServices_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_TowingServices_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Issued/TransportationAndWarehousing_Issued", "CA_TowingServices_I", "Purpose: Purchase a CA policy in SC with one vehicle and no accidents/incidents.\r" +
                    "\nState: SC\r\nNumber of Vehicles: 1\r\nNumber of Trailers: 0", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_TowingServices_I")))
            {
                global::ApolloQAAutomation.Features.CommAuto.Issued.TransportationAndWarehousing_Issued.CA_TowingServices_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Towing Services Issued In South Carolina")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_TowingServices_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CATowingServicesIssuedInSouthCarolina()
        {
            string[] tagsOfScenario = new string[] {
                    "Issued",
                    "Regression",
                    "SC",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Towing Services Issued In South Carolina", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table398.AddRow(new string[] {
                            "Towing Services",
                            "0",
                            "I Lease a Space From Others",
                            "Vehicles;Tools or Equipment",
                            "29209",
                            "CA"});
#line 9
 testRunner.Given("user starts a quote with:", ((string)(null)), table398, "Given ");
#line hidden
#line 12
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table399.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 13
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table399, "Then ");
#line hidden
#line 19
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table400.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "7501 Garners Ferry Rd",
                            "",
                            "Columbia",
                            ""});
#line 21
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table400, "And ");
#line hidden
#line 24
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Type Insure",
                            "Parking Address",
                            "Vehicle Worth",
                            "Auto Repo",
                            "Plowing Snow"});
                table401.AddRow(new string[] {
                            "1FDJF3717DPB12872",
                            "Tow Truck: Wheel-Lift/Hook",
                            "South Carolina",
                            "2800",
                            "No",
                            "No"});
#line 26
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table401, "And ");
#line hidden
#line 29
 testRunner.Then("user adds another vehicle or trailer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Plowing Snow"});
                table402.AddRow(new string[] {
                            "WDDHF7HB0BA270302",
                            "South Carolina",
                            "No"});
#line 30
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table402, "And ");
#line hidden
#line 33
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table403.AddRow(new string[] {
                            "Minnie",
                            "Mouse",
                            "SC",
                            "03/13/1986",
                            "Yes 3 or more years",
                            "",
                            "",
                            "",
                            "Yes",
                            "085671243"});
#line 35
 testRunner.And("user creates a driver with these values:", ((string)(null)), table403, "And ");
#line hidden
#line 38
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.Then("user verifies the appearance of the Drivers Incidents page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                            "Driver",
                            "Date",
                            "Incident Type",
                            "At Fault",
                            "Violation/Conviction",
                            "Reckless",
                            "Another V/C",
                            "Violation/Conviction",
                            "Another V/C",
                            "Violation/Conviction",
                            "Another V/C"});
                table404.AddRow(new string[] {
                            "Minnie Mouse",
                            "11/11/2021",
                            "Accident",
                            "No",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table404.AddRow(new string[] {
                            "Minnie Mouse",
                            "11/12/2021",
                            "Violation/Conviction",
                            "",
                            "Speeding 16 MPH or more over the Speed Limit",
                            "Yes",
                            "Yes",
                            "Red Light/Stop Sign violation",
                            "Yes",
                            "Hit and Run",
                            "No"});
#line 40
 testRunner.Then("user adds incidents with the following values:", ((string)(null)), table404, "Then ");
#line hidden
#line 44
 testRunner.Then("user continues to the Operations page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table405.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table405.AddRow(new string[] {
                            "Is your business on call 24/7?",
                            "No"});
                table405.AddRow(new string[] {
                            "Does your business also have a repair shop, impound lot, or salvage yard?",
                            "No we only provide towing or roadside assistance services"});
                table405.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table405.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table405.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table405.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table405.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table405.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table405.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table405.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "Building Materials;Logs (Forestry);Mobile/Manufactured Homes;Sand & Gravel"});
                table405.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table405.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table405.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table405.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table405.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
                table405.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from a South Carolina " +
                                "state department?",
                            "Yes"});
                table405.AddRow(new string[] {
                            "Do the owner(s) of this business have a combined majority ownership in any other " +
                                "transportation business?",
                            "No"});
#line 45
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table405, "Then ");
#line hidden
#line 65
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table406.AddRow(new string[] {
                            "First Name",
                            "Ariana"});
                table406.AddRow(new string[] {
                            "Last Name",
                            "Grande"});
                table406.AddRow(new string[] {
                            "Business Email",
                            "a@b.co"});
                table406.AddRow(new string[] {
                            "Business Phone",
                            "(412) 867-5309"});
                table406.AddRow(new string[] {
                            "Business Website",
                            ""});
                table406.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table406.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table406.AddRow(new string[] {
                            "Owner\'s First Name",
                            "Larry"});
                table406.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "Barry"});
                table406.AddRow(new string[] {
                            "Owner\'s Address",
                            "2112 S Spring St"});
                table406.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table406.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "62704"});
                table406.AddRow(new string[] {
                            "Owner\'s City",
                            "Springfield"});
                table406.AddRow(new string[] {
                            "Owner\'s State",
                            "IL"});
#line 66
 testRunner.And("user enters contact information:", ((string)(null)), table406, "And ");
#line hidden
#line 82
 testRunner.Then("user verifies the appearance of the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
 testRunner.Then("user clicks continue from the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.Then("user verifies the appearance of the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table407.AddRow(new string[] {
                            "Yearly",
                            "Yes"});
                table407.AddRow(new string[] {
                            "Policy Coverages",
                            "$100,000 Combined Single Limit"});
                table407.AddRow(new string[] {
                            "Vehicle 1 Coverage",
                            "$1000 Comprehensive Deductible / $1000 Collision Deductible"});
                table407.AddRow(new string[] {
                            "Vehicle 2 Coverage",
                            "$500 Comprehensive Deductible / $500 Collision Deductible"});
                table407.AddRow(new string[] {
                            "In-Tow",
                            "$100,000 Limit / $1,000 Deductible"});
#line 85
 testRunner.And("user completes their Quote", ((string)(null)), table407, "And ");
#line hidden
#line 92
 testRunner.Then("user clicks continue from the Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("user verifies the appearance of the Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "OLF",
                            "Who Holds Vehicle"});
                table408.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "The Business"});
                table408.AddRow(new string[] {
                            "Yes",
                            "Financed",
                            ""});
#line 94
 testRunner.And("user fills out the Additional Information page:", ((string)(null)), table408, "And ");
#line hidden
#line 98
 testRunner.Then("user clicks continue from Additional Information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                            "Payment Plan",
                            "Card Type"});
                table409.AddRow(new string[] {
                            "12 Monthly",
                            "Visa"});
#line 99
 testRunner.Then("user goes to purchase a plan using the following information:", ((string)(null)), table409, "Then ");
#line hidden
#line 102
 testRunner.Then("user clicks purchase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.Then("user verifies the Thank You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
