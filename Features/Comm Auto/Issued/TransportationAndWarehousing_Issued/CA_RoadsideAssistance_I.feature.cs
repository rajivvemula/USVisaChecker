// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.CommAuto.Issued.TransportationAndWarehousing_Issued
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_RoadsideAssistance_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_RoadsideAssistance_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Issued/TransportationAndWarehousing_Issued", "CA_RoadsideAssistance_I", "Purpose: Purchase a CA policy in TX with one vehicle and no accidents/incidents.\r" +
                    "\nState: TX\r\nNumber of Vehicles: 1\r\nNumber of Trailers: 0", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_RoadsideAssistance_I")))
            {
                global::ApolloQAAutomation.Features.CommAuto.Issued.TransportationAndWarehousing_Issued.CA_RoadsideAssistance_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Roadside Assistance Issued In Texas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_RoadsideAssistance_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TX")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CARoadsideAssistanceIssuedInTexas()
        {
            string[] tagsOfScenario = new string[] {
                    "Issued",
                    "Regression",
                    "TX",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Roadside Assistance Issued In Texas", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table388.AddRow(new string[] {
                            "Roadside Assistance",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles;Inventory or Stock",
                            "75662",
                            "CA"});
#line 9
 testRunner.Given("user starts a quote with:", ((string)(null)), table388, "Given ");
#line hidden
#line 12
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table389.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 13
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table389, "Then ");
#line hidden
#line 19
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table390.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "906 US Highway 259 N",
                            "",
                            "Kilgore",
                            ""});
#line 21
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table390, "And ");
#line hidden
#line 24
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth",
                            "Plowing Snow"});
                table391.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "Texas",
                            "2800",
                            "No"});
#line 26
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table391, "And ");
#line hidden
#line 29
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table392.AddRow(new string[] {
                            "Mickey",
                            "Mouse",
                            "TX",
                            "03/13/1985",
                            "Yes 3 or more years",
                            "",
                            "",
                            "",
                            "No",
                            "12345678"});
#line 31
 testRunner.And("user creates a driver with these values:", ((string)(null)), table392, "And ");
#line hidden
#line 34
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table393.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table393.AddRow(new string[] {
                            "Do you have any active Trailer Interchange Agreements?",
                            "No"});
                table393.AddRow(new string[] {
                            "Is your business on call 24/7?",
                            "No"});
                table393.AddRow(new string[] {
                            "Does your business also have a repair shop, impound lot, or salvage yard?",
                            "Yes we have a repair shop, impound lot, or salvage yard"});
                table393.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table393.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table393.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table393.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table393.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table393.AddRow(new string[] {
                            @"This policy is only for vehicles you own or lease for business purposes and also add to the policy.  It does not cover vehicles on your business premises that you are repairing, servicing, or have in an impound, or salvage yard.   Separate coverage known as garagekeeper's liability must be purchased.",
                            "I understand"});
                table393.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table393.AddRow(new string[] {
                            "I agree to provide a claims history (also known as a \"loss run\") that matches the" +
                                " information in this application for the last 3 years within 30 days of {effecti" +
                                "ve date}.",
                            "true"});
                table393.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "Motor Vehicles (Cars)"});
                table393.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table393.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table393.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table393.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table393.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
                table393.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Texas Departm" +
                                "ent of Motor Vehicles?",
                            "No"});
#line 35
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table393, "Then ");
#line hidden
#line 56
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table394.AddRow(new string[] {
                            "First Name",
                            "Ariana"});
                table394.AddRow(new string[] {
                            "Last Name",
                            "Grande"});
                table394.AddRow(new string[] {
                            "Business Email",
                            "chauffeur@yopmail.com"});
                table394.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table394.AddRow(new string[] {
                            "Business Website",
                            ""});
                table394.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table394.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table394.AddRow(new string[] {
                            "Owner\'s First Name",
                            "AutoLarryzzzzzzzzzzz"});
                table394.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "AutoBarryzzzzzzzzzzzzz"});
                table394.AddRow(new string[] {
                            "Owner\'s Address",
                            "1879 Watson Blvd Apt 1"});
                table394.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table394.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "31093"});
                table394.AddRow(new string[] {
                            "Owner\'s City",
                            "warner robins"});
                table394.AddRow(new string[] {
                            "Owner\'s State",
                            "Georgia"});
                table394.AddRow(new string[] {
                            "Select an Address",
                            "Suggested"});
#line 58
 testRunner.And("user enters contact information:", ((string)(null)), table394, "And ");
#line hidden
#line 75
 testRunner.Then("user verifies the appearance of the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.Then("user clicks continue from the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.Then("user verifies the appearance of the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table395.AddRow(new string[] {
                            "Yearly",
                            "No"});
                table395.AddRow(new string[] {
                            "Policy Coverages",
                            "$750,000 Combined Single Limit"});
                table395.AddRow(new string[] {
                            "Vehicle 1 Coverage",
                            "$1000 Comprehensive Deductible / $1000 Collision Deductible"});
#line 78
 testRunner.And("user completes their Quote", ((string)(null)), table395, "And ");
#line hidden
#line 83
 testRunner.Then("user clicks continue from the Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.Then("user verifies the appearance of the Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "OLF",
                            "Who Holds Vehicle"});
                table396.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "The Business"});
#line 85
 testRunner.And("user fills out the Additional Information page:", ((string)(null)), table396, "And ");
#line hidden
#line 88
 testRunner.Then("user clicks continue from Additional Information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                            "Payment Plan",
                            "Card Type"});
                table397.AddRow(new string[] {
                            "12 Monthly",
                            "Visa"});
#line 89
 testRunner.Then("user goes to purchase a plan using the following information:", ((string)(null)), table397, "Then ");
#line hidden
#line 92
 testRunner.Then("user clicks purchase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("user verifies the Thank You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.And("user verifies the WC section on the Thank You page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
