// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.CommAuto.Issued.TransportationAndWarehousing_Issued
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_HotShotTrucking_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_HotShotTrucking_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Issued/TransportationAndWarehousing_Issued", "CA_HotShotTrucking_I", "Purpose: Purchase a CA policy in IN with one vehicle and no accidents/incidents.\r" +
                    "\nStates: IN, GA, CA\r\nNumber of Vehicles: 1\r\nNumber of Trailers: 1", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_HotShotTrucking_I")))
            {
                global::ApolloQAAutomation.Features.CommAuto.Issued.TransportationAndWarehousing_Issued.CA_HotShotTrucking_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Hot Shot Trucking Issued In Indiana")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_HotShotTrucking_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("IN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CAHotShotTruckingIssuedInIndiana()
        {
            string[] tagsOfScenario = new string[] {
                    "Issued",
                    "Regression",
                    "IN",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Hot Shot Trucking Issued In Indiana", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table319.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "46802",
                            "CA"});
#line 9
 testRunner.Given("user starts a quote with:", ((string)(null)), table319, "Given ");
#line hidden
#line 12
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table320.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 13
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table320, "Then ");
#line hidden
#line 16
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table321.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "515 W Jefferson Blvd",
                            "",
                            "Fort Wayne",
                            ""});
#line 18
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table321, "And ");
#line hidden
#line 21
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table322.AddRow(new string[] {
                            "5TDDK3DCXGS129517",
                            "Indiana",
                            "10000"});
#line 23
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table322, "And ");
#line hidden
#line 26
 testRunner.Then("user adds another vehicle or trailer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Trailer Address",
                            "Trailer Worth"});
                table323.AddRow(new string[] {
                            "1MT2N5220LH028352",
                            "Indiana",
                            "1000"});
#line 27
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table323, "And ");
#line hidden
#line 30
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table324.AddRow(new string[] {
                            "Donald",
                            "Duck",
                            "IN",
                            "03/13/1986",
                            "Yes 3 or more years",
                            "",
                            "",
                            "",
                            "No",
                            ""});
#line 32
 testRunner.And("user creates a driver with these values:", ((string)(null)), table324, "And ");
#line hidden
#line 35
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table325.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table325.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "51 to 100 miles"});
                table325.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "Yes"});
                table325.AddRow(new string[] {
                            "Enter the USDOT number",
                            "2666377"});
                table325.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Federal Motor" +
                                " Carrier Safety Administration (FMCSA)?",
                            "Yes"});
                table325.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table325.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table325.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table325.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            ""});
                table325.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table325.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table325.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table325.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table325.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table325.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table325.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table325.AddRow(new string[] {
                            "Which types of authority from FMCSA do you have or plan on having?",
                            "Common Carrier"});
                table325.AddRow(new string[] {
                            "Do you travel into Ohio?",
                            "Yes"});
                table325.AddRow(new string[] {
                            "Does your business require an Ohio OS-32 Special Permit filed?",
                            "No"});
                table325.AddRow(new string[] {
                            "Do the owner(s) of this business have a combined majority ownership in any other " +
                                "transportation business?",
                            "No"});
#line 36
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table325, "Then ");
#line hidden
#line 58
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table326.AddRow(new string[] {
                            "First Name",
                            "Ariana"});
                table326.AddRow(new string[] {
                            "Last Name",
                            "Grande"});
                table326.AddRow(new string[] {
                            "Business Email",
                            "a@b.co"});
                table326.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table326.AddRow(new string[] {
                            "Business Website",
                            ""});
                table326.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table326.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table326.AddRow(new string[] {
                            "Owner\'s First Name",
                            "Larry"});
                table326.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "Barry"});
                table326.AddRow(new string[] {
                            "Owner\'s Address",
                            "2112 S Spring St"});
                table326.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table326.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "62704"});
                table326.AddRow(new string[] {
                            "Owner\'s City",
                            "Springfield"});
                table326.AddRow(new string[] {
                            "Owner\'s State",
                            "IL"});
#line 60
 testRunner.And("user enters contact information:", ((string)(null)), table326, "And ");
#line hidden
#line 76
 testRunner.Then("user verifies the appearance of the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.Then("user clicks continue from the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.Then("user verifies the appearance of the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table327.AddRow(new string[] {
                            "Yearly",
                            "No"});
                table327.AddRow(new string[] {
                            "Policy Coverages",
                            "$750,000 Combined Single Limit"});
                table327.AddRow(new string[] {
                            "Vehicle 1 Coverage",
                            "$1000 Comprehensive Deductible / $1000 Collision Deductible"});
#line 79
 testRunner.And("user completes their Quote", ((string)(null)), table327, "And ");
#line hidden
                TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                            "Coverages Not Selected"});
                table328.AddRow(new string[] {
                            "Rental"});
#line 84
 testRunner.Then("user verifies the coverage details", ((string)(null)), table328, "Then ");
#line hidden
#line 87
 testRunner.Then("user clicks Get Plan from coverage details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.Then("user verifies the appearance of the Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "OLF",
                            "Who Holds Vehicle"});
                table329.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "The Business"});
                table329.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "The Business"});
#line 89
 testRunner.And("user fills out the Additional Information page:", ((string)(null)), table329, "And ");
#line hidden
#line 93
 testRunner.Then("user clicks continue from Additional Information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                            "Payment Plan",
                            "Card Type"});
                table330.AddRow(new string[] {
                            "12 Monthly",
                            "Visa"});
#line 94
 testRunner.Then("user goes to purchase a plan using the following information:", ((string)(null)), table330, "Then ");
#line hidden
#line 97
 testRunner.Then("user clicks purchase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.Then("user verifies the Thank You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
 testRunner.And("user verifies the BOP section on the Thank You page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Hot Shot Trucking Issued In Georgia")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_HotShotTrucking_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HotShotTrucking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CAHotShotTruckingIssuedInGeorgia()
        {
            string[] tagsOfScenario = new string[] {
                    "HotShotTrucking",
                    "Issued",
                    "Regression",
                    "GA",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Hot Shot Trucking Issued In Georgia", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table331.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "31093",
                            "CA"});
#line 103
 testRunner.Given("user starts a quote with:", ((string)(null)), table331, "Given ");
#line hidden
#line 106
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table332.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 107
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table332, "Then ");
#line hidden
#line 110
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City"});
                table333.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "1879 Watson Blvd",
                            "",
                            "Warner Robins"});
#line 112
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table333, "And ");
#line hidden
#line 115
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table334.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "Georgia",
                            "3200"});
#line 117
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table334, "And ");
#line hidden
#line 120
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table335.AddRow(new string[] {
                            "Donald",
                            "Duck",
                            "GA",
                            "03/13/1988",
                            "Yes 3 or more years",
                            "",
                            "",
                            "",
                            "No",
                            "453453453"});
#line 122
 testRunner.And("user creates a driver with these values:", ((string)(null)), table335, "And ");
#line hidden
#line 125
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table336.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table336.AddRow(new string[] {
                            "Do you have any active Trailer Interchange Agreements?",
                            "No"});
                table336.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table336.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table336.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table336.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table336.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table336.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table336.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table336.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            ""});
                table336.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table336.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table336.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table336.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table336.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
#line 126
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table336, "Then ");
#line hidden
#line 143
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table337.AddRow(new string[] {
                            "First Name",
                            "ZZZZZLarryzzz"});
                table337.AddRow(new string[] {
                            "Last Name",
                            "ZZZZBarryzz"});
                table337.AddRow(new string[] {
                            "Business Email",
                            "larryzbarryzzz@b.com"});
                table337.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table337.AddRow(new string[] {
                            "Business Website",
                            ""});
                table337.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table337.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table337.AddRow(new string[] {
                            "Owner\'s First Name",
                            "ZZZZLarryzz"});
                table337.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "ZZZBarryz"});
                table337.AddRow(new string[] {
                            "Owner\'s Address",
                            "2112 S Spring St"});
                table337.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table337.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "62704"});
                table337.AddRow(new string[] {
                            "Owner\'s City",
                            "Springfield"});
                table337.AddRow(new string[] {
                            "Owner\'s State",
                            "IL"});
#line 145
 testRunner.And("user enters contact information:", ((string)(null)), table337, "And ");
#line hidden
#line 161
 testRunner.Then("user verifies the appearance of the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
 testRunner.Then("user clicks continue from the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
 testRunner.Then("user verifies the appearance of the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table338.AddRow(new string[] {
                            "Yearly",
                            "No"});
                table338.AddRow(new string[] {
                            "Policy Coverages",
                            "$750,000 Combined Single Limit"});
                table338.AddRow(new string[] {
                            "Vehicle 1 Coverage",
                            "$1000 Comprehensive Deductible / $1000 Collision Deductible"});
                table338.AddRow(new string[] {
                            "Medical Payments",
                            "$500"});
                table338.AddRow(new string[] {
                            "Cargo Liability",
                            "$100,000 Limit / $1,000 Deductible"});
                table338.AddRow(new string[] {
                            "Trailer Interchange",
                            "$50,000 Limit / $1,000 Deductible"});
#line 164
 testRunner.And("user completes their Quote", ((string)(null)), table338, "And ");
#line hidden
                TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                            "Coverages Not Selected"});
                table339.AddRow(new string[] {
                            "Rental"});
#line 172
 testRunner.Then("user verifies the coverage details", ((string)(null)), table339, "Then ");
#line hidden
#line 175
 testRunner.Then("user clicks Get Plan from coverage details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
 testRunner.Then("user verifies the appearance of the Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "OLF",
                            "Who Holds Vehicle"});
                table340.AddRow(new string[] {
                            "Yes",
                            "Owned",
                            "The Business"});
#line 177
 testRunner.And("user fills out the Additional Information page:", ((string)(null)), table340, "And ");
#line hidden
#line 180
 testRunner.Then("user clicks continue from Additional Information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                            "Payment Plan",
                            "Card Type"});
                table341.AddRow(new string[] {
                            "12 Monthly",
                            "Visa"});
#line 181
 testRunner.Then("user goes to purchase a plan using the following information:", ((string)(null)), table341, "Then ");
#line hidden
#line 184
 testRunner.Then("user clicks purchase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.Then("user verifies the Thank You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 186
 testRunner.And("user verifies the WC section on the Thank You page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Hot Shot Trucking Issued In California")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_HotShotTrucking_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HotShotTrucking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Cali")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CAHotShotTruckingIssuedInCalifornia()
        {
            string[] tagsOfScenario = new string[] {
                    "HotShotTrucking",
                    "Issued",
                    "Regression",
                    "Cali",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Hot Shot Trucking Issued In California", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table342.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "95204",
                            "CA"});
#line 190
 testRunner.Given("user starts a quote with:", ((string)(null)), table342, "Given ");
#line hidden
#line 193
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table343.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 194
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table343, "Then ");
#line hidden
#line 197
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 198
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City"});
                table344.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "1687 N California St",
                            "",
                            "Stockton"});
#line 199
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table344, "And ");
#line hidden
#line 202
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                            "No VIN",
                            "Type Insure",
                            "Year",
                            "Make",
                            "Enter Year Make Model",
                            "Model",
                            "Parking Address",
                            "Vehicle Worth"});
                table345.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "Truck Tractor",
                            "2003",
                            "MACK",
                            "",
                            "600",
                            "California",
                            "7800"});
#line 204
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table345, "And ");
#line hidden
#line 207
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table346.AddRow(new string[] {
                            "Donald",
                            "Duck",
                            "CA",
                            "03/13/1988",
                            "Yes 3 or more years",
                            "",
                            "",
                            "",
                            "No",
                            ""});
#line 209
 testRunner.And("user creates a driver with these values:", ((string)(null)), table346, "And ");
#line hidden
#line 212
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table347.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table347.AddRow(new string[] {
                            "Do you have any active Trailer Interchange Agreements?",
                            "No"});
                table347.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "101 to 300 miles"});
                table347.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table347.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table347.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table347.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table347.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table347.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table347.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "Building Materials;Logs (Forestry);Mobile/Manufactured Homes;Sand & Gravel"});
                table347.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table347.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table347.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table347.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "Yes"});
                table347.AddRow(new string[] {
                            "Have you added all Owner-Operator vehicles to this quote?",
                            "Yes"});
                table347.AddRow(new string[] {
                            "What is the annual cost for vehicles that you rent, hire, or borrow?",
                            "2800"});
                table347.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "Yes"});
                table347.AddRow(new string[] {
                            "Enter the USDOT number",
                            "2676783"});
                table347.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Federal Motor" +
                                " Carrier Safety Administration (FMCSA)?",
                            "Yes"});
                table347.AddRow(new string[] {
                            "Which types of authority from FMCSA do you have or plan on having?",
                            "Contract Carrier;Common Carrier"});
                table347.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the California De" +
                                "partment of Motor Vehicles?",
                            "Yes"});
                table347.AddRow(new string[] {
                            "Enter your California Motor Carrier #:",
                            "BPYCKN"});
                table347.AddRow(new string[] {
                            "Do the owner(s) of this business have a combined majority ownership in any other " +
                                "transportation business?",
                            "No"});
#line 213
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table347, "Then ");
#line hidden
#line 238
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 239
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table348.AddRow(new string[] {
                            "First Name",
                            "ZZZZZLarryzzz"});
                table348.AddRow(new string[] {
                            "Last Name",
                            "ZZZZBarryzz"});
                table348.AddRow(new string[] {
                            "Business Email",
                            "larryzbarryzzz@b.com"});
                table348.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table348.AddRow(new string[] {
                            "Business Website",
                            ""});
                table348.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table348.AddRow(new string[] {
                            "Owner\'s First Name",
                            "ZZZZLarryzz"});
                table348.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "ZZZBarryz"});
                table348.AddRow(new string[] {
                            "Owner\'s Address",
                            "2112 S Spring St"});
                table348.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table348.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "62704"});
                table348.AddRow(new string[] {
                            "Owner\'s City",
                            "Springfield"});
                table348.AddRow(new string[] {
                            "Owner\'s State",
                            "IL"});
#line 240
 testRunner.And("user enters contact information:", ((string)(null)), table348, "And ");
#line hidden
#line 255
 testRunner.Then("user verifies the appearance of the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
 testRunner.Then("user clicks continue from the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 257
 testRunner.Then("user verifies the appearance of the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table349.AddRow(new string[] {
                            "Yearly",
                            "No"});
                table349.AddRow(new string[] {
                            "Policy Coverages",
                            "$750,000 Combined Single Limit"});
                table349.AddRow(new string[] {
                            "Vehicle 1 Coverage",
                            "$1000 Comprehensive Deductible / $1000 Collision Deductible"});
                table349.AddRow(new string[] {
                            "Uninsured/Underinsured Motorist",
                            "Yes"});
                table349.AddRow(new string[] {
                            "Medical Payments",
                            "$500"});
                table349.AddRow(new string[] {
                            "Cargo Liability",
                            "$100,000 Limit / $1,000 Deductible"});
                table349.AddRow(new string[] {
                            "Rental Reimbursement",
                            "$30 per day/30 days/$900 total"});
                table349.AddRow(new string[] {
                            "Trailer Interchange",
                            "$50,000 Limit / $1,000 Deductible"});
#line 258
 testRunner.And("user completes their Quote", ((string)(null)), table349, "And ");
#line hidden
                TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                            "Coverages Not Selected"});
#line 268
 testRunner.Then("user verifies the coverage details", ((string)(null)), table350, "Then ");
#line hidden
#line 270
 testRunner.Then("user clicks Get Plan from coverage details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
 testRunner.Then("user verifies the appearance of the Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "OLF",
                            "Who Holds Vehicle"});
                table351.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "Owned",
                            "The Business"});
#line 272
 testRunner.And("user fills out the Additional Information page:", ((string)(null)), table351, "And ");
#line hidden
#line 275
 testRunner.Then("user clicks continue from Additional Information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                            "Payment Plan",
                            "Card Type",
                            "Autopay"});
                table352.AddRow(new string[] {
                            "12 Monthly",
                            "Visa",
                            "Optional Choose On"});
#line 276
 testRunner.Then("user goes to purchase a plan using the following information:", ((string)(null)), table352, "Then ");
#line hidden
#line 279
 testRunner.Then("user clicks purchase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
 testRunner.Then("user verifies the Thank You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 281
 testRunner.And("user verifies the WC section on the Thank You page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
