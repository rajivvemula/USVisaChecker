// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.CommAuto.Issued.ConstructionSpecialtyTradeContractors_Issued
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_FenceContractor_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_FenceContractor_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Issued/ConstructionSpecialtyTradeContractors_Issued", "CA_FenceContractor_I", @"Issuing a CA policy for a not For-hire trucking industry keyword in accordance with new DMV rules for California. 
In this scenario the question ""Do you have or plan on applying for an operating authority from the California Department of Motor Vehicles?"" 
should appear on Your operations page for a vehicle with gross weight higher than 10,000 lbs", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_FenceContractor_I")))
            {
                global::ApolloQAAutomation.Features.CommAuto.Issued.ConstructionSpecialtyTradeContractors_Issued.CA_FenceContractor_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA policy for a Fence Contractor issued in California according to new DMV rules")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_FenceContractor_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Cali")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Construction")]
        public void CAPolicyForAFenceContractorIssuedInCaliforniaAccordingToNewDMVRules()
        {
            string[] tagsOfScenario = new string[] {
                    "Issued",
                    "Regression",
                    "Cali",
                    "CA",
                    "Construction"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA policy for a Fence Contractor issued in California according to new DMV rules", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table159.AddRow(new string[] {
                            "Fence Contractor",
                            "3",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "90012",
                            "CA"});
#line 9
 testRunner.Given("user starts a quote with:", ((string)(null)), table159, "Given ");
#line hidden
#line 12
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table160.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 13
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table160, "Then ");
#line hidden
#line 16
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table161.AddRow(new string[] {
                            "2020",
                            "Corporation",
                            "100 S Main St",
                            "",
                            "Los Angeles",
                            ""});
#line 18
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table161, "And ");
#line hidden
#line 21
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "No VIN",
                            "Type Insure",
                            "Year",
                            "Make",
                            "Model",
                            "Parking Address",
                            "Gross Weight",
                            "Vehicle Worth",
                            "Plowing Snow"});
                table162.AddRow(new string[] {
                            "WBAVD33536KV61628",
                            "Cargo Van",
                            "2020",
                            "RAM",
                            "1500",
                            "California",
                            "10001-15000 lbs",
                            "25000",
                            "No"});
#line 23
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table162, "And ");
#line hidden
#line 26
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table163.AddRow(new string[] {
                            "Mickey",
                            "Mouse",
                            "CA",
                            "03/13/1985",
                            "",
                            "",
                            "",
                            "",
                            "No",
                            "c0123456"});
#line 28
 testRunner.And("user creates a driver with these values:", ((string)(null)), table163, "And ");
#line hidden
#line 31
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table164.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table164.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the California De" +
                                "partment of Motor Vehicles?",
                            "No"});
                table164.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
#line 32
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table164, "Then ");
#line hidden
#line 37
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table165.AddRow(new string[] {
                            "First Name",
                            "OneF"});
                table165.AddRow(new string[] {
                            "Last Name",
                            "OneL"});
                table165.AddRow(new string[] {
                            "Business Email",
                            "test@this.com"});
                table165.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table165.AddRow(new string[] {
                            "Business Website",
                            ""});
                table165.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table165.AddRow(new string[] {
                            "Owner\'s First Name",
                            "OwnerF"});
                table165.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "OwnerL"});
                table165.AddRow(new string[] {
                            "Owner\'s Address",
                            "123 S Main St"});
                table165.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table165.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "90012"});
                table165.AddRow(new string[] {
                            "Owner\'s City",
                            "Los Angeles"});
                table165.AddRow(new string[] {
                            "Owner\'s State",
                            "California"});
                table165.AddRow(new string[] {
                            "Select an Address",
                            "Suggested"});
#line 39
 testRunner.And("user enters contact information:", ((string)(null)), table165, "And ");
#line hidden
#line 55
 testRunner.Then("user verifies the appearance of the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.Then("user clicks continue from the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.Then("user verifies the appearance of the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table166.AddRow(new string[] {
                            "Yearly",
                            "No"});
                table166.AddRow(new string[] {
                            "Policy Coverages",
                            "$300,000 Combined Single Limit"});
                table166.AddRow(new string[] {
                            "Vehicle 1 Coverage",
                            "$1000 Comprehensive Deductible / $1000 Collision Deductible"});
#line 58
 testRunner.And("user completes their Quote", ((string)(null)), table166, "And ");
#line hidden
#line 63
 testRunner.Then("user clicks continue from the Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Then("user verifies the appearance of the Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "OLF",
                            "Who Holds Vehicle"});
                table167.AddRow(new string[] {
                            "WBAVD33536KV61628",
                            "Owned",
                            "The Business"});
#line 65
 testRunner.And("user fills out the Additional Information page:", ((string)(null)), table167, "And ");
#line hidden
#line 68
 testRunner.Then("user clicks continue from Additional Information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                            "Payment Plan",
                            "Card Type"});
                table168.AddRow(new string[] {
                            "12 Monthly",
                            "Visa"});
#line 69
 testRunner.Then("user goes to purchase a plan using the following information:", ((string)(null)), table168, "Then ");
#line hidden
#line 72
 testRunner.Then("user clicks purchase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.Then("user verifies the Thank You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.And("user verifies the WC section on the Thank You page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
