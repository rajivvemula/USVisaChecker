// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.CommAuto.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_OperationsPage_HelpErrorTextsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_OperationsPage_HelpErrorTexts.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Unit", "CA_OperationsPage_HelpErrorTexts", "Verifying Help and Error Texts using diffrent keyword and states", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_OperationsPage_HelpErrorTexts")))
            {
                global::BiBerkLOB.Features.CommAuto.Unit.CA_OperationsPage_HelpErrorTextsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_OperationsPage_HelpErrorTexts for Hot Shot Trucking in CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_OperationsPage_HelpErrorTexts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CA_OperationsPage_HelpErrorTextsForHotShotTruckingInCA()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_OperationsPage_HelpErrorTexts for Hot Shot Trucking in CA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table542 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table542.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "3",
                            "I Work at a Job Site",
                            "Vehicles",
                            "95204",
                            "CA"});
#line 7
 testRunner.Given("user starts a quote with:", ((string)(null)), table542, "Given ");
#line hidden
#line 10
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table543 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table543.AddRow(new string[] {
                            "TEST CA QUOTE",
                            "TEST CA DBA",
                            ""});
#line 11
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table543, "Then ");
#line hidden
#line 17
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table544 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table544.AddRow(new string[] {
                            "2000",
                            "Corporation",
                            "1687 N California St",
                            "",
                            "Stockton",
                            "Original"});
#line 18
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table544, "And ");
#line hidden
#line 21
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table545 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table545.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "California",
                            "3000"});
#line 22
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table545, "And ");
#line hidden
#line 25
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table546 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "Accident",
                            "DLNumber"});
                table546.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "CA",
                            "08/08/1988",
                            "Yes 3 or more years",
                            "No",
                            "E9758462"});
#line 27
 testRunner.And("user creates a driver with these values:", ((string)(null)), table546, "And ");
#line hidden
#line 30
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table547 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Alias",
                            "Type"});
                table547.AddRow(new string[] {
                            "HaulIntermodal",
                            "Error"});
                table547.AddRow(new string[] {
                            "TrailerInterchangeAgreements",
                            "Error"});
                table547.AddRow(new string[] {
                            "VehicleRadius",
                            "Error"});
                table547.AddRow(new string[] {
                            "FineArt",
                            "Error"});
                table547.AddRow(new string[] {
                            "ResidentialMoving",
                            "Error"});
                table547.AddRow(new string[] {
                            "TeamDriving",
                            "Error"});
                table547.AddRow(new string[] {
                            "TravelToMexico",
                            "Error"});
                table547.AddRow(new string[] {
                            "ClaimCount",
                            "Error"});
                table547.AddRow(new string[] {
                            "Chains",
                            "Error"});
                table547.AddRow(new string[] {
                            "Biohazard",
                            "Error"});
                table547.AddRow(new string[] {
                            "BorrowVehicles",
                            "Error"});
                table547.AddRow(new string[] {
                            "USDOT",
                            "Error"});
                table547.AddRow(new string[] {
                            "CaliOperatingAuth",
                            "Error"});
                table547.AddRow(new string[] {
                            "TrailerInterchangeAgreements",
                            "Help"});
                table547.AddRow(new string[] {
                            "VehicleRadius",
                            "Help"});
                table547.AddRow(new string[] {
                            "FineArt",
                            "Help"});
                table547.AddRow(new string[] {
                            "ResidentialMoving",
                            "Help"});
                table547.AddRow(new string[] {
                            "Biohazard",
                            "Help"});
                table547.AddRow(new string[] {
                            "BorrowVehicles",
                            "Help"});
                table547.AddRow(new string[] {
                            "USDOT",
                            "Help"});
#line 31
 testRunner.Then("user verifies each help and error element on the CA Operations page for the follo" +
                        "wing questions:", ((string)(null)), table547, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_OperationsPage_HelpErrorTexts for Towing Services in SC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_OperationsPage_HelpErrorTexts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CA_OperationsPage_HelpErrorTextsForTowingServicesInSC()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_OperationsPage_HelpErrorTexts for Towing Services in SC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table548.AddRow(new string[] {
                            "Towing Services",
                            "3",
                            "I Work at a Job Site",
                            "Vehicles",
                            "29209",
                            "CA"});
#line 56
 testRunner.Given("user starts a quote with:", ((string)(null)), table548, "Given ");
#line hidden
#line 59
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table549.AddRow(new string[] {
                            "TEST CA QUOTE",
                            "TEST CA DBA",
                            ""});
#line 60
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table549, "Then ");
#line hidden
#line 66
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table550.AddRow(new string[] {
                            "2000",
                            "Corporation",
                            "7501 Garners Ferry Rd",
                            "",
                            "Columbia",
                            "Original"});
#line 67
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table550, "And ");
#line hidden
#line 70
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth",
                            "Plowing Snow"});
                table551.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "South Carolina",
                            "5000",
                            "Yes"});
#line 71
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table551, "And ");
#line hidden
#line 74
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "Accident",
                            "DLNumber"});
                table552.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "CA",
                            "08/08/1988",
                            "Yes 3 or more years",
                            "No",
                            "E9758462"});
#line 76
 testRunner.And("user creates a driver with these values:", ((string)(null)), table552, "And ");
#line hidden
#line 79
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Alias",
                            "Type"});
                table553.AddRow(new string[] {
                            "OnCall",
                            "Error"});
                table553.AddRow(new string[] {
                            "Salvage",
                            "Error"});
                table553.AddRow(new string[] {
                            "SC-Authority",
                            "Error"});
                table553.AddRow(new string[] {
                            "SC-Authority",
                            "Help"});
#line 80
 testRunner.Then("user verifies each help and error element on the CA Operations page for the follo" +
                        "wing questions:", ((string)(null)), table553, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_OperationsPage_HelpErrorTexts for Uber Driver in IL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_OperationsPage_HelpErrorTexts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CA_OperationsPage_HelpErrorTextsForUberDriverInIL()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_OperationsPage_HelpErrorTexts for Uber Driver in IL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table554.AddRow(new string[] {
                            "Uber Driver",
                            "3",
                            "I Work at a Job Site",
                            "Vehicles",
                            "60629",
                            "CA"});
#line 89
 testRunner.Given("user starts a quote with:", ((string)(null)), table554, "Given ");
#line hidden
#line 92
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table555.AddRow(new string[] {
                            "TEST CA QUOTE",
                            "TEST CA DBA",
                            ""});
#line 93
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table555, "Then ");
#line hidden
#line 99
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table556.AddRow(new string[] {
                            "2000",
                            "Corporation",
                            "515 W Jefferson Blvd",
                            "",
                            "Fort Wayne",
                            "Original"});
#line 100
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table556, "And ");
#line hidden
#line 103
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth",
                            "Fare Box"});
                table557.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "Illinois",
                            "3000",
                            "No"});
#line 104
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table557, "And ");
#line hidden
#line 107
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "Accident",
                            "DLNumber"});
                table558.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "CA",
                            "08/08/1988",
                            "No",
                            "E9758462"});
#line 109
 testRunner.And("user creates a driver with these values:", ((string)(null)), table558, "And ");
#line hidden
#line 112
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Alias",
                            "Type"});
                table559.AddRow(new string[] {
                            "PartyBus",
                            "Error"});
                table559.AddRow(new string[] {
                            "DayCare",
                            "Error"});
#line 113
 testRunner.Then("user verifies each help and error element on the CA Operations page for the follo" +
                        "wing questions:", ((string)(null)), table559, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_OperationsPage_HelpErrorTexts for Limo Driver in CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_OperationsPage_HelpErrorTexts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CA_OperationsPage_HelpErrorTextsForLimoDriverInCA()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_OperationsPage_HelpErrorTexts for Limo Driver in CA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table560.AddRow(new string[] {
                            "Limo Driver",
                            "3",
                            "I Work at a Job Site",
                            "Vehicles",
                            "93644",
                            "CA"});
#line 120
 testRunner.Given("user starts a quote with:", ((string)(null)), table560, "Given ");
#line hidden
#line 123
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table561.AddRow(new string[] {
                            "TEST CA QUOTE",
                            "TEST CA DBA",
                            ""});
#line 124
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table561, "Then ");
#line hidden
#line 130
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table562.AddRow(new string[] {
                            "2000",
                            "Corporation",
                            "40112 Highway 41",
                            "",
                            "Oakhurst",
                            "Original"});
#line 131
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table562, "And ");
#line hidden
#line 134
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Type Insure",
                            "Parking Address",
                            "Vehicle Worth"});
                table563.AddRow(new string[] {
                            "2L1MJ5LK0FBL00196",
                            "SUV",
                            "California",
                            "8000"});
#line 135
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table563, "And ");
#line hidden
#line 138
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "Accident",
                            "DLNumber"});
                table564.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "CA",
                            "08/08/1988",
                            "No",
                            "E9758462"});
#line 140
 testRunner.And("user creates a driver with these values:", ((string)(null)), table564, "And ");
#line hidden
#line 143
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Alias",
                            "Type"});
                table565.AddRow(new string[] {
                            "ServiceAccess",
                            "Error"});
                table565.AddRow(new string[] {
                            "PUC",
                            "Error"});
#line 144
 testRunner.Then("user verifies each help and error element on the CA Operations page for the follo" +
                        "wing questions:", ((string)(null)), table565, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_OperationsPage_HelpErrorTexts for Art Therapist in IL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_OperationsPage_HelpErrorTexts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CA_OperationsPage_HelpErrorTextsForArtTherapistInIL()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_OperationsPage_HelpErrorTexts for Art Therapist in IL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table566.AddRow(new string[] {
                            "Art Therapist",
                            "3",
                            "I Work at a Job Site",
                            "Vehicles",
                            "60629",
                            "CA"});
#line 151
 testRunner.Given("user starts a quote with:", ((string)(null)), table566, "Given ");
#line hidden
#line 154
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table567.AddRow(new string[] {
                            "TEST CA QUOTE",
                            "TEST CA DBA",
                            ""});
#line 155
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table567, "Then ");
#line hidden
#line 161
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table568.AddRow(new string[] {
                            "2000",
                            "Corporation",
                            "40112 Highway 41",
                            "",
                            "Chicago",
                            "Original"});
#line 162
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table568, "And ");
#line hidden
#line 165
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Client Locations",
                            "Vehicle Worth"});
                table569.AddRow(new string[] {
                            "1D4GP24E17B260680",
                            "Illinois",
                            "Yes",
                            "1200"});
#line 166
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table569, "And ");
#line hidden
#line 169
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "Accident",
                            "DLNumber"});
                table570.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "CA",
                            "08/08/1988",
                            "No",
                            "E9758462"});
#line 171
 testRunner.And("user creates a driver with these values:", ((string)(null)), table570, "And ");
#line hidden
#line 174
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Alias",
                            "Type"});
                table571.AddRow(new string[] {
                            "EmergencyResponse",
                            "Error"});
#line 175
 testRunner.Then("user verifies each help and error element on the CA Operations page for the follo" +
                        "wing questions:", ((string)(null)), table571, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_OperationsPage_HelpErrorTexts for Hot Shot Trucking in GA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_OperationsPage_HelpErrorTexts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CA_OperationsPage_HelpErrorTextsForHotShotTruckingInGA()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_OperationsPage_HelpErrorTexts for Hot Shot Trucking in GA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table572.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "3",
                            "I Work at a Job Site",
                            "Vehicles",
                            "31093",
                            "CA"});
#line 181
 testRunner.Given("user starts a quote with:", ((string)(null)), table572, "Given ");
#line hidden
#line 184
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table573.AddRow(new string[] {
                            "TEST CA QUOTE",
                            "TEST CA DBA",
                            ""});
#line 185
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table573, "Then ");
#line hidden
#line 191
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table574.AddRow(new string[] {
                            "2000",
                            "Corporation",
                            "1879 Watson Blvd",
                            "",
                            "Warner Robins",
                            "Original"});
#line 192
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table574, "And ");
#line hidden
#line 195
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table575.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "Georgia",
                            "3000"});
#line 196
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table575, "And ");
#line hidden
#line 199
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 200
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "Accident",
                            "DLNumber"});
                table576.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "CA",
                            "08/08/1988",
                            "Yes 3 or more years",
                            "No",
                            "E9758462"});
#line 201
 testRunner.And("user creates a driver with these values:", ((string)(null)), table576, "And ");
#line hidden
#line 204
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table577.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "Yes"});
                table577.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Federal Motor" +
                                " Carrier Safety Administration (FMCSA)?",
                            "No"});
#line 205
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table577, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Alias",
                            "Type"});
                table578.AddRow(new string[] {
                            "GA-Authority",
                            "Error"});
#line 209
 testRunner.Then("user verifies each help and error element on the CA Operations page for the follo" +
                        "wing questions:", ((string)(null)), table578, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_OperationsPage_HelpErrorTexts for Roadside Assistance in TX")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_OperationsPage_HelpErrorTexts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        public void CA_OperationsPage_HelpErrorTextsForRoadsideAssistanceInTX()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "CA",
                    "Transportation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_OperationsPage_HelpErrorTexts for Roadside Assistance in TX", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table579.AddRow(new string[] {
                            "Roadside Assistance",
                            "3",
                            "I Work at a Job Site",
                            "Vehicles",
                            "75662",
                            "CA"});
#line 215
 testRunner.Given("user starts a quote with:", ((string)(null)), table579, "Given ");
#line hidden
#line 218
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table580 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table580.AddRow(new string[] {
                            "TEST CA QUOTE",
                            "TEST CA DBA",
                            ""});
#line 219
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table580, "Then ");
#line hidden
#line 225
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table581 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table581.AddRow(new string[] {
                            "2000",
                            "Corporation",
                            "906 US Highway 259 N",
                            "",
                            "Kilgore",
                            "Original"});
#line 226
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table581, "And ");
#line hidden
#line 229
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table582 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth",
                            "Plowing Snow"});
                table582.AddRow(new string[] {
                            "1FUBA5CG83LL10209",
                            "Texas",
                            "9000",
                            "Yes"});
#line 230
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table582, "And ");
#line hidden
#line 233
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 234
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "Accident",
                            "DLNumber"});
                table583.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "TX",
                            "08/08/1988",
                            "Yes 3 or more years",
                            "No",
                            "12345678"});
#line 235
 testRunner.And("user creates a driver with these values:", ((string)(null)), table583, "And ");
#line hidden
#line 238
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Alias",
                            "Type"});
                table584.AddRow(new string[] {
                            "TXAuth",
                            "Error"});
#line 239
 testRunner.Then("user verifies each help and error element on the CA Operations page for the follo" +
                        "wing questions:", ((string)(null)), table584, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
