// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.CommAuto.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_VerifyModalAfterClosingAlertFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_VerifyModalAfterClosingAlert.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Comm Auto/Unit", "CA_VerifyModalAfterClosingAlert", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_VerifyModalAfterClosingAlert")))
            {
                global::BiBerkLOB.Features.CommAuto.Unit.CA_VerifyModalAfterClosingAlertFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify Modal After Closing A Browser Alert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_VerifyModalAfterClosingAlert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HotShotTrucking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("IN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Transportation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA_VerifyModalAfterClosingAlert")]
        public void VerifyModalAfterClosingABrowserAlert()
        {
            string[] tagsOfScenario = new string[] {
                    "HotShotTrucking",
                    "Issued",
                    "Unit",
                    "IN",
                    "CA",
                    "Transportation",
                    "CA_VerifyModalAfterClosingAlert"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Modal After Closing A Browser Alert", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table709 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table709.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "46802",
                            "CA"});
#line 5
 testRunner.Given("user starts a quote with:", ((string)(null)), table709, "Given ");
#line hidden
#line 8
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.Then("user fills in the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.Then("user verifies that the save for later modal appears after attempting to navigate " +
                        "away", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table710 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table710.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "515 W Jefferson Blvd",
                            "",
                            "Fort Wayne",
                            ""});
#line 12
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table710, "And ");
#line hidden
#line 15
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Then("user verifies that the save for later modal appears after attempting to navigate " +
                        "away", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table711 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table711.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "Indiana",
                            "2800"});
#line 17
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table711, "And ");
#line hidden
#line 20
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.Then("user verifies that the save for later modal appears after attempting to navigate " +
                        "away", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table712 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table712.AddRow(new string[] {
                            "Donald",
                            "Duck",
                            "IN",
                            "03/13/1986",
                            "Yes 3 or more years",
                            "",
                            "",
                            "",
                            "No",
                            ""});
#line 23
 testRunner.And("user creates a driver with these values:", ((string)(null)), table712, "And ");
#line hidden
#line 26
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("user verifies that the save for later modal appears after attempting to navigate " +
                        "away", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table713 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table713.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table713.AddRow(new string[] {
                            "Do you have any active Trailer Interchange Agreements?",
                            "No"});
                table713.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "51 to 100 miles"});
                table713.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table713.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table713.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table713.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table713.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table713.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table713.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            ""});
                table713.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table713.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table713.AddRow(new string[] {
                            "Do you rent, hire, or borrow any vehicles?",
                            "No"});
                table713.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table713.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "Yes"});
                table713.AddRow(new string[] {
                            "Enter the USDOT number",
                            "3523331"});
                table713.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Federal Motor" +
                                " Carrier Safety Administration (FMCSA)?",
                            "Yes"});
                table713.AddRow(new string[] {
                            "Which types of authority from FMCSA do you have or plan on having?",
                            "Common Carrier"});
                table713.AddRow(new string[] {
                            "Do you travel into Ohio?",
                            "Yes"});
                table713.AddRow(new string[] {
                            "Does your business require an Ohio OS-32 Special Permit filed?",
                            "No"});
                table713.AddRow(new string[] {
                            "Do the owner(s) of this business have a combined majority ownership in any other " +
                                "transportation business?",
                            "No"});
#line 28
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table713, "Then ");
#line hidden
#line 51
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.Then("user verifies that the save for later modal appears after attempting to navigate " +
                        "away", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table714 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table714.AddRow(new string[] {
                            "First Name",
                            "Ariana"});
                table714.AddRow(new string[] {
                            "Last Name",
                            "Grande"});
                table714.AddRow(new string[] {
                            "Business Email",
                            "a@b.co"});
                table714.AddRow(new string[] {
                            "Business Phone",
                            "(555) 867-5309"});
                table714.AddRow(new string[] {
                            "Business Website",
                            ""});
                table714.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table714.AddRow(new string[] {
                            "Owner\'s First Name",
                            "Larry"});
                table714.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "Barry"});
                table714.AddRow(new string[] {
                            "Owner\'s Address",
                            "2112 S Spring St"});
                table714.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table714.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "62704"});
                table714.AddRow(new string[] {
                            "Owner\'s City",
                            "Springfield"});
                table714.AddRow(new string[] {
                            "Owner\'s State",
                            ""});
#line 54
 testRunner.And("user enters contact information:", ((string)(null)), table714, "And ");
#line hidden
#line 69
 testRunner.Then("user verifies the appearance of the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.Then("user verifies that the save for later modal appears after attempting to navigate " +
                        "away", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
