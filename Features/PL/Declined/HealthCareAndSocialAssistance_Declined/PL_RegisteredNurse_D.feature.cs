// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.PL.Declined.HealthCareAndSocialAssistance_Declined
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PL_RegisteredNurse_DFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PL_RegisteredNurse_D.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/PL/Declined/HealthCareAndSocialAssistance_Declined", "PL_RegisteredNurse_D", "Declined a PL Policy with the Registered Nurse keyword and verified Your Services" +
                    " new Class Level Questions.\r\nQuestion: Is all general anesthesia or deep sedatio" +
                    "n work done in a hospital or accredited facility?", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PL_RegisteredNurse_D")))
            {
                global::ApolloQAAutomation.Features.PL.Declined.HealthCareAndSocialAssistance_Declined.PL_RegisteredNurse_DFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("PL Registered Nurse gets Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PL_RegisteredNurse_D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HealthCare")]
        public void PLRegisteredNurseGetsDeclined()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression",
                    "PL",
                    "HealthCare"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PL Registered Nurse gets Declined", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table864 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table864.AddRow(new string[] {
                            "Registered Nurse",
                            "2",
                            "I Lease a Space From Others",
                            "",
                            "58011",
                            "PL"});
#line 8
 testRunner.Given("user starts a quote with:", ((string)(null)), table864, "Given ");
#line hidden
#line 11
 testRunner.Then("user verifies the appearance of the PL A Quick Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table865 = new TechTalk.SpecFlow.Table(new string[] {
                            "Business Structure",
                            "Name of Business",
                            "Business Address",
                            "DBA"});
                table865.AddRow(new string[] {
                            "Corporation",
                            "Nurse",
                            "407 Main St",
                            "No"});
#line 12
 testRunner.Then("user fills out A Quick Introduction page with these values:", ((string)(null)), table865, "Then ");
#line hidden
#line 15
 testRunner.Then("user verifies the appearance of the PL Business Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table866 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table866.AddRow(new string[] {
                            "What year was your business started?",
                            "2010"});
                table866.AddRow(new string[] {
                            "How many healthcare professionals work for your business?",
                            "2"});
                table866.AddRow(new string[] {
                            "How many health students work for your business?",
                            "0"});
#line 16
 testRunner.Then("user fills out the PL Business Details page with these values:", ((string)(null)), table866, "Then ");
#line hidden
#line 21
 testRunner.Then("user verifies the appearance of the PL Coverage Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table867 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table867.AddRow(new string[] {
                            "When should your policy start?",
                            ""});
                table867.AddRow(new string[] {
                            "Do you currently have a Professional Liability (E&O) policy in effect?",
                            "Yes"});
                table867.AddRow(new string[] {
                            "Does your current policy have a retroactive date?",
                            "No"});
                table867.AddRow(new string[] {
                            "Which option best describes your current professional liability policy?",
                            "This was my first policy."});
                table867.AddRow(new string[] {
                            "How many Professional Liability (E&O) claims have you had in the past 3 years, if" +
                                " any?",
                            "0"});
#line 22
 testRunner.Then("user fills out the PL Coverage Details page with these values:", ((string)(null)), table867, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table868 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table868.AddRow(new string[] {
                            "Are any business owner(s) or staff an MD (Medical Doctor)?",
                            "No"});
                table868.AddRow(new string[] {
                            "Do you provide facial injection, fillers, or laser treatment services?",
                            "No"});
                table868.AddRow(new string[] {
                            "Do you assist with any surgeries?",
                            "No"});
                table868.AddRow(new string[] {
                            "Are any of the business owner(s) or staff Intensive Care Unit (ICU) specialists?",
                            "No"});
                table868.AddRow(new string[] {
                            "Do you assist with labor/delivery of babies?",
                            "No"});
                table868.AddRow(new string[] {
                            "Do you administer or assist with general anesthesia or deep sedation?",
                            "Yes"});
                table868.AddRow(new string[] {
                            "Is all general anesthesia or deep sedation work done in a hospital or accredited " +
                                "facility?",
                            "No"});
                table868.AddRow(new string[] {
                            "Do you practice any radiology or medical dosimetry?",
                            "No"});
                table868.AddRow(new string[] {
                            "Are you a nurse practitioner?",
                            "No"});
                table868.AddRow(new string[] {
                            "Are you a Physicians Assistant?",
                            "No"});
                table868.AddRow(new string[] {
                            "In the past 3 years, has any party threatened or made claims for damages or other" +
                                " legal remedies against you or against any business entity with which you or any" +
                                " other business owner have been associated as owner, principal, officer, or empl" +
                                "oyee?",
                            "No"});
#line 29
 testRunner.Then("user fills out the PL Your Services page", ((string)(null)), table868, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table869 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table869.AddRow(new string[] {
                            "First Name",
                            "Test"});
                table869.AddRow(new string[] {
                            "Last Name",
                            "EJ"});
                table869.AddRow(new string[] {
                            "Address",
                            "407 Main St"});
                table869.AddRow(new string[] {
                            "Apt/Suite",
                            "3"});
                table869.AddRow(new string[] {
                            "City",
                            "Buffalo"});
                table869.AddRow(new string[] {
                            "Use as Mailing Address",
                            "No"});
                table869.AddRow(new string[] {
                            "Mailing Address",
                            "407 Main St"});
                table869.AddRow(new string[] {
                            "Mailing Apt/Suite",
                            "3"});
                table869.AddRow(new string[] {
                            "Mailing ZIP",
                            "58011"});
                table869.AddRow(new string[] {
                            "Mailing City",
                            "Buffalo"});
                table869.AddRow(new string[] {
                            "Email",
                            "abc@bargain.com"});
                table869.AddRow(new string[] {
                            "Business Phone",
                            "3213212321"});
                table869.AddRow(new string[] {
                            "Ext",
                            "123"});
                table869.AddRow(new string[] {
                            "Website/Social",
                            "www.tester.com"});
#line 42
 testRunner.Then("user fills out About You page with these values:", ((string)(null)), table869, "Then ");
#line hidden
#line 58
 testRunner.Then("user verifies the PL decline page appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
