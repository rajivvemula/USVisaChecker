// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.SmokeTest
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BusinessLocationZipCodeCombosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "BusinessLocationZipCodeCombos.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/SmokeTest", "BusinessLocationZipCodeCombos", "Test Business Location/Zip Code Combinations", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "BusinessLocationZipCodeCombos")))
            {
                global::BiBerkLOB.Features.SmokeTest.BusinessLocationZipCodeCombosFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void _01_UserEntersBusinessInformationAndLandsOnUWPage(string keyword, string businessLocation, string zipCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Keyword", keyword);
            argumentsOfScenario.Add("Business Location", businessLocation);
            argumentsOfScenario.Add("ZipCode", zipCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01_User enters Business Information and lands on UW page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
   testRunner.Given("user lands biBerk Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table458 = new TechTalk.SpecFlow.Table(new string[] {
                            "Options"});
                table458.AddRow(new string[] {
                            "Top Quote CTA"});
                table458.AddRow(new string[] {
                            "Dark Blue Banner WC CTA"});
                table458.AddRow(new string[] {
                            "Explore Our Insurance Products WC"});
                table458.AddRow(new string[] {
                            "Get a Quote Today"});
                table458.AddRow(new string[] {
                            "Footer WCCTA"});
#line 8
     testRunner.And("user clicks on Top Quote CTA Home page WC option", ((string)(null)), table458, "And ");
#line hidden
#line 15
 testRunner.Then("user landed on What\'s your industry page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Then(string.Format("user enters {0} for the question What\'s your industry", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.Then("user landed on Do you have any employees page General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.Then("user clicks Yes for Do you have any employees and for How many employees do you h" +
                        "ave enters 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table459 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhereDoesYourBusinessOperatePage"});
                table459.AddRow(new string[] {
                            "I Run My Business Out of My Home"});
                table459.AddRow(new string[] {
                            "I Lease a Space From Others"});
                table459.AddRow(new string[] {
                            "I Work at a Job Site"});
                table459.AddRow(new string[] {
                            "I Run My Business From Property I Own"});
                table459.AddRow(new string[] {
                            "I Own a Property & Lease to Others"});
#line 19
 testRunner.Then(string.Format("user enters for Where does your business operate that {0}", businessLocation), ((string)(null)), table459, "Then ");
#line hidden
#line 26
 testRunner.Then(string.Format("user enters Where is your business located as {0}", zipCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("user landed Select a Product page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.Then("user clicks on Workers Compensation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.And("user landed Workers Comp Questions page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("user clears the cache of the webpage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01_User enters Business Information and lands on UW page: Cookie Shop: Retail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BusinessLocationZipCodeCombos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Cookie Shop: Retail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Keyword", "Cookie Shop: Retail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Business Location", "I Run My Business Out of My Home")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZipCode", "17601")]
        public void _01_UserEntersBusinessInformationAndLandsOnUWPage_CookieShopRetail()
        {
#line 6
this._01_UserEntersBusinessInformationAndLandsOnUWPage("Cookie Shop: Retail", "I Run My Business Out of My Home", "17601", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01_User enters Business Information and lands on UW page: Plumbing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BusinessLocationZipCodeCombos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Plumbing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Keyword", "Plumbing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Business Location", "I Lease a Space From Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZipCode", "32801")]
        public void _01_UserEntersBusinessInformationAndLandsOnUWPage_Plumbing()
        {
#line 6
this._01_UserEntersBusinessInformationAndLandsOnUWPage("Plumbing", "I Lease a Space From Others", "32801", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01_User enters Business Information and lands on UW page: Fire or Smoke Damage Re" +
            "storation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BusinessLocationZipCodeCombos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Fire or Smoke Damage Restoration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Keyword", "Fire or Smoke Damage Restoration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Business Location", "I Work at a Job Site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZipCode", "19106")]
        public void _01_UserEntersBusinessInformationAndLandsOnUWPage_FireOrSmokeDamageRestoration()
        {
#line 6
this._01_UserEntersBusinessInformationAndLandsOnUWPage("Fire or Smoke Damage Restoration", "I Work at a Job Site", "19106", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01_User enters Business Information and lands on UW page: Family Practice Physici" +
            "an")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BusinessLocationZipCodeCombos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Family Practice Physician")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Keyword", "Family Practice Physician")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Business Location", "I Run My Business From Property I Own")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZipCode", "27513")]
        public void _01_UserEntersBusinessInformationAndLandsOnUWPage_FamilyPracticePhysician()
        {
#line 6
this._01_UserEntersBusinessInformationAndLandsOnUWPage("Family Practice Physician", "I Run My Business From Property I Own", "27513", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01_User enters Business Information and lands on UW page: Language Teacher")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BusinessLocationZipCodeCombos")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Language Teacher")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Keyword", "Language Teacher")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Business Location", "I Own a Property & Lease to Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZipCode", "20001")]
        public void _01_UserEntersBusinessInformationAndLandsOnUWPage_LanguageTeacher()
        {
#line 6
this._01_UserEntersBusinessInformationAndLandsOnUWPage("Language Teacher", "I Own a Property & Lease to Others", "20001", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
