// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.WorkmansComp.Issued.RetailWholesaleStoresInclFoodStores_I
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WC_FlowerArrangementsHIUI_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "WC_FlowerArrangementsHIUI_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Workman\'s Comp/Issued/RetailWholesaleStoresInclFoodStores_I", "WC_FlowerArrangementsHIUI_I", @"Issued Policy for;
Keyword: Flower Arrangements
Employee option: Various employees - 2
ZIPCode: 96713
Employee Payroll: 300,000
Entity type: Corporation
Years in business: 5
Included owner officers: No
Excluded owner officer: 1
EL Limits: 100K/500K/100K
Payment Option: 25% Down + 6 Monthly Installments
Credit card: Master card
HI UI #	0675309", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WC_FlowerArrangementsHIUI_I")))
            {
                global::BiBerkLOB.Features.WorkmansComp.Issued.RetailWholesaleStoresInclFoodStores_I.WC_FlowerArrangementsHIUI_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("02_User performs UW Questions for Keyword: Flower Arrangements (HI UI) with Issue" +
            "d policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_FlowerArrangementsHIUI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _02_UserPerformsUWQuestionsForKeywordFlowerArrangementsHIUIWithIssuedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02_User performs UW Questions for Keyword: Flower Arrangements (HI UI) with Issue" +
                    "d policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1325 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1325.AddRow(new string[] {
                            "Flower Arrangements",
                            "2",
                            "I Run My Business From Property I Own",
                            "",
                            "96713",
                            "WC"});
#line 18
 testRunner.Given("user starts a quote with:", ((string)(null)), table1325, "Given ");
#line hidden
#line 21
    testRunner.Given("user selects When do you want your policy to start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1326 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenDidYouStartYourBusiness"});
                table1326.AddRow(new string[] {
                            "Brand new venture or Started earlier this year"});
                table1326.AddRow(new string[] {
                            "Started last year"});
                table1326.AddRow(new string[] {
                            "Started 2 years ago"});
                table1326.AddRow(new string[] {
                            "Started 3 years ago"});
                table1326.AddRow(new string[] {
                            "Started 4 years ago"});
                table1326.AddRow(new string[] {
                            "Started 5 years ago"});
                table1326.AddRow(new string[] {
                            "Started 6 years ago"});
                table1326.AddRow(new string[] {
                            "Started 7 years ago"});
                table1326.AddRow(new string[] {
                            "Started 8 years ago"});
                table1326.AddRow(new string[] {
                            "Started 9 years ago"});
                table1326.AddRow(new string[] {
                            "Been around a while, started 10 or more years ago"});
#line 22
 testRunner.And("user selects When did you start your business Started 5 years ago", ((string)(null)), table1326, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1327 = new TechTalk.SpecFlow.Table(new string[] {
                            "HowIsYourBusinessStructured"});
                table1327.AddRow(new string[] {
                            "Corporation"});
                table1327.AddRow(new string[] {
                            "Partnership"});
                table1327.AddRow(new string[] {
                            "Individual/Sole Proprietor"});
                table1327.AddRow(new string[] {
                            "Sub-Chapter Corp"});
                table1327.AddRow(new string[] {
                            "Limited Liability Co. (LLC)"});
#line 35
 testRunner.And("user selects How is your business structured Corporation", ((string)(null)), table1327, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1328 = new TechTalk.SpecFlow.Table(new string[] {
                            "CoverageForAnyOwnersOfficers"});
                table1328.AddRow(new string[] {
                            "No"});
                table1328.AddRow(new string[] {
                            "Yes - buy coverage for 1 owner/officer"});
                table1328.AddRow(new string[] {
                            "Yes - buy coverage for 2 owners/officers"});
                table1328.AddRow(new string[] {
                            "Yes - buy coverage for 3 owners/officers"});
                table1328.AddRow(new string[] {
                            "Yes - buy coverage for 4 owners/officers"});
                table1328.AddRow(new string[] {
                            "Yes - buy coverage for 5 or more owners/officers"});
#line 42
 testRunner.And("user selects Do you want to include coverage for any owners/officers No", ((string)(null)), table1328, "And ");
#line hidden
#line 50
 testRunner.And("user enters What is the total annual payroll for W-2 employees 300000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And("user clicks on No CTA for Do any employees only do general office work and do not" +
                        " work a cash register", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.And("user enters 10 for What percentage of your overall sales involve delivery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1329 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClaimsWereReported"});
                table1329.AddRow(new string[] {
                            "None"});
                table1329.AddRow(new string[] {
                            "1"});
                table1329.AddRow(new string[] {
                            "2"});
                table1329.AddRow(new string[] {
                            "3"});
                table1329.AddRow(new string[] {
                            "4"});
                table1329.AddRow(new string[] {
                            "5"});
                table1329.AddRow(new string[] {
                            "6 or more"});
#line 53
 testRunner.And("user clicks In the past 3 years how many Workers Compensation claims were reporte" +
                        "d None", ((string)(null)), table1329, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1330 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenWasLastPolicyInEffect",
                            "HasThereBeenAnyWorkersInjuries"});
                table1330.AddRow(new string[] {
                            "Never  no prior insurance",
                            "Yes there has been injuries or accidents"});
                table1330.AddRow(new string[] {
                            "Within the last 30 days",
                            "No to the best of my knowledge"});
                table1330.AddRow(new string[] {
                            "30 days to 6 months ago",
                            ""});
                table1330.AddRow(new string[] {
                            "More than 6 months ago",
                            ""});
#line 62
 testRunner.And(@"user clicks Yes for Do you currently have a Workers Compensation insurance policy in effect and user select option from the When was your last policy in effect dropdown and user select option optin for Has there been any worker injuries or accidents since the last policy was in effect General", ((string)(null)), table1330, "And ");
#line hidden
#line 68
 testRunner.And("user selects No and enters 0 for Do you use any volunteers or donated labor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And("user clicks No for Do you have multiple locations in more than one state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("user enters bussiness name, DBA, website, adress General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.And("user selects city from dropdown Hana", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
    testRunner.Then("user verifies city,state and zipcode General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.And("user enters Firstname, lastName, email and phone number General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("user clicks on Submit CTA General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03_User verifies quote details and perform related information for Keyword: Flowe" +
            "r Arrangements (HI UI) with Issued policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_FlowerArrangementsHIUI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _03_UserVerifiesQuoteDetailsAndPerformRelatedInformationForKeywordFlowerArrangementsHIUIWithIssuedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_User verifies quote details and perform related information for Keyword: Flowe" +
                    "r Arrangements (HI UI) with Issued policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
   testRunner.When("user landed quote details page then user verifies qoute number, down payment and " +
                        "TTL estimated cost General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
    testRunner.And("user cliks on Email CTA and user enters numbers of emails 1 email1 flowerloves@pa" +
                        "rtn.com and email2 (.*) and user remove second email and send propsal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.Then("user verifies coverage details and enters excluded Owner Officer Name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1331 = new TechTalk.SpecFlow.Table(new string[] {
                            "EachAccidentPolicyEachEmpLimit"});
                table1331.AddRow(new string[] {
                            "100,000/500,000/100,000"});
                table1331.AddRow(new string[] {
                            "1,000,000/1,000,000/1,000,000"});
#line 81
    testRunner.And("user selects Each Accident/Policy/Each Employee Limit from the dropdown  100,000/" +
                        "500,000/100,000", ((string)(null)), table1331, "And ");
#line hidden
#line 85
    testRunner.And("user clicks on Continue CTA General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("04_User performs payment for Keyword: Flower Arrangements (HI UI) with Issued pol" +
            "icy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_FlowerArrangementsHIUI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _04_UserPerformsPaymentForKeywordFlowerArrangementsHIUIWithIssuedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04_User performs payment for Keyword: Flower Arrangements (HI UI) with Issued pol" +
                    "icy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1332 = new TechTalk.SpecFlow.Table(new string[] {
                            "PaymentInfo"});
                table1332.AddRow(new string[] {
                            "Product"});
                table1332.AddRow(new string[] {
                            "Policy Term"});
                table1332.AddRow(new string[] {
                            "Starting Date"});
                table1332.AddRow(new string[] {
                            "Total Premium"});
                table1332.AddRow(new string[] {
                            "Payment option"});
#line 89
   testRunner.Given("user landed Payment Information then user verifies <\"PaymentInfo\"> General", ((string)(null)), table1332, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1333 = new TechTalk.SpecFlow.Table(new string[] {
                            "PaymentOption"});
                table1333.AddRow(new string[] {
                            "10% Down + 10 Monthly Installments"});
                table1333.AddRow(new string[] {
                            "15% Down + 9 Monthly Installments"});
                table1333.AddRow(new string[] {
                            "25% Down + 6 Monthly Installments"});
                table1333.AddRow(new string[] {
                            "40% Down + 2 Quarterly Installments"});
                table1333.AddRow(new string[] {
                            "65% Down + Balance in 6 Months"});
                table1333.AddRow(new string[] {
                            "One Pay Plan"});
#line 96
    testRunner.And("user selects payment option 25% Down + 6 Monthly Installments from the DD then us" +
                        "er verifies Due Now, Future Install amount and per installment fee General", ((string)(null)), table1333, "And ");
#line hidden
#line 104
    testRunner.Then("user enters name on card and credit card number for AmericanExpress and expiratio" +
                        "n with MM 08 and YY 25 General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
     testRunner.And("user enters verifies TAX ID type FEIN and user enters TAX ID Number 907245411", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
     testRunner.And("user verifies title State Unemployment Insurance (UI) Number and enters UI number" +
                        " 0675309", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
    testRunner.Then("user verifies contact infromation Fisrt Name, Last Name, Email address and Phone " +
                        "number General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
     testRunner.And("user clicks on checkbox for agree terms and condition and clicks on Purchase CTA " +
                        "General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("05_User submits feedback and verifies Thank You page details for Keyword: Flower " +
            "Arrangements (HI UI) with Issued policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_FlowerArrangementsHIUI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _05_UserSubmitsFeedbackAndVerifiesThankYouPageDetailsForKeywordFlowerArrangementsHIUIWithIssuedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05_User submits feedback and verifies Thank You page details for Keyword: Flower " +
                    "Arrangements (HI UI) with Issued policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
   testRunner.Given("user landed Thank you page and user performs feedback Star5 and submit the feedba" +
                        "ck and user clicks on Close CTA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
    testRunner.Then("user verifies Order Summary on the Thank you page based on selected Payment optio" +
                        "n (.*)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
