// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.WorkmansComp.Issued.RetailWholesaleStoresInclFoodStores_I
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WC_IssuedPolicyWithCOI_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "WC_IssuedPolicyWithCOI_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Workman\'s Comp/Issued/RetailWholesaleStoresInclFoodStores_I", "WC_IssuedPolicyWithCOI_I", @"Navigate UW page, Quote details page and payment page
Using reusable steps and create common steps for other test cases
Keyword: Bagel Shop: Retail
Yes I have Employee
Number of employee : 2
Business Operation: I Lease a Space From Others
Included Officer: 1
Business started year : Started 7 years ago
Business Structured: LLC
EechAccidentPolicyEachEmpLimit: 100,000/500,000/100,000  
Payment Option: 15% Down + 9 Monthly Installments
User get COI", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WC_IssuedPolicyWithCOI_I")))
            {
                global::BiBerkLOB.Features.WorkmansComp.Issued.RetailWholesaleStoresInclFoodStores_I.WC_IssuedPolicyWithCOI_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("02_Submit UW questions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_IssuedPolicyWithCOI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _02_SubmitUWQuestions()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02_Submit UW questions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1366 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1366.AddRow(new string[] {
                            "Bagel Shop: Retail",
                            "2",
                            "I Lease a Space From Others",
                            "",
                            "07050",
                            "WC"});
#line 17
 testRunner.Given("user starts a quote with:", ((string)(null)), table1366, "Given ");
#line hidden
#line 20
testRunner.Given("user selects Policy start date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1367 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenDidYouStartYourBusiness"});
                table1367.AddRow(new string[] {
                            "Brand new venture or Started earlier this year"});
                table1367.AddRow(new string[] {
                            "Started last year"});
                table1367.AddRow(new string[] {
                            "Started 2 years ago"});
                table1367.AddRow(new string[] {
                            "Started 3 years ago"});
                table1367.AddRow(new string[] {
                            "Started 4 years ago"});
                table1367.AddRow(new string[] {
                            "Started 5 years ago"});
                table1367.AddRow(new string[] {
                            "Started 6 years ago"});
                table1367.AddRow(new string[] {
                            "Started 7 years ago"});
                table1367.AddRow(new string[] {
                            "Started 8 years ago"});
                table1367.AddRow(new string[] {
                            "Started 9 years ago"});
                table1367.AddRow(new string[] {
                            "Been around a while, started 10 or more years ago"});
#line 21
testRunner.And("user selects When did you start your business Started 5 years ago", ((string)(null)), table1367, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1368 = new TechTalk.SpecFlow.Table(new string[] {
                            "HowIsYourBusinessStructured"});
                table1368.AddRow(new string[] {
                            "Corporation"});
                table1368.AddRow(new string[] {
                            "Partnership"});
                table1368.AddRow(new string[] {
                            "Individual/Sole Proprietor"});
                table1368.AddRow(new string[] {
                            "Sub-Chapter Corp"});
                table1368.AddRow(new string[] {
                            "Limited Liability Co. (LLC)"});
#line 34
testRunner.And("user selects How is your business structured Limited Liability Co. (LLC)", ((string)(null)), table1368, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1369 = new TechTalk.SpecFlow.Table(new string[] {
                            "Option"});
                table1369.AddRow(new string[] {
                            "1"});
                table1369.AddRow(new string[] {
                            "2"});
                table1369.AddRow(new string[] {
                            "3"});
                table1369.AddRow(new string[] {
                            "4"});
                table1369.AddRow(new string[] {
                            "5+"});
#line 41
testRunner.And("user select Yes option and enters a value 2 for the question Do you want to buy c" +
                        "overage for the business owners", ((string)(null)), table1369, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1370 = new TechTalk.SpecFlow.Table(new string[] {
                            "option"});
                table1370.AddRow(new string[] {
                            "No"});
                table1370.AddRow(new string[] {
                            "Yes - 1"});
                table1370.AddRow(new string[] {
                            "Yes - 2"});
                table1370.AddRow(new string[] {
                            "Yes - 3"});
                table1370.AddRow(new string[] {
                            "Yes - 4"});
                table1370.AddRow(new string[] {
                            "Yes - 5 or more"});
#line 48
testRunner.And("user select on Yes - 2 option for Do any owners/officers only do general office w" +
                        "ork and do not work a cash register", ((string)(null)), table1370, "And ");
#line hidden
#line 56
testRunner.And("user enters What is the total annual payroll for W-2 employees 300000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
testRunner.And("user selects Yes option for Do any employees only work at a retail store where no" +
                        " baking is done on premises", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
testRunner.And("user clicks on Yes CTA for Do any employees only do general office work and do no" +
                        "t work a cash register", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
testRunner.And("user enters 20 for What percentage of your overall sales involve delivery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1371 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClaimsWereReported"});
                table1371.AddRow(new string[] {
                            "None"});
                table1371.AddRow(new string[] {
                            "1"});
                table1371.AddRow(new string[] {
                            "2"});
                table1371.AddRow(new string[] {
                            "3"});
                table1371.AddRow(new string[] {
                            "4"});
                table1371.AddRow(new string[] {
                            "5"});
                table1371.AddRow(new string[] {
                            "6 or more"});
#line 60
testRunner.And("user clicks In the past 3 years how many Workers Compensation claims were reporte" +
                        "d None", ((string)(null)), table1371, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1372 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenWasLastPolicyInEffect",
                            "HasThereBeenAnyWorkersInjuries"});
                table1372.AddRow(new string[] {
                            "Never no prior insurance",
                            "Yes there has been injuries or accidents"});
                table1372.AddRow(new string[] {
                            "Within the last 30 days",
                            "No to the best of my knowledge"});
                table1372.AddRow(new string[] {
                            "30 days to 6 months ago",
                            ""});
                table1372.AddRow(new string[] {
                            "More than 6 months ago",
                            ""});
#line 71
testRunner.And(@"user clicks No for Do you currently have a Workers Compensation insurance policy in effect and user select Within the last 30 days from the When was your last policy in effect dropdown and user select option optin for Has there been any worker injuries or accidents since the last policy was in effect General", ((string)(null)), table1372, "And ");
#line hidden
#line 77
testRunner.And("user selects No and enters 0 for Do you use any volunteers or donated labor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
testRunner.And("user clicks No for Do you have multiple locations in more than one state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
testRunner.And("user enters bussiness name Vertical, DBA Turo, website www.vertical.com, address " +
                        "line1 120 Valley rd and address line2 Apt 34", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
testRunner.Then("user verifies city,state and zipcode General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
testRunner.And("user enters Firstname Kevin, lastName Kurt, email kevinvertical@gmail.com and pho" +
                        "ne number 8978659445", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
testRunner.And("user clicks on Submit CTA General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03_User verifies quote details and enters email General")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_IssuedPolicyWithCOI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _03_UserVerifiesQuoteDetailsAndEntersEmailGeneral()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_User verifies quote details and enters email General", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
testRunner.When("user landed quote details page then user verifies qoute number, down payment and " +
                        "TTL estimated cost General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
testRunner.And("user cliks on Email CTA and user enters numbers of emails 1 email1 kilamats@pool." +
                        "com and email2 (.*) and user remove second email and send propsal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
testRunner.Then("user verifies coverage details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
testRunner.Then("user enters number of 2 included owner/officers name1 Daren Times, name2 Kerry Ga" +
                        "brielle, name3 {name3}, name4 {name4} and name5 {name5}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1373 = new TechTalk.SpecFlow.Table(new string[] {
                            "EechAccidentPolicyEachEmpLimit"});
                table1373.AddRow(new string[] {
                            "100,000/500,000/100,000"});
                table1373.AddRow(new string[] {
                            "1,000,000/1,000,000/1,000,000"});
#line 91
testRunner.And("user selects Each Accident/Policy/Each Employee Limit from the dropdown 100,000/5" +
                        "00,000/100,000", ((string)(null)), table1373, "And ");
#line hidden
#line 95
testRunner.And("user clicks on Continue CTA General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("04_User performs payment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_IssuedPolicyWithCOI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _04_UserPerformsPayment()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04_User performs payment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1374 = new TechTalk.SpecFlow.Table(new string[] {
                            "PaymentInfo"});
                table1374.AddRow(new string[] {
                            "Product"});
                table1374.AddRow(new string[] {
                            "Policy Term"});
                table1374.AddRow(new string[] {
                            "Starting Date"});
                table1374.AddRow(new string[] {
                            "Total Premium"});
                table1374.AddRow(new string[] {
                            "Payment option"});
#line 99
testRunner.Given("user landed Payment Information then user verifies <\"PaymentInfo\"> General", ((string)(null)), table1374, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1375 = new TechTalk.SpecFlow.Table(new string[] {
                            "PaymentOption"});
                table1375.AddRow(new string[] {
                            "15% Down + 9 Monthly Installments"});
                table1375.AddRow(new string[] {
                            "One Pay Plan"});
#line 106
testRunner.And("user selects payment option 15% Down + 9 Monthly Installments from the DD then us" +
                        "er verifies Due Now, Future Install amount and per installment fee General", ((string)(null)), table1375, "And ");
#line hidden
#line 110
testRunner.Then("user enters name on card and credit card number for Visa and expiration with MM 1" +
                        "1 and YY 25 General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
testRunner.And("user enters verifies TAX ID type FEIN and user enters TAX ID Number 250125987", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
testRunner.Then("user verifies contact infromation Fisrt Name, Last Name, Email address and Phone " +
                        "number General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
testRunner.And("user clicks on checkbox for agree terms and condition and clicks on Purchase CTA " +
                        "General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("05_User submit feedback and navigate Thank you page")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_IssuedPolicyWithCOI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _05_UserSubmitFeedbackAndNavigateThankYouPage()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05_User submit feedback and navigate Thank you page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 117
testRunner.Given("user landed Thank you page and user performs feedback Star5 and submit the feedba" +
                        "ck and user clicks on Close CTA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 118
testRunner.Then("user verifies Order Summary on the Thank you page based on selected Payment optio" +
                        "n (.*)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("06_User get COI and performs Policy number and phone number")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_IssuedPolicyWithCOI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _06_UserGetCOIAndPerformsPolicyNumberAndPhoneNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06_User get COI and performs Policy number and phone number", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 122
testRunner.Given("user clicks on Get Certified of Insurance COI CTA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 123
 testRunner.Then("user landed Policy Number and Phone information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
  testRunner.And("user enters policy number and phone number 8978659445", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
  testRunner.And("user clicks on Continue CTA for COI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("07 User performs Policy Holder information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_IssuedPolicyWithCOI_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _07UserPerformsPolicyHolderInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07 User performs Policy Holder information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 129
testRunner.Given("user landed Certificate Holder Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
  testRunner.And("user enters contact name Kevin Kurt for COI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
  testRunner.And("user enters business address line1 120 Valley rd, address line2 Apt 34, ZIP Code " +
                        "07050 and verifies City and State", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
  testRunner.And("user enters email kevinvertical@gmail.com for COI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
  testRunner.And("user clicks on Get Certificate CTA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
  testRunner.Then("user verifies Your Certificate has Been Emailed to You is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
