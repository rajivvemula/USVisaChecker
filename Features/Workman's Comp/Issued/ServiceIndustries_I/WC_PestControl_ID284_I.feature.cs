// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.WorkmansComp.Issued.ServiceIndustries_I
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WC_PestControl_ID284_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "WC_PestControl_ID284_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Workman\'s Comp/Issued/ServiceIndustries_I", "WC_PestControl_ID284_I", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WC_PestControl_ID284_I")))
            {
                global::BiBerkLOB.Features.WorkmansComp.Issued.ServiceIndustries_I.WC_PestControl_ID284_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("02_User performs UW Questions for Keyword: Pest Control 284 with Issued policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_PestControl_ID284_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _02_UserPerformsUWQuestionsForKeywordPestControl284WithIssuedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02_User performs UW Questions for Keyword: Pest Control 284 with Issued policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1560 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1560.AddRow(new string[] {
                            "Pest Control",
                            "3",
                            "I Work at a Job Site",
                            "",
                            "06001",
                            "WC"});
#line 5
 testRunner.Given("user starts a quote with:", ((string)(null)), table1560, "Given ");
#line hidden
#line 8
   testRunner.Given("user selects When do you want your policy to start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1561 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenDidYouStartYourBusiness"});
                table1561.AddRow(new string[] {
                            "Brand new venture or Started earlier this year"});
                table1561.AddRow(new string[] {
                            "Started last year"});
                table1561.AddRow(new string[] {
                            "Started 2 years ago"});
                table1561.AddRow(new string[] {
                            "Started 3 years ago"});
                table1561.AddRow(new string[] {
                            "Started 4 years ago"});
                table1561.AddRow(new string[] {
                            "Started 5 years ago"});
                table1561.AddRow(new string[] {
                            "Started 6 years ago"});
                table1561.AddRow(new string[] {
                            "Started 7 years ago"});
                table1561.AddRow(new string[] {
                            "Started 8 years ago"});
                table1561.AddRow(new string[] {
                            "Started 9 years ago"});
                table1561.AddRow(new string[] {
                            "Been around a while, started 10 or more years ago"});
#line 9
 testRunner.And("user selects When did you start your business Started 8 years ago", ((string)(null)), table1561, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1562 = new TechTalk.SpecFlow.Table(new string[] {
                            "HowIsYourBusinessStructured"});
                table1562.AddRow(new string[] {
                            "Corporation"});
                table1562.AddRow(new string[] {
                            "Partnership"});
                table1562.AddRow(new string[] {
                            "Individual/Sole Proprietor"});
                table1562.AddRow(new string[] {
                            "Sub-Chapter Corp"});
                table1562.AddRow(new string[] {
                            "Limited Liability Co. (LLC)"});
#line 22
 testRunner.And("user selects How is your business structured Partnership", ((string)(null)), table1562, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1563 = new TechTalk.SpecFlow.Table(new string[] {
                            "CoverageForAnyOwnersOfficers"});
                table1563.AddRow(new string[] {
                            "Yes - buy coverage for 1 owner/officer"});
                table1563.AddRow(new string[] {
                            "Yes - buy coverage for 2 owners/officers"});
                table1563.AddRow(new string[] {
                            "Yes - buy coverage for 3 owners/officers"});
                table1563.AddRow(new string[] {
                            "Yes - buy coverage for 4 owners/officers"});
                table1563.AddRow(new string[] {
                            "Yes - buy coverage for 5 or more owners/officers"});
#line 29
 testRunner.And("user selects Do you want to include coverage for any owners/officers No", ((string)(null)), table1563, "And ");
#line hidden
#line 36
 testRunner.And("user enters What is the total annual payroll for W-2 employees 200000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("user states No for employees doing general office work question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("user enters their Tax id type Federal Employer Identification Number is 231742859" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("user clicks on Yes CTA for Do you have a pest control license", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1564 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClaimsWereReported"});
                table1564.AddRow(new string[] {
                            "None"});
                table1564.AddRow(new string[] {
                            "1"});
                table1564.AddRow(new string[] {
                            "2"});
                table1564.AddRow(new string[] {
                            "3"});
                table1564.AddRow(new string[] {
                            "4"});
                table1564.AddRow(new string[] {
                            "5"});
                table1564.AddRow(new string[] {
                            "6 or more"});
#line 40
 testRunner.And("user clicks In the past 3 years how many Workers Compensation claims were reporte" +
                        "d None", ((string)(null)), table1564, "And ");
#line hidden
#line 49
 testRunner.And("user answers No to working in excess of 5 feet under or 30 feet over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("user clicks on No CTA for Do you fumigate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1565 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenWasLastPolicyInEffect",
                            "HasThereBeenAnyWorkersInjuries"});
                table1565.AddRow(new string[] {
                            "Never  no prior insurance",
                            "Yes there has been injuries or accidents"});
                table1565.AddRow(new string[] {
                            "Within the last 30 days",
                            "No to the best of my knowledge"});
                table1565.AddRow(new string[] {
                            "30 days to 6 months ago",
                            ""});
                table1565.AddRow(new string[] {
                            "More than 6 months ago",
                            ""});
#line 51
    testRunner.And(@"user clicks Yes for Do you currently have a Workers Compensation insurance policy in effect and user select option from the When was your last policy in effect dropdown and user select option optin for Has there been any worker injuries or accidents since the last policy was in effect General", ((string)(null)), table1565, "And ");
#line hidden
#line 57
 testRunner.And("user selects No and enters 0 for Do you use any volunteers or donated labor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("user clicks No for Do you have multiple locations in more than one state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("user enters Business name Test Case 9, DBA Pest DBA and website www.pestsupply.co" +
                        "m", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("user enters their Business address line 1 is 441 Lovely St, and City is Avon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("user enters their Contact first name, Contact last name is Partner, Certification" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("user enters their Contact email TestCert@Plan.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("user enters their Contact phone 123-123-1321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("user submits WC questions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03_User verifies quote details and perform related information for Keyword: Pest " +
            "Control 284 with Issued policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_PestControl_ID284_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _03_UserVerifiesQuoteDetailsAndPerformRelatedInformationForKeywordPestControl284WithIssuedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_User verifies quote details and perform related information for Keyword: Pest " +
                    "Control 284 with Issued policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 68
 testRunner.Given("user views the quote details page they check the quote number, downpayment and to" +
                        "tal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
   testRunner.And("user enters Excluded owner/officer named Eric Cartman", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1566 = new TechTalk.SpecFlow.Table(new string[] {
                            "EachAccidentPolicyEachEmpLimit"});
                table1566.AddRow(new string[] {
                            "100,000/500,000/100,000"});
                table1566.AddRow(new string[] {
                            "1,000,000/1,000,000/1,000,000"});
#line 70
  testRunner.Then("user selects Each Accident/Policy/Each Employee Limit from the dropdown 100,000/5" +
                        "00,000/100,000", ((string)(null)), table1566, "Then ");
#line hidden
#line 74
  testRunner.And("user clicks on Continue CTA General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("04_User performs payment for Keyword: Pest Control 284 with Issued policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_PestControl_ID284_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _04_UserPerformsPaymentForKeywordPestControl284WithIssuedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04_User performs payment for Keyword: Pest Control 284 with Issued policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1567 = new TechTalk.SpecFlow.Table(new string[] {
                            "PaymentInfo"});
                table1567.AddRow(new string[] {
                            "Product"});
                table1567.AddRow(new string[] {
                            "Policy Term"});
                table1567.AddRow(new string[] {
                            "Starting Date"});
                table1567.AddRow(new string[] {
                            "Total Premium"});
                table1567.AddRow(new string[] {
                            "Payment option"});
#line 78
 testRunner.Given("user landed Payment Information then user verifies <\"PaymentInfo\"> General", ((string)(null)), table1567, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1568 = new TechTalk.SpecFlow.Table(new string[] {
                            "PaymentOption"});
                table1568.AddRow(new string[] {
                            "15% Down + 9 Monthly Installments"});
                table1568.AddRow(new string[] {
                            "25% Down + 6 Monthly Installments"});
                table1568.AddRow(new string[] {
                            "40% Down + 2 Quarterly Installments"});
                table1568.AddRow(new string[] {
                            "65% Down + Balance in 6 Months"});
                table1568.AddRow(new string[] {
                            "One Pay Plan"});
#line 85
 testRunner.And("user selects payment option 15% Down + 9 Monthly Installments from the DD then us" +
                        "er verifies Due Now, Future Install amount and per installment fee General", ((string)(null)), table1568, "And ");
#line hidden
#line 92
 testRunner.Then("user enters name on card and credit card number for Visa and expiration with MM 0" +
                        "8 and YY 25 General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
  testRunner.And("user verifies Business information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.Then("user verifies contact infromation Fisrt Name, Last Name, Email address and Phone " +
                        "number General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.And("user clicks on checkbox for agree terms and condition and clicks on Purchase CTA " +
                        "General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("05_User submits feedback and verifies Thank You page details for Keyword: Pest Co" +
            "ntrol 284 with Issued policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_PestControl_ID284_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _05_UserSubmitsFeedbackAndVerifiesThankYouPageDetailsForKeywordPestControl284WithIssuedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05_User submits feedback and verifies Thank You page details for Keyword: Pest Co" +
                    "ntrol 284 with Issued policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
 testRunner.Given("user landed Thank you page and user performs feedback Star2 and submit the feedba" +
                        "ck and user clicks on Close CTA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
  testRunner.Then("user verifies Order Summary on the Thank you page based on selected Payment optio" +
                        "n (.*)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
