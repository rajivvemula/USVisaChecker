// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.WorkmansComp.Issued.ConstructionSpecialtyTradeContractors_I
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WC_Mudjacking_IFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "WC_Mudjacking_I.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Workman\'s Comp/Issued/ConstructionSpecialtyTradeContractors_I", "WC_Mudjacking_I", "ZIP Code: 03053 (NH)\r\nAdditional Info page - Setting the Excluded OO Job and DOB," +
                    " Covered but Excluded OO appearance", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WC_Mudjacking_I")))
            {
                global::ApolloQAAutomation.Features.WorkmansComp.Issued.ConstructionSpecialtyTradeContractors_I.WC_Mudjacking_IFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC Mudjacking creates issued policy in New Hampshire")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_Mudjacking_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Construction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NH")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("YourServices")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OwnerOfficer")]
        public void WCMudjackingCreatesIssuedPolicyInNewHampshire()
        {
            string[] tagsOfScenario = new string[] {
                    "WC",
                    "Issued",
                    "Construction",
                    "NH",
                    "Regression",
                    "YourServices",
                    "OwnerOfficer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC Mudjacking creates issued policy in New Hampshire", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2034 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table2034.AddRow(new string[] {
                            "Mudjacking",
                            "8",
                            "I Lease a Space From Others",
                            "",
                            "03053",
                            "WC"});
#line 7
 testRunner.Given("user starts a quote with:", ((string)(null)), table2034, "Given ");
#line hidden
#line 10
 testRunner.Then("user verifies the appearance of the WC About You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2035 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table2035.AddRow(new string[] {
                            "When do you want your policy to start?",
                            ""});
                table2035.AddRow(new string[] {
                            "When did you start your business?",
                            "Started 9 years ago"});
                table2035.AddRow(new string[] {
                            "How is your business structured?",
                            "Corporation"});
                table2035.AddRow(new string[] {
                            "What is the total annual payroll for W-2 employees? (exclude business owners/offi" +
                                "cers)",
                            "440440"});
                table2035.AddRow(new string[] {
                            "Are there any employees that never travel to job sites or do any construction wor" +
                                "k?",
                            "no"});
                table2035.AddRow(new string[] {
                            "Do you use any subcontractors or pay any workers using IRS Form 1099?",
                            "yes"});
                table2035.AddRow(new string[] {
                            "Do you require all subcontractors/1099 workers to have certificates of insurance?" +
                                "",
                            "Yes they must have Workers\' Compensation insurance"});
                table2035.AddRow(new string[] {
                            "How much of total work is done by subcontractors/1099 workers?",
                            "1-25%"});
                table2035.AddRow(new string[] {
                            "Business",
                            "Mud Lifts Me Up;Mud Mountain"});
                table2035.AddRow(new string[] {
                            "Address",
                            "39 Nashua Rd;Londonderry"});
                table2035.AddRow(new string[] {
                            "Fill Contact",
                            ""});
#line 11
 testRunner.Then("user fills out the WC About You page with these values:", ((string)(null)), table2035, "Then ");
#line hidden
#line 24
 testRunner.Then("user verifies the appearance of the WC Owners and Officers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2036 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table2036.AddRow(new string[] {
                            "How many owners/officers does your business have?",
                            "5+"});
                table2036.AddRow(new string[] {
                            "How many owners/officers do you want to cover with this policy?",
                            "2"});
                table2036.AddRow(new string[] {
                            "How many owners/officers do you want to exclude from this policy?",
                            "3"});
                table2036.AddRow(new string[] {
                            "Are there any included owners/officers that never travel to job sites or do any c" +
                                "onstruction work?",
                            "No"});
#line 25
 testRunner.Then("user handles the WC OO kickoff questions with these values:", ((string)(null)), table2036, "Then ");
#line hidden
#line 31
 testRunner.Then("user continues on from the WC OO page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2037 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table2037.AddRow(new string[] {
                            "Do you build any load-bearing concrete walls?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Do you do any masonry work such as manual brick or stone laying?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Do you do residential foundation work?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Do you ever transport six or more workers in the same vehicle?",
                            "no"});
                table2037.AddRow(new string[] {
                            "In the past 3 years how many Workers\' Compensation claims were reported?",
                            "None"});
                table2037.AddRow(new string[] {
                            "Do you perform any work over 30 feet above ground level?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Do you perform any work underground including in trenches, holes, or tunnels?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Do you do any demolition or wrecking of entire buildings or homes?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Do the business owner(s) of this business have a combined majority ownership in a" +
                                "ny other construction business?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Do you currently have a Workers\' Compensation insurance policy in effect?",
                            "yes"});
                table2037.AddRow(new string[] {
                            "Do you do any construction work in New York?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Do you have multiple locations in more than one state?",
                            "no"});
                table2037.AddRow(new string[] {
                            "Federal Employer Identification Number (FEIN)",
                            "23-1111110"});
#line 32
 testRunner.Then("user fills out the WC Your Services page", ((string)(null)), table2037, "Then ");
#line hidden
#line 47
 testRunner.Then("user verifies the appearance of the WC Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.Then("user clicks continue from WC Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2038 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customization",
                            "Value"});
                table2038.AddRow(new string[] {
                            "ELL - Each Accident / Total Policy / Each Employee",
                            "100,000/500,000/100,000"});
#line 49
 testRunner.When("user selects a standard multi-bundle plan quote with the following customizations" +
                        " from the WC your quote page:", ((string)(null)), table2038, "When ");
#line hidden
#line 52
 testRunner.Then("user begins the WC AI page having the FEIN with value 23-1111110", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2039 = new TechTalk.SpecFlow.Table(new string[] {
                            "Set Name",
                            "Set Job",
                            "Set DOB"});
                table2039.AddRow(new string[] {
                            "Bret Farve",
                            "President",
                            "9/9/1991"});
                table2039.AddRow(new string[] {
                            "Randy Moss",
                            "Vice President",
                            "8/8/1988"});
                table2039.AddRow(new string[] {
                            "Adam Thielan",
                            "Treasurer",
                            "7/7/1977"});
                table2039.AddRow(new string[] {
                            "Justin Jefferson",
                            "Secretary",
                            "6/6/1966"});
                table2039.AddRow(new string[] {
                            "Harrison Smith",
                            "Member",
                            "5/5/1955"});
#line 53
 testRunner.Then("wc user handles 5 excluded oo with these values:", ((string)(null)), table2039, "Then ");
#line hidden
#line 60
 testRunner.Then("user continues on from the WC Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2040 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2040.AddRow(new string[] {
                            "Payment Option",
                            "15% Down + 10 Monthly Installments"});
                table2040.AddRow(new string[] {
                            "CC Name",
                            "Funky Chicken-cheese"});
                table2040.AddRow(new string[] {
                            "CC Number",
                            "4111111111111111"});
                table2040.AddRow(new string[] {
                            "CC Expiration Month",
                            "11"});
                table2040.AddRow(new string[] {
                            "CC Expiration Year",
                            "25"});
                table2040.AddRow(new string[] {
                            "Autopay",
                            "No"});
                table2040.AddRow(new string[] {
                            "First Name",
                            "Funky"});
                table2040.AddRow(new string[] {
                            "Last Name",
                            "Kong"});
                table2040.AddRow(new string[] {
                            "Email",
                            "FunkyKong@Cheese.com"});
                table2040.AddRow(new string[] {
                            "Phone",
                            "7777777777"});
                table2040.AddRow(new string[] {
                            "Same Billing Info?",
                            "Yes"});
#line 61
 testRunner.Then("user fills out the WC purchase page with these values:", ((string)(null)), table2040, "Then ");
#line hidden
#line 74
 testRunner.Then("user verifies the WC how would you rate our service modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.And("user verifies the WC thank you page appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("user verifies that these LOBs are recommended: GL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Mudjacking_I creates issued policy with Plus Plan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_Mudjacking_I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Construction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NH")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("YourServices")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OwnerOfficer")]
        public void WC_Mudjacking_ICreatesIssuedPolicyWithPlusPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "WC",
                    "Issued",
                    "Construction",
                    "NH",
                    "Regression",
                    "YourServices",
                    "OwnerOfficer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC_Mudjacking_I creates issued policy with Plus Plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2041 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table2041.AddRow(new string[] {
                            "Mudjacking",
                            "8",
                            "I Lease a Space From Others",
                            "",
                            "03053",
                            "WC"});
#line 80
 testRunner.Given("user starts a quote with:", ((string)(null)), table2041, "Given ");
#line hidden
#line 83
 testRunner.Then("user verifies the appearance of the WC About You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2042 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table2042.AddRow(new string[] {
                            "When do you want your policy to start?",
                            ""});
                table2042.AddRow(new string[] {
                            "When did you start your business?",
                            "Started 9 years ago"});
                table2042.AddRow(new string[] {
                            "How is your business structured?",
                            "Corporation"});
                table2042.AddRow(new string[] {
                            "What is the total annual payroll for W-2 employees? (exclude business owners/offi" +
                                "cers)",
                            "440440"});
                table2042.AddRow(new string[] {
                            "Are there any employees that never travel to job sites or do any construction wor" +
                                "k?",
                            "no"});
                table2042.AddRow(new string[] {
                            "Do you use any subcontractors or pay any workers using IRS Form 1099?",
                            "yes"});
                table2042.AddRow(new string[] {
                            "Do you require all subcontractors/1099 workers to have certificates of insurance?" +
                                "",
                            "Yes they must have Workers\' Compensation insurance"});
                table2042.AddRow(new string[] {
                            "How much of total work is done by subcontractors/1099 workers?",
                            "1-25%"});
                table2042.AddRow(new string[] {
                            "Business",
                            "Mud Lifts Me Up;Mud Mountain"});
                table2042.AddRow(new string[] {
                            "Address",
                            "39 Nashua Rd;Londonderry"});
                table2042.AddRow(new string[] {
                            "Fill Contact",
                            ""});
#line 84
 testRunner.Then("user fills out the WC About You page with these values:", ((string)(null)), table2042, "Then ");
#line hidden
#line 97
 testRunner.Then("user verifies the appearance of the WC Owners and Officers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2043 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table2043.AddRow(new string[] {
                            "How many owners/officers does your business have?",
                            "5+"});
                table2043.AddRow(new string[] {
                            "How many owners/officers do you want to cover with this policy?",
                            "2"});
                table2043.AddRow(new string[] {
                            "How many owners/officers do you want to exclude from this policy?",
                            "3"});
                table2043.AddRow(new string[] {
                            "Are there any included owners/officers that never travel to job sites or do any c" +
                                "onstruction work?",
                            "No"});
#line 98
 testRunner.Then("user handles the WC OO kickoff questions with these values:", ((string)(null)), table2043, "Then ");
#line hidden
#line 104
 testRunner.Then("user continues on from the WC OO page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2044 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table2044.AddRow(new string[] {
                            "Do you build any load-bearing concrete walls?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Do you do any masonry work such as manual brick or stone laying?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Do you do residential foundation work?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Do you ever transport six or more workers in the same vehicle?",
                            "no"});
                table2044.AddRow(new string[] {
                            "In the past 3 years how many Workers\' Compensation claims were reported?",
                            "None"});
                table2044.AddRow(new string[] {
                            "Do you perform any work over 30 feet above ground level?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Do you perform any work underground including in trenches, holes, or tunnels?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Do you do any demolition or wrecking of entire buildings or homes?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Do the business owner(s) of this business have a combined majority ownership in a" +
                                "ny other construction business?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Do you currently have a Workers\' Compensation insurance policy in effect?",
                            "yes"});
                table2044.AddRow(new string[] {
                            "Do you have multiple locations in more than one state?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Do you do any construction work in New York?",
                            "no"});
                table2044.AddRow(new string[] {
                            "Federal Employer Identification Number (FEIN)",
                            "23-1111110"});
#line 105
 testRunner.Then("user fills out the WC Your Services page", ((string)(null)), table2044, "Then ");
#line hidden
#line 120
 testRunner.Then("user verifies the appearance of the WC Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
 testRunner.Then("user clicks continue from WC Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2045 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customization",
                            "Value"});
                table2045.AddRow(new string[] {
                            "ELL - Each Accident / Total Policy / Each Employee",
                            "100,000/500,000/100,000"});
#line 122
 testRunner.When("user selects a Plus plan quote with the following customizations from the WC your" +
                        " quote page:", ((string)(null)), table2045, "When ");
#line hidden
#line 125
 testRunner.Then("user begins the WC AI page having the FEIN with value 23-1111110", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2046 = new TechTalk.SpecFlow.Table(new string[] {
                            "Set Name",
                            "Set Job",
                            "Set DOB"});
                table2046.AddRow(new string[] {
                            "Bret Farve",
                            "President",
                            "9/9/1991"});
                table2046.AddRow(new string[] {
                            "Randy Moss",
                            "Vice President",
                            "8/8/1988"});
                table2046.AddRow(new string[] {
                            "Adam Thielan",
                            "Manager",
                            "7/7/1977"});
#line 126
 testRunner.Then("wc user handles 3 excluded oo with these values:", ((string)(null)), table2046, "Then ");
#line hidden
#line 131
 testRunner.Then("wc user handles 2 covered oo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.Then("user continues on from the WC Additional Information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2047 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2047.AddRow(new string[] {
                            "Payment Option",
                            "15% Down + 10 Monthly Installments"});
                table2047.AddRow(new string[] {
                            "CC Name",
                            "Funky Chicken-cheese"});
                table2047.AddRow(new string[] {
                            "CC Number",
                            "4111111111111111"});
                table2047.AddRow(new string[] {
                            "CC Expiration Month",
                            "11"});
                table2047.AddRow(new string[] {
                            "CC Expiration Year",
                            "25"});
                table2047.AddRow(new string[] {
                            "Autopay",
                            "No"});
                table2047.AddRow(new string[] {
                            "First Name",
                            "Funky"});
                table2047.AddRow(new string[] {
                            "Last Name",
                            "Kong"});
                table2047.AddRow(new string[] {
                            "Email",
                            "FunkyKong@Cheese.com"});
                table2047.AddRow(new string[] {
                            "Phone",
                            "7777777777"});
                table2047.AddRow(new string[] {
                            "Same Billing Info?",
                            "Yes"});
#line 133
 testRunner.Then("user fills out the WC purchase page with these values:", ((string)(null)), table2047, "Then ");
#line hidden
#line 146
 testRunner.Then("user verifies the WC how would you rate our service modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.Then("user verifies the WC thank you page appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.Then("user verifies that these LOBs are recommended: GL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
