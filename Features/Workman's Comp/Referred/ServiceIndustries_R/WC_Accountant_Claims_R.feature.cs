// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.WorkmansComp.Referred.ServiceIndustries_R
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WC_Accountant_Claims_RFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "WC_Accountant_Claims_R.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Workman\'s Comp/Referred/ServiceIndustries_R", "WC_Accountant_Claims_R", @"Ineligible quote: REFERRAL - Total number of claims in past 3 years exceeds the threshold based on class, state, and payroll amount
Keyword: Accountant
Yes I have Employee
Number of employee : 3
Business Operation: I Lease a Space From Others
ZIP Code: 93612
Included Officer: 0
Business started year : Started 2 years ago
Business Structured: Partnership", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WC_Accountant_Claims_R")))
            {
                global::BiBerkLOB.Features.WorkmansComp.Referred.ServiceIndustries_R.WC_Accountant_Claims_RFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("02_User performs UW Questions for Keyword: Accountant with Ineligible Quote")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_Accountant_Claims_R")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _02_UserPerformsUWQuestionsForKeywordAccountantWithIneligibleQuote()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02_User performs UW Questions for Keyword: Accountant with Ineligible Quote", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1807 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1807.AddRow(new string[] {
                            "Accountant",
                            "3",
                            "I Lease a Space From Others",
                            "",
                            "93612",
                            "WC"});
#line 14
 testRunner.Given("user starts a quote with:", ((string)(null)), table1807, "Given ");
#line hidden
#line 17
 testRunner.Given("user selects When do you want your policy to start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1808 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenDidYouStartYourBusiness"});
                table1808.AddRow(new string[] {
                            "Brand new venture or Started earlier this year"});
                table1808.AddRow(new string[] {
                            "Started last year"});
                table1808.AddRow(new string[] {
                            "Started 2 years ago"});
                table1808.AddRow(new string[] {
                            "Started 3 years ago"});
                table1808.AddRow(new string[] {
                            "Started 4 years ago"});
                table1808.AddRow(new string[] {
                            "Started 5 years ago"});
                table1808.AddRow(new string[] {
                            "Started 6 years ago"});
                table1808.AddRow(new string[] {
                            "Started 7 years ago"});
                table1808.AddRow(new string[] {
                            "Started 8 years ago"});
                table1808.AddRow(new string[] {
                            "Started 9 years ago"});
                table1808.AddRow(new string[] {
                            "Been around a while, started 10 or more years ago"});
#line 18
 testRunner.And("user selects When did you start your business Started 2 years ago", ((string)(null)), table1808, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1809 = new TechTalk.SpecFlow.Table(new string[] {
                            "HowIsYourBusinessStructured"});
                table1809.AddRow(new string[] {
                            "Corporation"});
                table1809.AddRow(new string[] {
                            "Partnership"});
                table1809.AddRow(new string[] {
                            "Individual/Sole Proprietor"});
                table1809.AddRow(new string[] {
                            "Sub-Chapter Corp"});
                table1809.AddRow(new string[] {
                            "Limited Liability Co. (LLC)"});
#line 31
 testRunner.And("user selects How is your business structured Partnership", ((string)(null)), table1809, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1810 = new TechTalk.SpecFlow.Table(new string[] {
                            "CoverageForAnyOwnersOfficers"});
                table1810.AddRow(new string[] {
                            "No"});
                table1810.AddRow(new string[] {
                            "Yes - buy coverage for 1 owner/officer"});
                table1810.AddRow(new string[] {
                            "Yes - buy coverage for 2 owners/officers"});
                table1810.AddRow(new string[] {
                            "Yes - buy coverage for 3 owners/officers"});
                table1810.AddRow(new string[] {
                            "Yes - buy coverage for 4 owners/officers"});
                table1810.AddRow(new string[] {
                            "Yes - buy coverage for 5 or more owners/officers"});
#line 38
 testRunner.And("user selects Do you want to include coverage for any owners/officers No", ((string)(null)), table1810, "And ");
#line hidden
#line 46
 testRunner.And("user enters What is the total annual payroll for W-2 employees 150000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1811 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClaimsWereReported"});
                table1811.AddRow(new string[] {
                            "None"});
                table1811.AddRow(new string[] {
                            "1"});
                table1811.AddRow(new string[] {
                            "2"});
                table1811.AddRow(new string[] {
                            "3"});
                table1811.AddRow(new string[] {
                            "4"});
                table1811.AddRow(new string[] {
                            "5"});
                table1811.AddRow(new string[] {
                            "6 or more"});
#line 47
 testRunner.And("user clicks In the past 3 years how many Workers Compensation claims were reporte" +
                        "d 6 or more", ((string)(null)), table1811, "And ");
#line hidden
#line 56
 testRunner.And("user clicks on No CTA for Do you use any volunteers or donated labor and user ent" +
                        "ers percantage 0 for What percentage of workers are volunteers or donated labor " +
                        "donated labor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("user clicks No for Do you have multiple locations in more than one state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("user enters Business name Ineligible Too Many WC Claims, DBA Risky Business and w" +
                        "ebsite www.cnn.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("user enters their Business address line 1 is 417 W Shaw Ave, and City is Clovis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("user enters their Contact first name, Contact last name is Risky, Man", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("user enters their Contact email risky@yopmail.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("user enters their Contact phone 123-123-1321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("user submits WC questions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03_User verifies Referred details and Submits information for Keyword: Accountant" +
            " with Ineligible Quote")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_Accountant_Claims_R")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _03_UserVerifiesReferredDetailsAndSubmitsInformationForKeywordAccountantWithIneligibleQuote()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_User verifies Referred details and Submits information for Keyword: Accountant" +
                    " with Ineligible Quote", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
  testRunner.Given("user lands on Referred details and user verifies title", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
 testRunner.And("user verifies business information details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And("user clicks on Submit CTA from the Referred page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("04_Verify user lands on Referred confirmation page for Keyword: Accountant with I" +
            "neligible Quote")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_Accountant_Claims_R")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void _04_VerifyUserLandsOnReferredConfirmationPageForKeywordAccountantWithIneligibleQuote()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04_Verify user lands on Referred confirmation page for Keyword: Accountant with I" +
                    "neligible Quote", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 73
   testRunner.Given("user lands We\'ve received your information and will contact you shortly.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
  testRunner.And("user clicks on Go To Homepage CTA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.Then("user lands biBerk Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
