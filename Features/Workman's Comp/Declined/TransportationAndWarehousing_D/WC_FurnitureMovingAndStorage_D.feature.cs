// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.WorkmansComp.Declined.TransportationAndWarehousing_D
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WC_FurnitureMovingAndStorage_DFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "WC_FurnitureMovingAndStorage_D.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Workman\'s Comp/Declined/TransportationAndWarehousing_D", "WC_FurnitureMovingAndStorage_D", @"Keyword: Furniture Moving and Storage
Ineligible quote - response to carrier question FEIN (blacklisted)
Zip Code: 34465
City: Beverly Hills
Employee option: 15
Business Operation: I Lease a Space From Others
Years in Businiess: 7
Payroll: 800000
Entity type: LLC
FEIN: 83-1978320    ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WC_FurnitureMovingAndStorage_D")))
            {
                global::ApolloQAAutomation.Features.WorkmansComp.Declined.TransportationAndWarehousing_D.WC_FurnitureMovingAndStorage_DFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC Furniture Moving And Storage gets declined due to blacklisted FEIN")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_FurnitureMovingAndStorage_D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Health")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public void WCFurnitureMovingAndStorageGetsDeclinedDueToBlacklistedFEIN()
        {
            string[] tagsOfScenario = new string[] {
                    "Health",
                    "WC",
                    "Declined",
                    "FL",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC Furniture Moving And Storage gets declined due to blacklisted FEIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1951 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1951.AddRow(new string[] {
                            "Furniture Moving and Storage",
                            "15",
                            "I Lease a Space From Others",
                            "",
                            "34465",
                            "WC"});
#line 15
 testRunner.Given("user starts a quote with:", ((string)(null)), table1951, "Given ");
#line hidden
#line 18
 testRunner.Then("user verifies the appearance of the WC About You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1952 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1952.AddRow(new string[] {
                            "When do you want your policy to start?",
                            ""});
                table1952.AddRow(new string[] {
                            "When did you start your business?",
                            "Started 7 years ago"});
                table1952.AddRow(new string[] {
                            "How is your business structured?",
                            "Limited Liability Co. (LLC)"});
                table1952.AddRow(new string[] {
                            "What is the total annual payroll for W-2 employees? (exclude business owners/offi" +
                                "cers)",
                            "800000"});
                table1952.AddRow(new string[] {
                            "Are there any back office employees that would never assist with moves, handle an" +
                                "y goods, or drive any trucks?",
                            "no"});
                table1952.AddRow(new string[] {
                            "Are there any drivers that drive trucks you own or lease but pay via 1099?",
                            "no"});
                table1952.AddRow(new string[] {
                            "Do any owner operators or sub-haulers transport goods on your behalf?",
                            "no"});
                table1952.AddRow(new string[] {
                            "Business",
                            "Furniture Moving and Storage"});
                table1952.AddRow(new string[] {
                            "Address",
                            "7 N Washington St;Beverly Hills"});
                table1952.AddRow(new string[] {
                            "Contact First Name",
                            "TestF"});
                table1952.AddRow(new string[] {
                            "Contact Last Name",
                            "TestL"});
                table1952.AddRow(new string[] {
                            "Email",
                            "Test@Test123.com"});
                table1952.AddRow(new string[] {
                            "Phone",
                            "1231231321"});
                table1952.AddRow(new string[] {
                            "Business website",
                            "test.com"});
#line 19
 testRunner.Then("user fills out the WC About You page with these values:", ((string)(null)), table1952, "Then ");
#line hidden
#line 35
 testRunner.Then("user verifies the appearance of the WC Owners and Officers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1953 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1953.AddRow(new string[] {
                            "How many owners/officers does your business have?",
                            "1"});
                table1953.AddRow(new string[] {
                            "How many owners/officers do you want to cover with this policy?",
                            "0"});
#line 36
 testRunner.Then("user handles the WC OO kickoff questions with these values:", ((string)(null)), table1953, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1954 = new TechTalk.SpecFlow.Table(new string[] {
                            "First Name",
                            "Last Name"});
                table1954.AddRow(new string[] {
                            "OneF",
                            "OneL"});
#line 40
 testRunner.Then("user handles the WC Excluded OO with these values:", ((string)(null)), table1954, "Then ");
#line hidden
#line 43
 testRunner.Then("user continues on from the WC OO page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1955 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1955.AddRow(new string[] {
                            "Do you provide written guidelines and training on proper lifting techniques?",
                            "no"});
                table1955.AddRow(new string[] {
                            "In the past 3 years how many Workers\' Compensation claims were reported?",
                            "None"});
                table1955.AddRow(new string[] {
                            "Do you review MVRs for all employees with a driving exposure?",
                            "Yes at the time of hire and annually"});
                table1955.AddRow(new string[] {
                            "Do you currently have a Workers\' Compensation insurance policy in effect?",
                            "yes"});
                table1955.AddRow(new string[] {
                            "Do you have multiple locations in more than one state?",
                            "no"});
                table1955.AddRow(new string[] {
                            "Federal Employer Identification Number (FEIN)",
                            "83-1978320"});
#line 44
 testRunner.Then("user fills out the WC Your Services page", ((string)(null)), table1955, "Then ");
#line hidden
#line 52
 testRunner.Then("user verifies the WC decline page appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
