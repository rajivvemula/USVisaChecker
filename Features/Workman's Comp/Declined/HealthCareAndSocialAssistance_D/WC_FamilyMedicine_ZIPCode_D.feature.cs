// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.WorkmansComp.Declined.HealthCareAndSocialAssistance_D
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WC_FamilyMedicine_ZIPCode_DFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "WC_FamilyMedicine_ZIPCode_D.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Workman\'s Comp/Declined/HealthCareAndSocialAssistance_D", "WC_FamilyMedicine_ZIPCode_D", @"Ineligible quote - ZIP Code - 20002
DeclineReason:User selected an excluded business type with 0 employees.
Keyword: Family Medicine
No Employee
Number of employee : 0
Business Operation: I Lease a Space From Others
Included Officer: 1
Business started year : Started 5 years ago
Business Structured: LLC", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WC_FamilyMedicine_ZIPCode_D")))
            {
                global::BiBerkLOB.Features.WorkmansComp.Declined.HealthCareAndSocialAssistance_D.WC_FamilyMedicine_ZIPCode_DFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("02_User performs UW Questions for Keyword: Family Medicine with Ineligible Quote")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_FamilyMedicine_ZIPCode_D")]
        public void _02_UserPerformsUWQuestionsForKeywordFamilyMedicineWithIneligibleQuote()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02_User performs UW Questions for Keyword: Family Medicine with Ineligible Quote", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table586 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table586.AddRow(new string[] {
                            "Family Medicine",
                            "",
                            "I Lease a Space From Others",
                            "",
                            "20002",
                            "WC"});
#line 14
    testRunner.Given("user starts a quote with:", ((string)(null)), table586, "Given ");
#line hidden
#line 17
   testRunner.Given("user selects Policy start date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table587 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenDidYouStartYourBusiness"});
                table587.AddRow(new string[] {
                            "Brand new venture or Started earlier this year"});
                table587.AddRow(new string[] {
                            "Started last year"});
                table587.AddRow(new string[] {
                            "Started 2 years ago"});
                table587.AddRow(new string[] {
                            "Started 3 years ago"});
                table587.AddRow(new string[] {
                            "Started 4 years ago"});
                table587.AddRow(new string[] {
                            "Started 5 years ago"});
                table587.AddRow(new string[] {
                            "Started 6 years ago"});
                table587.AddRow(new string[] {
                            "Started 7 years ago"});
                table587.AddRow(new string[] {
                            "Started 8 years ago"});
                table587.AddRow(new string[] {
                            "Started 9 years ago"});
                table587.AddRow(new string[] {
                            "Been around a while, started 10 or more years ago"});
#line 18
 testRunner.And("user selects When did you start your business Been around a while, started 10 or " +
                        "more years ago", ((string)(null)), table587, "And ");
#line hidden
                TechTalk.SpecFlow.Table table588 = new TechTalk.SpecFlow.Table(new string[] {
                            "HowIsYourBusinessStructured"});
                table588.AddRow(new string[] {
                            "Corporation"});
                table588.AddRow(new string[] {
                            "Partnership"});
                table588.AddRow(new string[] {
                            "Individual/Sole Proprietor"});
                table588.AddRow(new string[] {
                            "Sub-Chapter Corp"});
                table588.AddRow(new string[] {
                            "Limited Liability Co. (LLC)"});
#line 31
 testRunner.And("user selects How is your business structured Individual/Sole Proprietor", ((string)(null)), table588, "And ");
#line hidden
#line 38
 testRunner.And("user select Primary Care for What type of care do you provide?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("user clicks on No for Do you provide emergency response workers to areas with dis" +
                        "ease outbreaks, catastrophes, or disasters?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table589 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClaimsWereReported"});
                table589.AddRow(new string[] {
                            "None"});
                table589.AddRow(new string[] {
                            "1"});
                table589.AddRow(new string[] {
                            "2"});
                table589.AddRow(new string[] {
                            "3"});
                table589.AddRow(new string[] {
                            "4"});
                table589.AddRow(new string[] {
                            "5"});
                table589.AddRow(new string[] {
                            "6 or more"});
#line 40
 testRunner.And("user clicks In the past 3 years how many Workers Compensation claims were reporte" +
                        "d None", ((string)(null)), table589, "And ");
#line hidden
                TechTalk.SpecFlow.Table table590 = new TechTalk.SpecFlow.Table(new string[] {
                            "WhenWasLastPolicyInEffect",
                            "HasThereBeenAnyWorkersInjuries"});
                table590.AddRow(new string[] {
                            "Never no prior insurance",
                            "Yes there has been injuries or accidents"});
                table590.AddRow(new string[] {
                            "Within the last 30 days",
                            "No to the best of my knowledge"});
                table590.AddRow(new string[] {
                            "30 days to 6 months ago",
                            ""});
                table590.AddRow(new string[] {
                            "More than 6 months ago",
                            ""});
#line 49
 testRunner.And(@"user clicks Yes for Do you currently have a Workers Compensation insurance policy in effect and user select option from the When was your last policy in effect dropdown and user select option optin for Has there been any worker injuries or accidents since the last policy was in effect General", ((string)(null)), table590, "And ");
#line hidden
#line 55
 testRunner.And("user selects No and enters 0 for Do you use any volunteers or donated labor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("user clicks No for Do you have multiple locations in more than one state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("user enters Insured first name Test100 and last name Test101", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("user enters DBA Test 10, website www.test10.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("user enters address line1 120 Test st, line2 APT 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.Then("user verifies city,state and zipcode General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.And("user enters Contact email and phone number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("user clicks on Submit CTA General", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03_Verify user lands on Declined page and then Navigates to Home page for Keyword" +
            ": Family Medicine with Ineligible Quote")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_FamilyMedicine_ZIPCode_D")]
        public void _03_VerifyUserLandsOnDeclinedPageAndThenNavigatesToHomePageForKeywordFamilyMedicineWithIneligibleQuote()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_Verify user lands on Declined page and then Navigates to Home page for Keyword" +
                    ": Family Medicine with Ineligible Quote", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
   testRunner.Given("user lands on the We are sorry page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
 testRunner.And("user clicks on Go To Homepage CTA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.Then("user lands biBerk Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
