// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PieChartAppearanceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PieChartAppearance.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Unit", "PieChartAppearance", "Verify the appearance of the pie chart page as you approach it with different key" +
                    "words.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PieChartAppearance")))
            {
                global::ApolloQAAutomation.Features.Unit.PieChartAppearanceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC, BOP and CA recommended only")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        public void WCBOPAndCARecommendedOnly()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC, BOP and CA recommended only", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1630 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1630.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "0",
                            "I Lease a Space From Others",
                            "Vehicles;Tools or Equipment",
                            "60606"});
#line 17
 testRunner.And("user starts a quote with:", ((string)(null)), table1630, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1631 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1631.AddRow(new string[] {
                            "WC",
                            "Available and Recommended"});
                table1631.AddRow(new string[] {
                            "PL",
                            "Not Available"});
                table1631.AddRow(new string[] {
                            "GL",
                            "Available and Not Recommended"});
                table1631.AddRow(new string[] {
                            "BP",
                            "Available and Recommended"});
                table1631.AddRow(new string[] {
                            "CA",
                            "Available and Recommended"});
#line 20
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1631, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA and GL Not Available")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        public void CAAndGLNotAvailable()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA and GL Not Available", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1632 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1632.AddRow(new string[] {
                            "Furniture Assembly",
                            "0",
                            "I Run My Business From Property I Own",
                            "Inventory or Stock",
                            "60606"});
#line 34
 testRunner.And("user starts a quote with:", ((string)(null)), table1632, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1633 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1633.AddRow(new string[] {
                            "GL",
                            "Not Available"});
                table1633.AddRow(new string[] {
                            "CA",
                            "Not Available"});
#line 37
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1633, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC Available Not Recommended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        public void WCAvailableNotRecommended()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC Available Not Recommended", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1634 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1634.AddRow(new string[] {
                            "Florist",
                            "0",
                            "I Run My Business From Property I Own",
                            "Tools or Equipment",
                            "60606"});
#line 47
 testRunner.And("user starts a quote with:", ((string)(null)), table1634, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1635 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1635.AddRow(new string[] {
                            "WC",
                            "Available and Not Recommended"});
#line 50
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1635, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("PL Recommended, BP Not Available")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        public void PLRecommendedBPNotAvailable()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PL Recommended, BP Not Available", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1636 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Client Home",
                            "Own or Lease",
                            "ZIP Code"});
                table1636.AddRow(new string[] {
                            "Accountant",
                            "0",
                            "I Run My Business Out of My Home",
                            "No",
                            "",
                            "17601"});
#line 60
 testRunner.And("user starts a quote with:", ((string)(null)), table1636, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1637 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1637.AddRow(new string[] {
                            "PL",
                            "Available and Recommended"});
                table1637.AddRow(new string[] {
                            "BP",
                            "Not Available"});
#line 63
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1637, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC Not Available")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        public void WCNotAvailable()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC Not Available", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 72
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1638 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1638.AddRow(new string[] {
                            "Hair Salon",
                            "3",
                            "I Lease a Space From Others",
                            "",
                            "44436"});
#line 73
 testRunner.And("user starts a quote with:", ((string)(null)), table1638, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1639 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1639.AddRow(new string[] {
                            "WC",
                            "Not Available"});
#line 76
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1639, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void BOP_GL_Rule_1DoNotRecommendBOP(string industry, string emp, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_1 Do Not Recommend BOP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1640 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1640.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            "I Lease a Space From Others",
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 88
 testRunner.And("user starts a quote with:", ((string)(null)), table1640, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1641 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1641.AddRow(new string[] {
                            "GL",
                            "Available and Recommended"});
                table1641.AddRow(new string[] {
                            "BP",
                            "Not Available"});
#line 91
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1641, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_1 Do Not Recommend BOP: Appliance Repair")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Appliance Repair")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Appliance Repair")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "06010")]
        public void BOP_GL_Rule_1DoNotRecommendBOP_ApplianceRepair()
        {
#line 86
this.BOP_GL_Rule_1DoNotRecommendBOP("Appliance Repair", "2", "", "06010", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_1 Do Not Recommend BOP: Commercial Remodeling and Renovating: General" +
            " Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Commercial Remodeling and Renovating: General Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Commercial Remodeling and Renovating: General Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "60706")]
        public void BOP_GL_Rule_1DoNotRecommendBOP_CommercialRemodelingAndRenovatingGeneralContractor()
        {
#line 86
this.BOP_GL_Rule_1DoNotRecommendBOP("Commercial Remodeling and Renovating: General Contractor", "0", "Tools or Equipment", "60706", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_2DoNotRecommendGL(string industry, string emp, string location, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("location", location);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_2 Do Not Recommend GL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 103
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1642 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1642.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            string.Format("{0}", location),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 104
 testRunner.And("user starts a quote with:", ((string)(null)), table1642, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1643 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1643.AddRow(new string[] {
                            "GL",
                            "Not Available"});
                table1643.AddRow(new string[] {
                            "BP",
                            "Available and Recommended"});
#line 107
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1643, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_2 Do Not Recommend GL: Alarm or Intercommunication Systems Installati" +
            "on")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Alarm or Intercommunication Systems Installation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Alarm or Intercommunication Systems Installation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Own a Property & Lease to Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "85001")]
        public void BOP_GL_Rule_2DoNotRecommendGL_AlarmOrIntercommunicationSystemsInstallation()
        {
#line 102
this.BOP_GL_Rule_2DoNotRecommendGL("Alarm or Intercommunication Systems Installation", "2", "I Own a Property & Lease to Others", "", "85001", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_2 Do Not Recommend GL: Burglar and Fire Alarm: With Sprinkler Install" +
            "ation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Burglar and Fire Alarm: With Sprinkler Installation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Burglar and Fire Alarm: With Sprinkler Installation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business From Property I Own")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90210")]
        public void BOP_GL_Rule_2DoNotRecommendGL_BurglarAndFireAlarmWithSprinklerInstallation()
        {
#line 102
this.BOP_GL_Rule_2DoNotRecommendGL("Burglar and Fire Alarm: With Sprinkler Installation", "2", "I Run My Business From Property I Own", "", "90210", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_2 Do Not Recommend GL: Animal Hospital")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Animal Hospital")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Animal Hospital")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Own a Property & Lease to Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "80015")]
        public void BOP_GL_Rule_2DoNotRecommendGL_AnimalHospital()
        {
#line 102
this.BOP_GL_Rule_2DoNotRecommendGL("Animal Hospital", "6", "I Own a Property & Lease to Others", "", "80015", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_2 Do Not Recommend GL: Quick-lube shop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Quick-lube shop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Quick-lube shop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business From Property I Own")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "06010")]
        public void BOP_GL_Rule_2DoNotRecommendGL_Quick_LubeShop()
        {
#line 102
this.BOP_GL_Rule_2DoNotRecommendGL("Quick-lube shop", "3", "I Run My Business From Property I Own", "", "06010", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_2 Do Not Recommend GL: Roofing Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Roofing Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Roofing Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Own a Property & Lease to Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "92423")]
        public void BOP_GL_Rule_2DoNotRecommendGL_RoofingContractor()
        {
#line 102
this.BOP_GL_Rule_2DoNotRecommendGL("Roofing Contractor", "0", "I Own a Property & Lease to Others", "", "92423", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_3RecommendGLBOPAvailableNotRecommended(string industry, string emp, string location, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("location", location);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_3 Recommend GL, BOP Available Not Recommended", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 122
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1644 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1644.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            string.Format("{0}", location),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 123
 testRunner.And("user starts a quote with:", ((string)(null)), table1644, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1645 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1645.AddRow(new string[] {
                            "GL",
                            "Available and Recommended"});
                table1645.AddRow(new string[] {
                            "BP",
                            "Available and Not Recommended"});
#line 126
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1645, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_3 Recommend GL, BOP Available Not Recommended: Drywalling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Drywalling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Drywalling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business Out of My Home")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "60606")]
        public void BOP_GL_Rule_3RecommendGLBOPAvailableNotRecommended_Drywalling()
        {
#line 121
this.BOP_GL_Rule_3RecommendGLBOPAvailableNotRecommended("Drywalling", "3", "I Run My Business Out of My Home", "Tools or Equipment", "60606", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_3 Recommend GL, BOP Available Not Recommended: Gardener")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Gardener")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Gardener")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Work at a Job Site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "95688")]
        public void BOP_GL_Rule_3RecommendGLBOPAvailableNotRecommended_Gardener()
        {
#line 121
this.BOP_GL_Rule_3RecommendGLBOPAvailableNotRecommended("Gardener", "3", "I Work at a Job Site", "Tools or Equipment", "95688", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_4TEHOMERecommendBOPGLAvailableNotRecommended(string industry, string emp, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_4 TEHOME Recommend BOP, GL Available Not Recommended", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 138
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1646 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1646.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            "I Run My Business Out of My Home",
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 139
 testRunner.And("user starts a quote with:", ((string)(null)), table1646, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1647 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1647.AddRow(new string[] {
                            "GL",
                            "Available and Not Recommended"});
                table1647.AddRow(new string[] {
                            "BP",
                            "Available and Recommended"});
#line 142
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1647, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_4 TEHOME Recommend BOP, GL Available Not Recommended: Shingling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Shingling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Shingling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "46011")]
        public void BOP_GL_Rule_4TEHOMERecommendBOPGLAvailableNotRecommended_Shingling()
        {
#line 137
this.BOP_GL_Rule_4TEHOMERecommendBOPGLAvailableNotRecommended("Shingling", "2", "Furniture", "46011", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_4 TEHOME Recommend BOP, GL Available Not Recommended: Appliance Repai" +
            "r")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Appliance Repair")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Appliance Repair")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Inventory or Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "46013")]
        public void BOP_GL_Rule_4TEHOMERecommendBOPGLAvailableNotRecommended_ApplianceRepair()
        {
#line 137
this.BOP_GL_Rule_4TEHOMERecommendBOPGLAvailableNotRecommended("Appliance Repair", "2", "Inventory or Stock", "46013", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_4 TEHOME Recommend BOP, GL Available Not Recommended: Roofing Contrac" +
            "tor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Roofing Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Roofing Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture;Inventory or Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "92423")]
        public void BOP_GL_Rule_4TEHOMERecommendBOPGLAvailableNotRecommended_RoofingContractor()
        {
#line 137
this.BOP_GL_Rule_4TEHOMERecommendBOPGLAvailableNotRecommended("Roofing Contractor", "0", "Furniture;Inventory or Stock", "92423", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_4TEJOBSITERecommendBOPGLAvailableNotRecommended(string industry, string emp, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_4 TEJOBSITE Recommend BOP, GL Available Not Recommended", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 155
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1648 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1648.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            "I Work at a Job Site",
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 156
 testRunner.And("user starts a quote with:", ((string)(null)), table1648, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1649 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1649.AddRow(new string[] {
                            "GL",
                            "Available and Not Recommended"});
                table1649.AddRow(new string[] {
                            "BP",
                            "Available and Recommended"});
#line 159
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1649, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_4 TEJOBSITE Recommend BOP, GL Available Not Recommended: Reglaze Bath" +
            "rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Reglaze Bathrooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Reglaze Bathrooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "50327")]
        public void BOP_GL_Rule_4TEJOBSITERecommendBOPGLAvailableNotRecommended_ReglazeBathrooms()
        {
#line 154
this.BOP_GL_Rule_4TEJOBSITERecommendBOPGLAvailableNotRecommended("Reglaze Bathrooms", "2", "Furniture", "50327", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_4 TEJOBSITE Recommend BOP, GL Available Not Recommended: Mudjacking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Mudjacking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Mudjacking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Inventory or Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90011")]
        public void BOP_GL_Rule_4TEJOBSITERecommendBOPGLAvailableNotRecommended_Mudjacking()
        {
#line 154
this.BOP_GL_Rule_4TEJOBSITERecommendBOPGLAvailableNotRecommended("Mudjacking", "2", "Inventory or Stock", "90011", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_5TEHOMEBOPNotAvailableGLAvailableNotRecommendedBecausePL(string industry, string emp, string home, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("home", home);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_5 TEHOME BOP Not Available, GL Available Not Recommended because PL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 171
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1650 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Client Home",
                            "Own or Lease",
                            "ZIP Code"});
                table1650.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            "I Run My Business Out of My Home",
                            string.Format("{0}", home),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 172
 testRunner.And("user starts a quote with:", ((string)(null)), table1650, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1651 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1651.AddRow(new string[] {
                            "GL",
                            "Available and Not Recommended"});
                table1651.AddRow(new string[] {
                            "BP",
                            "Not Available"});
#line 175
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1651, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_5 TEHOME BOP Not Available, GL Available Not Recommended because PL: " +
            "IT Software Training Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "IT Software Training Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "IT Software Training Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "66006")]
        public void BOP_GL_Rule_5TEHOMEBOPNotAvailableGLAvailableNotRecommendedBecausePL_ITSoftwareTrainingServices()
        {
#line 170
this.BOP_GL_Rule_5TEHOMEBOPNotAvailableGLAvailableNotRecommendedBecausePL("IT Software Training Services", "2", "No", "", "66006", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_5 TEHOME BOP Not Available, GL Available Not Recommended because PL: " +
            "Hair Salon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Hair Salon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Hair Salon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "07303")]
        public void BOP_GL_Rule_5TEHOMEBOPNotAvailableGLAvailableNotRecommendedBecausePL_HairSalon()
        {
#line 170
this.BOP_GL_Rule_5TEHOMEBOPNotAvailableGLAvailableNotRecommendedBecausePL("Hair Salon", "4", "No", "", "07303", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_5 TEHOME BOP Not Available, GL Available Not Recommended because PL: " +
            "Attorney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Attorney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Attorney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "27513")]
        public void BOP_GL_Rule_5TEHOMEBOPNotAvailableGLAvailableNotRecommendedBecausePL_Attorney()
        {
#line 170
this.BOP_GL_Rule_5TEHOMEBOPNotAvailableGLAvailableNotRecommendedBecausePL("Attorney", "2", "No", "", "27513", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_6TEJOBSITERecommendBOPGLAvailableNotRecommended(string industry, string emp, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_6 TEJOBSITE Recommend BOP, GL Available Not Recommended", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 188
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1652 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1652.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            "I Work at a Job Site",
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 189
 testRunner.And("user starts a quote with:", ((string)(null)), table1652, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1653 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1653.AddRow(new string[] {
                            "GL",
                            "Available and Not Recommended"});
                table1653.AddRow(new string[] {
                            "BP",
                            "Not Available"});
#line 192
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1653, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_6 TEJOBSITE Recommend BOP, GL Available Not Recommended: Irrigation M" +
            "anagement Consulting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Irrigation Management Consulting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Irrigation Management Consulting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "19131")]
        public void BOP_GL_Rule_6TEJOBSITERecommendBOPGLAvailableNotRecommended_IrrigationManagementConsulting()
        {
#line 187
this.BOP_GL_Rule_6TEJOBSITERecommendBOPGLAvailableNotRecommended("Irrigation Management Consulting", "3", "", "19131", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_6 TEJOBSITE Recommend BOP, GL Available Not Recommended: Database Des" +
            "igner")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Database Designer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Database Designer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "48006")]
        public void BOP_GL_Rule_6TEJOBSITERecommendBOPGLAvailableNotRecommended_DatabaseDesigner()
        {
#line 187
this.BOP_GL_Rule_6TEJOBSITERecommendBOPGLAvailableNotRecommended("Database Designer", "2", "", "48006", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_6 TEJOBSITE Recommend BOP, GL Available Not Recommended: Interior Dec" +
            "orators: No Installation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Interior Decorators: No Installation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Interior Decorators: No Installation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "60101")]
        public void BOP_GL_Rule_6TEJOBSITERecommendBOPGLAvailableNotRecommended_InteriorDecoratorsNoInstallation()
        {
#line 187
this.BOP_GL_Rule_6TEJOBSITERecommendBOPGLAvailableNotRecommended("Interior Decorators: No Installation", "1", "", "60101", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_7TEHOMEDoNotRecommendBOP(string industry, string emp, string home, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("home", home);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_7 TEHOME Do Not Recommend BOP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 204
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 205
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1654 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Client Home",
                            "Own or Lease",
                            "ZIP Code"});
                table1654.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            "I Run My Business Out of My Home",
                            string.Format("{0}", home),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 206
 testRunner.And("user starts a quote with:", ((string)(null)), table1654, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1655 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1655.AddRow(new string[] {
                            "GL",
                            "Available and Not Recommended"});
                table1655.AddRow(new string[] {
                            "BP",
                            "Available and Recommended"});
#line 209
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1655, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_7 TEHOME Do Not Recommend BOP: Nonprofit: Food Bank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Nonprofit: Food Bank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Nonprofit: Food Bank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "68004")]
        public void BOP_GL_Rule_7TEHOMEDoNotRecommendBOP_NonprofitFoodBank()
        {
#line 204
this.BOP_GL_Rule_7TEHOMEDoNotRecommendBOP("Nonprofit: Food Bank", "2", "", "Furniture", "68004", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_7 TEHOME Do Not Recommend BOP: Household Appliance Wholesaler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Household Appliance Wholesaler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Household Appliance Wholesaler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Inventory or Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "89883")]
        public void BOP_GL_Rule_7TEHOMEDoNotRecommendBOP_HouseholdApplianceWholesaler()
        {
#line 204
this.BOP_GL_Rule_7TEHOMEDoNotRecommendBOP("Household Appliance Wholesaler", "2", "", "Inventory or Stock", "89883", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_7 TEHOME Do Not Recommend BOP: Executive Coaching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Executive Coaching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Executive Coaching")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "07001")]
        public void BOP_GL_Rule_7TEHOMEDoNotRecommendBOP_ExecutiveCoaching()
        {
#line 204
this.BOP_GL_Rule_7TEHOMEDoNotRecommendBOP("Executive Coaching", "2", "No", "Tools or Equipment", "07001", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_7 TEHOME Do Not Recommend BOP: Car Wash: Full Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Car Wash: Full Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Car Wash: Full Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture;Inventory or Stock;Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "63941")]
        public void BOP_GL_Rule_7TEHOMEDoNotRecommendBOP_CarWashFullService()
        {
#line 204
this.BOP_GL_Rule_7TEHOMEDoNotRecommendBOP("Car Wash: Full Service", "0", "", "Furniture;Inventory or Stock;Tools or Equipment", "63941", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP(string industry, string emp, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_7 TEJOBSITE Do Not Recommend BOP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 223
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1656 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1656.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            "I Work at a Job Site",
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 224
 testRunner.And("user starts a quote with:", ((string)(null)), table1656, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1657 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1657.AddRow(new string[] {
                            "GL",
                            "Available and Not Recommended"});
                table1657.AddRow(new string[] {
                            "BP",
                            "Available and Recommended"});
#line 227
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1657, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_7 TEJOBSITE Do Not Recommend BOP: Prosthetist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Prosthetist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Prosthetist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "89018")]
        public void BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP_Prosthetist()
        {
#line 222
this.BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP("Prosthetist", "2", "Furniture", "89018", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_7 TEJOBSITE Do Not Recommend BOP: Actuary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Actuary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Actuary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Inventory or Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "19131")]
        public void BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP_Actuary()
        {
#line 222
this.BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP("Actuary", "3", "Inventory or Stock", "19131", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_7 TEJOBSITE Do Not Recommend BOP: App Development")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "App Development")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "App Development")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "27513")]
        public void BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP_AppDevelopment()
        {
#line 222
this.BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP("App Development", "1", "Tools or Equipment", "27513", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_7 TEJOBSITE Do Not Recommend BOP: Auditor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Auditor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Auditor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture;Inventory or Stock;Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "80001")]
        public void BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP_Auditor()
        {
#line 222
this.BOP_GL_Rule_7TEJOBSITEDoNotRecommendBOP("Auditor", "0", "Furniture;Inventory or Stock;Tools or Equipment", "80001", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GL_Rule_8RecommendGLOnly(string industry, string emp, string location, string ool, string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("location", location);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL_Rule_8 Recommend GL only", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 240
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 241
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1658 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1658.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            string.Format("{0}", location),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 242
 testRunner.And("user starts a quote with:", ((string)(null)), table1658, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1659 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1659.AddRow(new string[] {
                            "GL",
                            "Available and Recommended"});
                table1659.AddRow(new string[] {
                            "BP",
                            "Not Available"});
#line 245
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1659, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_8 Recommend GL only: Car Wash: Full Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Car Wash: Full Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Car Wash: Full Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business Out of My Home")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "48001")]
        public void BOP_GL_Rule_8RecommendGLOnly_CarWashFullService()
        {
#line 240
this.BOP_GL_Rule_8RecommendGLOnly("Car Wash: Full Service", "0", "I Run My Business Out of My Home", "", "48001", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL_Rule_8 Recommend GL only: Hospital: Veterinary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Hospital: Veterinary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Hospital: Veterinary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Work at a Job Site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "02212")]
        public void BOP_GL_Rule_8RecommendGLOnly_HospitalVeterinary()
        {
#line 240
this.BOP_GL_Rule_8RecommendGLOnly("Hospital: Veterinary", "0", "I Work at a Job Site", "", "02212", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gate 9 - Recommend BOP")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        public void Gate9_RecommendBOP()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gate 9 - Recommend BOP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 256
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 257
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1660 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1660.AddRow(new string[] {
                            "Doughnut Shop",
                            "0",
                            "I Lease a Space From Others",
                            "",
                            "55029"});
#line 258
 testRunner.And("user starts a quote with:", ((string)(null)), table1660, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1661 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1661.AddRow(new string[] {
                            "GL",
                            "Available and Not Recommended"});
                table1661.AddRow(new string[] {
                            "BP",
                            "Available and Recommended"});
#line 261
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1661, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry(string industry, string emp, string location, string ool, string zip, string wc, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("location", location);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            argumentsOfScenario.Add("wc", wc);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC_Rule_1 WC available but not recommended based on industry", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 272
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 273
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1662 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1662.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            string.Format("{0}", location),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 274
 testRunner.And("user starts a quote with:", ((string)(null)), table1662, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1663 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1663.AddRow(new string[] {
                            "WC",
                            string.Format("{0}", wc)});
#line 277
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1663, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_1 WC available but not recommended based on industry: Retail Store: Autom" +
            "otive Parts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Retail Store: Automotive Parts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Retail Store: Automotive Parts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business Out of My Home")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "24606")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry_RetailStoreAutomotiveParts()
        {
#line 272
this.WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry("Retail Store: Automotive Parts", "0", "I Run My Business Out of My Home", "", "24606", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_1 WC available but not recommended based on industry: Tutoring Center")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Tutoring Center")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Tutoring Center")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Lease a Space From Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "33177")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry_TutoringCenter()
        {
#line 272
this.WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry("Tutoring Center", "0", "I Lease a Space From Others", "", "33177", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_1 WC available but not recommended based on industry: Surgeon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Surgeon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Surgeon")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Work at a Job Site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "03751")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry_Surgeon()
        {
#line 272
this.WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry("Surgeon", "0", "I Work at a Job Site", "", "03751", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_1 WC available but not recommended based on industry: Orchestra")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Orchestra")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Orchestra")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business From Property I Own")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "40855")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry_Orchestra()
        {
#line 272
this.WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry("Orchestra", "0", "I Run My Business From Property I Own", "", "40855", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_1 WC available but not recommended based on industry: Recording Equipment" +
            " Manufacturing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Recording Equipment Manufacturing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Recording Equipment Manufacturing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Own a Property & Lease To Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "99903")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry_RecordingEquipmentManufacturing()
        {
#line 272
this.WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry("Recording Equipment Manufacturing", "0", "I Own a Property & Lease To Others", "", "99903", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_1 WC available but not recommended based on industry: Deli: with table se" +
            "rvice and deep frying")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Deli: with table service and deep frying")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Deli: with table service and deep frying")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business Out of My Home")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "62011")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry_DeliWithTableServiceAndDeepFrying()
        {
#line 272
this.WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry("Deli: with table service and deep frying", "0", "I Run My Business Out of My Home", "", "62011", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_1 WC available but not recommended based on industry: Supermarket: no gas" +
            " sales")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Supermarket: no gas sales")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Supermarket: no gas sales")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Lease a Space From Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "39286")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry_SupermarketNoGasSales()
        {
#line 272
this.WC_Rule_1WCAvailableButNotRecommendedBasedOnIndustry("Supermarket: no gas sales", "0", "I Lease a Space From Others", "", "39286", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        public virtual void WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry(string industry, string emp, string location, string home, string ool, string zip, string wc, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("location", location);
            argumentsOfScenario.Add("home", home);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            argumentsOfScenario.Add("wc", wc);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC_Rule_2 WC available but not recommended based on subindustry", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 292
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 293
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1664 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Client Home",
                            "Own or Lease",
                            "ZIP Code"});
                table1664.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            string.Format("{0}", location),
                            string.Format("{0}", home),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 294
 testRunner.And("user starts a quote with:", ((string)(null)), table1664, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1665 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1665.AddRow(new string[] {
                            "WC",
                            string.Format("{0}", wc)});
#line 297
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1665, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_2 WC available but not recommended based on subindustry: Appraiser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Appraiser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Appraiser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Work at a Job Site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "89106")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry_Appraiser()
        {
#line 292
this.WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry("Appraiser", "0", "I Work at a Job Site", "", "", "89106", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_2 WC available but not recommended based on subindustry: Legal Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Legal Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Legal Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business From Property I Own")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "28345")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry_LegalServices()
        {
#line 292
this.WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry("Legal Services", "0", "I Run My Business From Property I Own", "", "", "28345", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_2 WC available but not recommended based on subindustry: Bookkeeping")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bookkeeping")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Bookkeeping")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Own a Property & Lease To Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "28097")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry_Bookkeeping()
        {
#line 292
this.WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry("Bookkeeping", "0", "I Own a Property & Lease To Others", "", "", "28097", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_2 WC available but not recommended based on subindustry: Barber Shops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Barber Shops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Barber Shops")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business Out of My Home")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "57342")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry_BarberShops()
        {
#line 292
this.WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry("Barber Shops", "0", "I Run My Business Out of My Home", "No", "", "57342", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_2 WC available but not recommended based on subindustry: Property Managem" +
            "ent: Rowhouse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Property Management: Rowhouse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Property Management: Rowhouse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Lease a Space From Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "47236")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry_PropertyManagementRowhouse()
        {
#line 292
this.WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry("Property Management: Rowhouse", "0", "I Lease a Space From Others", "", "", "47236", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_Rule_2 WC available but not recommended based on subindustry: Janitorial Servi" +
            "ces: 50% or More Residential")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Janitorial Services: 50% or More Residential")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Janitorial Services: 50% or More Residential")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Work at a Job Site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:home", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "29940")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:wc", "Available and Not Recommended")]
        public void WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry_JanitorialServices50OrMoreResidential()
        {
#line 292
this.WC_Rule_2WCAvailableButNotRecommendedBasedOnSubindustry("Janitorial Services: 50% or More Residential", "0", "I Work at a Job Site", "", "", "29940", "Available and Not Recommended", ((string[])(null)));
#line hidden
        }
        
        public virtual void InventoryOrStock(string industry, string emp, string location, string ool, string zip, string gl, string bop, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("location", location);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            argumentsOfScenario.Add("gl", gl);
            argumentsOfScenario.Add("bop", bop);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inventory or Stock", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 312
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 313
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1666 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1666.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            string.Format("{0}", location),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 314
 testRunner.And("user starts a quote with:", ((string)(null)), table1666, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1667 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1667.AddRow(new string[] {
                            "GL",
                            string.Format("{0}", gl)});
                table1667.AddRow(new string[] {
                            "BP",
                            string.Format("{0}", bop)});
#line 317
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1667, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Inventory or Stock: Accountant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Accountant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Accountant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Lease a Space From Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Inventory or Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "55001")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Available and Not Recommended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Available and Recommended")]
        public void InventoryOrStock_Accountant()
        {
#line 312
this.InventoryOrStock("Accountant", "2", "I Lease a Space From Others", "Inventory or Stock", "55001", "Available and Not Recommended", "Available and Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Inventory or Stock: Drywall Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Drywall Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Drywall Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Lease a Space From Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Inventory or Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "37066")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Available and Not Recommended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Available and Recommended")]
        public void InventoryOrStock_DrywallContractor()
        {
#line 312
this.InventoryOrStock("Drywall Contractor", "2", "I Lease a Space From Others", "Inventory or Stock", "37066", "Available and Not Recommended", "Available and Recommended", ((string[])(null)));
#line hidden
        }
        
        public virtual void PieChart_DiscontinuedIndustries(string industry, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pie Chart _ Discontinued Industries", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 328
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 329
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 330
 testRunner.Given("user has navigated to the following URL within the host environment: get-a-quote/" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 331
 testRunner.Then(string.Format("user verifies that the {0} industry is not in the list of available industries", industry), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Pie Chart _ Discontinued Industries: Highway, Street, and Bridge Construction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Highway, Street, and Bridge Construction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Highway, Street, and Bridge Construction")]
        public void PieChart_DiscontinuedIndustries_HighwayStreetAndBridgeConstruction()
        {
#line 328
this.PieChart_DiscontinuedIndustries("Highway, Street, and Bridge Construction", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Pie Chart _ Discontinued Industries: General Contractor: We do some work ourselve" +
            "s")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "General Contractor: We do some work ourselves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "General Contractor: We do some work ourselves")]
        public void PieChart_DiscontinuedIndustries_GeneralContractorWeDoSomeWorkOurselves()
        {
#line 328
this.PieChart_DiscontinuedIndustries("General Contractor: We do some work ourselves", ((string[])(null)));
#line hidden
        }
        
        public virtual void PieChart_IneligibleIndustriesForCAInNJ(string industry, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pie Chart _ Ineligible Industries For CA In NJ", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 339
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 340
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1668 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1668.AddRow(new string[] {
                            string.Format("{0}", industry),
                            "0",
                            "I Work at a Job Site",
                            "Vehicles;",
                            "08701"});
#line 341
 testRunner.And("user starts a quote with:", ((string)(null)), table1668, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1669 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1669.AddRow(new string[] {
                            "CA",
                            "Not Available"});
#line 344
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1669, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Pie Chart _ Ineligible Industries For CA In NJ: Construction: General Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Construction: General Contractor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Construction: General Contractor")]
        public void PieChart_IneligibleIndustriesForCAInNJ_ConstructionGeneralContractor()
        {
#line 339
this.PieChart_IneligibleIndustriesForCAInNJ("Construction: General Contractor", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Pie Chart _ Ineligible Industries For CA In NJ: Construction: Handyman")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Construction: Handyman")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Construction: Handyman")]
        public void PieChart_IneligibleIndustriesForCAInNJ_ConstructionHandyman()
        {
#line 339
this.PieChart_IneligibleIndustriesForCAInNJ("Construction: Handyman", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Pie Chart _ Ineligible Industries For CA In NJ: Construction: Specialty; Carpentr" +
            "y")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Construction: Specialty; Carpentry")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Construction: Specialty; Carpentry")]
        public void PieChart_IneligibleIndustriesForCAInNJ_ConstructionSpecialtyCarpentry()
        {
#line 339
this.PieChart_IneligibleIndustriesForCAInNJ("Construction: Specialty; Carpentry", ((string[])(null)));
#line hidden
        }
        
        public virtual void BOP_GLForAddedTruckerClassMapping(string industry, string emp, string location, string ool, string zip, string gl, string bop, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit",
                    "Smoke",
                    "PieChart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("industry", industry);
            argumentsOfScenario.Add("emp", emp);
            argumentsOfScenario.Add("location", location);
            argumentsOfScenario.Add("ool", ool);
            argumentsOfScenario.Add("zip", zip);
            argumentsOfScenario.Add("gl", gl);
            argumentsOfScenario.Add("bop", bop);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BOP_GL for added Trucker class mapping", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 355
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 356
 testRunner.Given("user will land on path with recommendation view: Pie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1670 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code"});
                table1670.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", emp),
                            string.Format("{0}", location),
                            string.Format("{0}", ool),
                            string.Format("{0}", zip)});
#line 357
 testRunner.And("user starts a quote with:", ((string)(null)), table1670, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1671 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB",
                            "Status"});
                table1671.AddRow(new string[] {
                            "GL",
                            string.Format("{0}", gl)});
                table1671.AddRow(new string[] {
                            "BP",
                            string.Format("{0}", bop)});
#line 360
 testRunner.And("seeks to validate the Pie Chart Page with:", ((string)(null)), table1671, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL for added Trucker class mapping: Milk Hauling: over 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Milk Hauling: over 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Milk Hauling: over 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Own a Property & Lease to Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Not Available")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Available and Recommended")]
        public void BOP_GLForAddedTruckerClassMapping_MilkHaulingOver300Miles()
        {
#line 355
this.BOP_GLForAddedTruckerClassMapping("Milk Hauling: over 300 miles", "0", "I Own a Property & Lease to Others", "", "90012", "Not Available", "Available and Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL for added Trucker class mapping: Brine Hauling: Over 300 Miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Brine Hauling: Over 300 Miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Brine Hauling: Over 300 Miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run My Business From Property I Own")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Not Available")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Available and Recommended")]
        public void BOP_GLForAddedTruckerClassMapping_BrineHaulingOver300Miles()
        {
#line 355
this.BOP_GLForAddedTruckerClassMapping("Brine Hauling: Over 300 Miles", "0", "I Run My Business From Property I Own", "", "90012", "Not Available", "Available and Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL for added Trucker class mapping: Automobile Driveaway Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Automobile Driveaway Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Automobile Driveaway Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run my Business Out of My Home")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture;Inventory or Stock;Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Available and Not Recommended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Available and Recommended")]
        public void BOP_GLForAddedTruckerClassMapping_AutomobileDriveawayService()
        {
#line 355
this.BOP_GLForAddedTruckerClassMapping("Automobile Driveaway Service", "0", "I Run my Business Out of My Home", "Furniture;Inventory or Stock;Tools or Equipment", "90012", "Available and Not Recommended", "Available and Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL for added Trucker class mapping: Bulk Hauling: under 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Bulk Hauling: under 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Bulk Hauling: under 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Work at a Job Site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "Furniture;Inventory or Stock;Tools or Equipment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Available and Not Recommended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Available and Recommended")]
        public void BOP_GLForAddedTruckerClassMapping_BulkHaulingUnder300Miles()
        {
#line 355
this.BOP_GLForAddedTruckerClassMapping("Bulk Hauling: under 300 miles", "0", "I Work at a Job Site", "Furniture;Inventory or Stock;Tools or Equipment", "90012", "Available and Not Recommended", "Available and Recommended", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL for added Trucker class mapping: Fedex Delivery Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Fedex Delivery Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Fedex Delivery Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Run my Business Out of My Home")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Available and Recommended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Not Available")]
        public void BOP_GLForAddedTruckerClassMapping_FedexDeliveryService()
        {
#line 355
this.BOP_GLForAddedTruckerClassMapping("Fedex Delivery Service", "0", "I Run my Business Out of My Home", "", "90012", "Available and Recommended", "Not Available", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL for added Trucker class mapping: Newspaper Delivery")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Newspaper Delivery")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Newspaper Delivery")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Work at a Job Site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Available and Recommended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Not Available")]
        public void BOP_GLForAddedTruckerClassMapping_NewspaperDelivery()
        {
#line 355
this.BOP_GLForAddedTruckerClassMapping("Newspaper Delivery", "0", "I Work at a Job Site", "", "90012", "Available and Recommended", "Not Available", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BOP_GL for added Trucker class mapping: Logistics Services: own trucks that haul")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PieChartAppearance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PieChart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Logistics Services: own trucks that haul")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:industry", "Logistics Services: own trucks that haul")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emp", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:location", "I Lease a Space From Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ool", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:zip", "90012")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gl", "Available and Not Recommended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:bop", "Available and Recommended")]
        public void BOP_GLForAddedTruckerClassMapping_LogisticsServicesOwnTrucksThatHaul()
        {
#line 355
this.BOP_GLForAddedTruckerClassMapping("Logistics Services: own trucks that haul", "0", "I Lease a Space From Others", "", "90012", "Available and Not Recommended", "Available and Recommended", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
