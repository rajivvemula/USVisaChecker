// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.Unit.CA
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_FMCSAQuestionDefault_UFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_FMCSAQuestionDefault_U.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Unit/CA", "CA_FMCSAQuestionDefault_U", @"Verifying that the ""Do you have or plan on applying for an operating authority from the Federal Motor Carrier Safety Administration (FMCSA)?"" question has the yes answer set by default if either of the following statements is true:
    a.Auto Industry equals 'For-Hire Trucking' AND
    b.GVW of any vehicle (non-trailer) is 10,001 lbs OR more or there is at least one Truck Tractor body Subcategory AND 
    c.radius is either 301 to 500 miles or 501 miles OR more or ""Do you participate in a delivery service on behalf of Amazon.com, Inc.?"" = Yes", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_FMCSAQuestionDefault_U")))
            {
                global::ApolloQAAutomation.Features.Unit.CA.CA_FMCSAQuestionDefault_UFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA FMCSA Question Default with furthest any vehicle travels is between 301 to 500" +
            " miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_FMCSAQuestionDefault_U")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public void CAFMCSAQuestionDefaultWithFurthestAnyVehicleTravelsIsBetween301To500Miles()
        {
            string[] tagsOfScenario = new string[] {
                    "CA",
                    "Unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA FMCSA Question Default with furthest any vehicle travels is between 301 to 500" +
                    " miles", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1312 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1312.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "95204",
                            "CA"});
#line 10
 testRunner.Given("user starts a quote with:", ((string)(null)), table1312, "Given ");
#line hidden
#line 13
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1313 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table1313.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 14
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table1313, "Then ");
#line hidden
#line 17
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1314 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table1314.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "1687 N California St",
                            "",
                            "Stockton",
                            ""});
#line 19
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table1314, "And ");
#line hidden
#line 22
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1315 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table1315.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "California",
                            "2800"});
#line 24
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table1315, "And ");
#line hidden
#line 27
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1316 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "Accident",
                            "DLNumber"});
                table1316.AddRow(new string[] {
                            "Donald",
                            "Duck",
                            "CA",
                            "03/13/1988",
                            "Yes 3 or more years",
                            "No",
                            ""});
#line 29
 testRunner.And("user creates a driver with these values:", ((string)(null)), table1316, "And ");
#line hidden
#line 32
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1317 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1317.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table1317.AddRow(new string[] {
                            "Do you have any active Trailer Interchange Agreements?",
                            "No"});
                table1317.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "301 to 500 miles"});
                table1317.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table1317.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table1317.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table1317.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table1317.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table1317.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table1317.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "Building Materials;Logs (Forestry);Mobile/Manufactured Homes;Sand & Gravel"});
                table1317.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table1317.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "Yes"});
                table1317.AddRow(new string[] {
                            "Do you haul any anhydrous ammonia or ammonium nitrate?",
                            "No"});
                table1317.AddRow(new string[] {
                            "Do you haul any poisonous, toxic, or infectious substances?",
                            "No"});
                table1317.AddRow(new string[] {
                            "Do you haul any radioactive materials?",
                            "No"});
                table1317.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table1317.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "Yes"});
                table1317.AddRow(new string[] {
                            "Have you added all Owner-Operator vehicles to this quote?",
                            "Yes"});
                table1317.AddRow(new string[] {
                            "What is the annual cost for vehicles that you rent, hire, or borrow?",
                            "2800"});
                table1317.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "Yes"});
                table1317.AddRow(new string[] {
                            "Enter the USDOT number",
                            "3523332"});
                table1317.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Federal Motor" +
                                " Carrier Safety Administration (FMCSA)?",
                            "Yes"});
                table1317.AddRow(new string[] {
                            "Which types of authority from FMCSA do you have or plan on having?",
                            "Broker;Contract Carrier"});
                table1317.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the California De" +
                                "partment of Motor Vehicles?",
                            "Yes"});
                table1317.AddRow(new string[] {
                            "Enter your California Motor Carrier #:",
                            "BPYCKN"});
                table1317.AddRow(new string[] {
                            "Do the owner(s) of this business have a combined majority ownership in any other " +
                                "transportation business?",
                            "No"});
#line 33
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table1317, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA FMCSA Question Default with furthest any vehicle travels is more than 501 mile" +
            "s")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_FMCSAQuestionDefault_U")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public void CAFMCSAQuestionDefaultWithFurthestAnyVehicleTravelsIsMoreThan501Miles()
        {
            string[] tagsOfScenario = new string[] {
                    "CA",
                    "Unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA FMCSA Question Default with furthest any vehicle travels is more than 501 mile" +
                    "s", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1318 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1318.AddRow(new string[] {
                            "Hot Shot Trucking",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "95204",
                            "CA"});
#line 64
 testRunner.Given("user starts a quote with:", ((string)(null)), table1318, "Given ");
#line hidden
#line 67
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1319 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table1319.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 68
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table1319, "Then ");
#line hidden
#line 71
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1320 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table1320.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "1687 N California St",
                            "",
                            "Stockton",
                            ""});
#line 73
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table1320, "And ");
#line hidden
#line 76
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1321 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table1321.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "California",
                            "2800"});
#line 78
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table1321, "And ");
#line hidden
#line 81
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1322 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "Accident",
                            "DLNumber"});
                table1322.AddRow(new string[] {
                            "Donald",
                            "Duck",
                            "CA",
                            "03/13/1988",
                            "Yes 3 or more years",
                            "No",
                            ""});
#line 83
 testRunner.And("user creates a driver with these values:", ((string)(null)), table1322, "And ");
#line hidden
#line 86
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1323 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1323.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table1323.AddRow(new string[] {
                            "Do you have any active Trailer Interchange Agreements?",
                            "No"});
                table1323.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "501 miles or more"});
                table1323.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table1323.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table1323.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table1323.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table1323.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table1323.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table1323.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "Building Materials;Logs (Forestry);Mobile/Manufactured Homes;Sand & Gravel"});
                table1323.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table1323.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "Yes"});
                table1323.AddRow(new string[] {
                            "Do you haul any anhydrous ammonia or ammonium nitrate?",
                            "No"});
                table1323.AddRow(new string[] {
                            "Do you haul any poisonous, toxic, or infectious substances?",
                            "No"});
                table1323.AddRow(new string[] {
                            "Do you haul any radioactive materials?",
                            "No"});
                table1323.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table1323.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "Yes"});
                table1323.AddRow(new string[] {
                            "Have you added all Owner-Operator vehicles to this quote?",
                            "Yes"});
                table1323.AddRow(new string[] {
                            "What is the annual cost for vehicles that you rent, hire, or borrow?",
                            "2800"});
                table1323.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "Yes"});
                table1323.AddRow(new string[] {
                            "Enter the USDOT number",
                            "3523332"});
                table1323.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Federal Motor" +
                                " Carrier Safety Administration (FMCSA)?",
                            "Yes"});
                table1323.AddRow(new string[] {
                            "Which types of authority from FMCSA do you have or plan on having?",
                            "Broker;Contract Carrier"});
                table1323.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the California De" +
                                "partment of Motor Vehicles?",
                            "Yes"});
                table1323.AddRow(new string[] {
                            "Enter your California Motor Carrier #:",
                            "BPYCKN"});
                table1323.AddRow(new string[] {
                            "Do the owner(s) of this business have a combined majority ownership in any other " +
                                "transportation business?",
                            "No"});
#line 87
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table1323, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA FMCSA Question Default with Amazon Delivery service question as Yes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_FMCSAQuestionDefault_U")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        public void CAFMCSAQuestionDefaultWithAmazonDeliveryServiceQuestionAsYes()
        {
            string[] tagsOfScenario = new string[] {
                    "CA",
                    "Unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA FMCSA Question Default with Amazon Delivery service question as Yes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1324 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1324.AddRow(new string[] {
                            "Trucking: Retail to Homes; No Furniture or Mattress",
                            "2",
                            "I Run My Business From Property I Own",
                            "Vehicles",
                            "60634",
                            "CA"});
#line 118
 testRunner.Given("user starts a quote with:", ((string)(null)), table1324, "Given ");
#line hidden
#line 121
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1325 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table1325.AddRow(new string[] {
                            "",
                            "",
                            ""});
#line 122
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table1325, "Then ");
#line hidden
#line 125
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1326 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table1326.AddRow(new string[] {
                            "2012",
                            "Corporation",
                            "3622 N Newcastle Ave",
                            "",
                            "Chicago",
                            ""});
#line 127
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table1326, "And ");
#line hidden
#line 130
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1327 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Vehicle Worth"});
                table1327.AddRow(new string[] {
                            "1M1AE07Y63W014598",
                            "Illinois",
                            "2800"});
#line 132
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table1327, "And ");
#line hidden
#line 135
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1328 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table1328.AddRow(new string[] {
                            "Sol",
                            "Badguy",
                            "IL",
                            "03/13/1988",
                            "Yes 3 or more years",
                            "",
                            "",
                            "",
                            "Yes",
                            "A56712812351"});
#line 137
 testRunner.And("user creates a driver with these values:", ((string)(null)), table1328, "And ");
#line hidden
#line 140
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
 testRunner.Then("user verifies the appearance of the Drivers Incidents page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1329 = new TechTalk.SpecFlow.Table(new string[] {
                            "Driver",
                            "Date",
                            "Incident Type",
                            "At Fault"});
                table1329.AddRow(new string[] {
                            "Sol Badguy",
                            "11/11/2021",
                            "Accident",
                            "Yes"});
#line 142
 testRunner.Then("user adds incidents with the following values:", ((string)(null)), table1329, "Then ");
#line hidden
#line 145
 testRunner.Then("user continues to the Operations page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1330 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1330.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table1330.AddRow(new string[] {
                            "Do you participate in a delivery service on behalf of Amazon.com, Inc.?",
                            "Yes"});
                table1330.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table1330.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "Yes"});
                table1330.AddRow(new string[] {
                            "Enter the USDOT number",
                            "3523332"});
                table1330.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Federal Motor" +
                                " Carrier Safety Administration (FMCSA)?",
                            "Yes"});
                table1330.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do you have any active Trailer Interchange Agreements?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table1330.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table1330.AddRow(new string[] {
                            "I agree to submit proof of insurance claims history, also known as loss runs, for" +
                                " the last 3 years within 30 days of the effective date of the policy",
                            "true"});
                table1330.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            ""});
                table1330.AddRow(new string[] {
                            "Do you haul large equipment or machinery?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do you have or plan on applying for an operating authority from the Illinois Comm" +
                                "erce Commission?",
                            "No"});
                table1330.AddRow(new string[] {
                            "Do the owner(s) of this business have a combined majority ownership in any other " +
                                "transportation business?",
                            "No"});
#line 146
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table1330, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
