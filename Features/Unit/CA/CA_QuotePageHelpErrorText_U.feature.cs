// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.Unit.CA
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CA_QuotePageHelpErrorText_UFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CA_QuotePageHelpErrorText_U.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Unit/CA", "CA_QuotePageHelpErrorText_U", "Testing the Save for Later modal as well as completing a Illinois run and validat" +
                    "es the CA Quote Page Help Error Text help on the Quote page", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CA_QuotePageHelpErrorText_U")))
            {
                global::ApolloQAAutomation.Features.Unit.CA.CA_QuotePageHelpErrorText_UFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CAQuotePageHelpErrorTextUnit(string industry, string questionShouldBeSkipped, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CA",
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Industry", industry);
            argumentsOfScenario.Add("QuestionShouldBeSkipped", questionShouldBeSkipped);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA Quote Page Help Error Text Unit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("Question {0} skipped", questionShouldBeSkipped), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1477 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1477.AddRow(new string[] {
                            string.Format("{0}", industry),
                            "0",
                            "I Lease a Space From Others",
                            "Vehicles",
                            "65781",
                            "CA"});
#line 8
 testRunner.And("user starts a quote with:", ((string)(null)), table1477, "And ");
#line hidden
#line 11
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1478 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table1478.AddRow(new string[] {
                            "TEST CA AUTH QUOTE",
                            "",
                            ""});
#line 12
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table1478, "Then ");
#line hidden
#line 15
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1479 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table1479.AddRow(new string[] {
                            "2005",
                            "Individual/Sole Proprietor",
                            "109 Long Dr",
                            "",
                            "Willard",
                            ""});
#line 17
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table1479, "And ");
#line hidden
#line 20
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1480 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Plowing Snow"});
                table1480.AddRow(new string[] {
                            "3FRXF7FE0FV662379",
                            "Missouri",
                            "No"});
#line 22
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table1480, "And ");
#line hidden
#line 25
 testRunner.Then("user adds another vehicle or trailer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1481 = new TechTalk.SpecFlow.Table(new string[] {
                            "VIN",
                            "Parking Address",
                            "Plowing Snow"});
                table1481.AddRow(new string[] {
                            "1M1AW01X4BM052306",
                            "Missouri",
                            "No"});
#line 26
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table1481, "And ");
#line hidden
#line 29
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1482 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "Accident",
                            "DLNumber"});
                table1482.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "MO",
                            "04/11/1981",
                            "Yes 3 or more years",
                            "No",
                            "B108210006"});
#line 31
 testRunner.And("user creates a driver with these values:", ((string)(null)), table1482, "And ");
#line hidden
#line 34
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1483 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1483.AddRow(new string[] {
                            "Do you haul intermodal containers?",
                            "No"});
                table1483.AddRow(new string[] {
                            "Do you have any active Trailer Interchange Agreements?",
                            "Yes"});
                table1483.AddRow(new string[] {
                            "Is your business on call 24/7?",
                            "No"});
                table1483.AddRow(new string[] {
                            "Does your business also have a repair shop, impound lot, or salvage yard?",
                            "No we only provide towing or roadside assistance services"});
                table1483.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "301 to 500 miles"});
                table1483.AddRow(new string[] {
                            "Do you haul any fine art or jewelry?",
                            "No"});
                table1483.AddRow(new string[] {
                            "Do you provide residential moving services?",
                            "No"});
                table1483.AddRow(new string[] {
                            "Does your business engage in team driving?",
                            "No - one driver per haul"});
                table1483.AddRow(new string[] {
                            "Do any of your vehicles travel to Mexico?",
                            "No"});
                table1483.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
                table1483.AddRow(new string[] {
                            "Do you haul any of these? Check all that apply:",
                            "General Freight"});
                table1483.AddRow(new string[] {
                            "Do you haul large equipment or machinery requiring chains to secure in transit?",
                            "No"});
                table1483.AddRow(new string[] {
                            "Do you haul any hazardous materials?",
                            "No"});
                table1483.AddRow(new string[] {
                            "Do you rent any vehicles?",
                            "No"});
                table1483.AddRow(new string[] {
                            "Do you use any Owner-Operators?",
                            "No"});
                table1483.AddRow(new string[] {
                            "Does your business have a USDOT Number?",
                            "No"});
#line 35
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table1483, "Then ");
#line hidden
#line 53
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1484 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1484.AddRow(new string[] {
                            "First Name",
                            "TEST FN"});
                table1484.AddRow(new string[] {
                            "Last Name",
                            "TEST LN"});
                table1484.AddRow(new string[] {
                            "Business Email",
                            "QAAutomation@biberk.com"});
                table1484.AddRow(new string[] {
                            "Business Phone",
                            "(657) 478-4378"});
                table1484.AddRow(new string[] {
                            "Business Website",
                            ""});
                table1484.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table1484.AddRow(new string[] {
                            "Want Save Money",
                            "Yes"});
                table1484.AddRow(new string[] {
                            "Owner\'s First Name",
                            "TEST FN"});
                table1484.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "TEST LN"});
                table1484.AddRow(new string[] {
                            "Owner\'s Address",
                            "109 Long Dr"});
                table1484.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table1484.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "65781"});
                table1484.AddRow(new string[] {
                            "Owner\'s City",
                            "Willard"});
                table1484.AddRow(new string[] {
                            "Owner\'s State",
                            "MO"});
#line 55
 testRunner.And("user enters contact information:", ((string)(null)), table1484, "And ");
#line hidden
#line 71
 testRunner.Then("user verifies the appearance of the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.Then("user clicks continue from the Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.Then("user verifies the appearance of the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.Then("user verifies the appearance of the help text on the Quote Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Quote Page Help Error Text Unit: Towing Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_QuotePageHelpErrorText_U")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Towing Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Industry", "Towing Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:QuestionShouldBeSkipped", "Should Not Be")]
        public void CAQuotePageHelpErrorTextUnit_TowingServices()
        {
#line 6
this.CAQuotePageHelpErrorTextUnit("Towing Services", "Should Not Be", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA Quote Page Help Error Text Unit: Trucking: Local Hauling: less than 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CA_QuotePageHelpErrorText_U")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Trucking: Local Hauling: less than 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Industry", "Trucking: Local Hauling: less than 300 miles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:QuestionShouldBeSkipped", "Should Be")]
        public void CAQuotePageHelpErrorTextUnit_TruckingLocalHaulingLessThan300Miles()
        {
#line 6
this.CAQuotePageHelpErrorTextUnit("Trucking: Local Hauling: less than 300 miles", "Should Be", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
