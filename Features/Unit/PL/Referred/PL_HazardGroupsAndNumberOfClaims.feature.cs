// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.Unit.PL.Referred
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PL_HazardGroupsAndNumberOfClaimsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PL_HazardGroupsAndNumberOfClaims.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Unit/PL/Referred", "PL_HazardGroupsAndNumberOfClaims", "Refer for number of Claims = 1\r\nDecline for number of Claims >= 2", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PL_HazardGroupsAndNumberOfClaims")))
            {
                global::ApolloQAAutomation.Features.Unit.PL.Referred.PL_HazardGroupsAndNumberOfClaimsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify PL is Refer with 1 claim for any Hazard Group")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PL_HazardGroupsAndNumberOfClaims")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Referred")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NY")]
        public void VerifyPLIsReferWith1ClaimForAnyHazardGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "PL",
                    "Unit",
                    "Referred",
                    "NY"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify PL is Refer with 1 claim for any Hazard Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1811 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1811.AddRow(new string[] {
                            "Resume Consulting",
                            "1",
                            "I Lease a Space From Others",
                            "",
                            "10001",
                            "PL"});
#line 8
 testRunner.Given("user starts a quote with:", ((string)(null)), table1811, "Given ");
#line hidden
#line 11
 testRunner.Then("user verifies the appearance of the PL A Quick Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1812 = new TechTalk.SpecFlow.Table(new string[] {
                            "Business Structure",
                            "Name of Business",
                            "DBA"});
                table1812.AddRow(new string[] {
                            "Corporation",
                            "Whitestone Titles",
                            "ROL"});
#line 12
 testRunner.Then("user fills out A Quick Introduction page with these values:", ((string)(null)), table1812, "Then ");
#line hidden
#line 15
 testRunner.Then("user verifies the appearance of the PL Business Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1813 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1813.AddRow(new string[] {
                            "What year was your business started?",
                            "2000"});
                table1813.AddRow(new string[] {
                            "What is your estimated gross annual revenue?",
                            "500000"});
                table1813.AddRow(new string[] {
                            "Do you use a written contract or statement of work (SOW)?",
                            "Never"});
#line 16
 testRunner.And("user fills out the PL Business Details page with these values:", ((string)(null)), table1813, "And ");
#line hidden
#line 21
 testRunner.And("user verifies the appearance of the PL Coverage Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1814 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1814.AddRow(new string[] {
                            "When should your policy start?",
                            ""});
                table1814.AddRow(new string[] {
                            "Do you currently have a Professional Liability (E&O) policy in effect?",
                            "Yes"});
                table1814.AddRow(new string[] {
                            "Does your current policy have a retroactive date?",
                            "No"});
                table1814.AddRow(new string[] {
                            "Which option best describes your current professional liability policy?",
                            "This was my first policy."});
                table1814.AddRow(new string[] {
                            "How many Professional Liability (E&O) claims have you had in the past 3 years, if" +
                                " any?",
                            "1"});
#line 22
 testRunner.And("user fills out the PL Coverage Details page with these values:", ((string)(null)), table1814, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1815 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1815.AddRow(new string[] {
                            "Do you provide staffing services?",
                            "No"});
                table1815.AddRow(new string[] {
                            "Do any volunteers give advice or provide care on your behalf?",
                            "No"});
                table1815.AddRow(new string[] {
                            "In the past 3 years, has any party threatened or made claims for damages or other" +
                                " legal remedies against you or against any business entity with which you or any" +
                                " other business owner have been associated as owner, principal, officer, or empl" +
                                "oyee?",
                            "No"});
#line 29
 testRunner.Then("user fills out the PL Your Services page", ((string)(null)), table1815, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1816 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1816.AddRow(new string[] {
                            "First Name",
                            "Marty"});
                table1816.AddRow(new string[] {
                            "Last Name",
                            "Mailbox"});
                table1816.AddRow(new string[] {
                            "Address",
                            "123 Fake st"});
                table1816.AddRow(new string[] {
                            "City",
                            "Manhattan"});
                table1816.AddRow(new string[] {
                            "Use as Mailing Address",
                            "Yes"});
                table1816.AddRow(new string[] {
                            "Email",
                            "test@biz.com"});
                table1816.AddRow(new string[] {
                            "Business Phone",
                            "3172491913"});
#line 34
 testRunner.Then("user fills out About You page with these values:", ((string)(null)), table1816, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1817 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1817.AddRow(new string[] {
                            "Business name",
                            "Whitestone Titles"});
                table1817.AddRow(new string[] {
                            "DBA",
                            "ROL"});
                table1817.AddRow(new string[] {
                            "Contact first name",
                            "Marty"});
                table1817.AddRow(new string[] {
                            "Contact last name",
                            "Mailbox"});
                table1817.AddRow(new string[] {
                            "Email",
                            "test@biz.com"});
                table1817.AddRow(new string[] {
                            "Phone",
                            "(317) 249-1913"});
#line 43
 testRunner.When("user fills out the PL refer page with these values:", ((string)(null)), table1817, "When ");
#line hidden
#line 51
 testRunner.Then("user verifies the PL refer confirmation appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify PL is Declined with 2 claims for any Hazard Group")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PL_HazardGroupsAndNumberOfClaims")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NV")]
        public void VerifyPLIsDeclinedWith2ClaimsForAnyHazardGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "PL",
                    "Unit",
                    "Declined",
                    "NV"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify PL is Declined with 2 claims for any Hazard Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1818 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1818.AddRow(new string[] {
                            "Appraiser",
                            "1",
                            "I Lease a Space From Others",
                            "",
                            "89109",
                            "PL"});
#line 55
 testRunner.Given("user starts a quote with:", ((string)(null)), table1818, "Given ");
#line hidden
#line 58
 testRunner.Then("user verifies the appearance of the PL A Quick Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1819 = new TechTalk.SpecFlow.Table(new string[] {
                            "Business Structure",
                            "Name of Business",
                            "DBA"});
                table1819.AddRow(new string[] {
                            "Corporation",
                            "Whitestone Titles",
                            "ROL"});
#line 59
 testRunner.Then("user fills out A Quick Introduction page with these values:", ((string)(null)), table1819, "Then ");
#line hidden
#line 62
 testRunner.Then("user verifies the appearance of the PL Business Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1820 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1820.AddRow(new string[] {
                            "What year was your business started?",
                            "2000"});
                table1820.AddRow(new string[] {
                            "What is your estimated gross annual revenue?",
                            "50000"});
#line 63
 testRunner.And("user fills out the PL Business Details page with these values:", ((string)(null)), table1820, "And ");
#line hidden
#line 67
 testRunner.And("user verifies the appearance of the PL Coverage Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1821 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1821.AddRow(new string[] {
                            "When should your policy start?",
                            ""});
                table1821.AddRow(new string[] {
                            "Do you currently have a Professional Liability (E&O) policy in effect?",
                            "Yes"});
                table1821.AddRow(new string[] {
                            "Does your current policy have a retroactive date?",
                            "No"});
                table1821.AddRow(new string[] {
                            "Which option best describes your current professional liability policy?",
                            "This was my first policy."});
                table1821.AddRow(new string[] {
                            "How many Professional Liability (E&O) claims have you had in the past 3 years, if" +
                                " any?",
                            "2"});
#line 68
 testRunner.And("user fills out the PL Coverage Details page with these values:", ((string)(null)), table1821, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1822 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1822.AddRow(new string[] {
                            "Do you act as a real estate agent/broker?",
                            "No"});
                table1822.AddRow(new string[] {
                            "In the past 3 years, has any party threatened or made claims for damages or other" +
                                " legal remedies against you or against any business entity with which you or any" +
                                " other business owner have been associated as owner, principal, officer, or empl" +
                                "oyee?",
                            "No"});
#line 75
 testRunner.Then("user fills out the PL Your Services page", ((string)(null)), table1822, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1823 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1823.AddRow(new string[] {
                            "First Name",
                            "Marty"});
                table1823.AddRow(new string[] {
                            "Last Name",
                            "Mailbox"});
                table1823.AddRow(new string[] {
                            "Address",
                            "123 Fake st"});
                table1823.AddRow(new string[] {
                            "City",
                            "Las Vegas"});
                table1823.AddRow(new string[] {
                            "Use as Mailing Address",
                            "Yes"});
                table1823.AddRow(new string[] {
                            "Email",
                            "test@biz.com"});
                table1823.AddRow(new string[] {
                            "Business Phone",
                            "3172491913"});
#line 79
 testRunner.Then("user fills out About You page with these values:", ((string)(null)), table1823, "Then ");
#line hidden
#line 88
 testRunner.Then("user verifies the PL decline page appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify PL is Declined with 2 or more claims for any Hazard Group")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PL_HazardGroupsAndNumberOfClaims")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MN")]
        public void VerifyPLIsDeclinedWith2OrMoreClaimsForAnyHazardGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "PL",
                    "Unit",
                    "Declined",
                    "MN"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify PL is Declined with 2 or more claims for any Hazard Group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1824 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1824.AddRow(new string[] {
                            "Reinsurance Brokerage",
                            "1",
                            "I Lease a Space From Others",
                            "",
                            "55406",
                            "PL"});
#line 92
 testRunner.Given("user starts a quote with:", ((string)(null)), table1824, "Given ");
#line hidden
#line 95
 testRunner.Then("user verifies the appearance of the PL A Quick Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1825 = new TechTalk.SpecFlow.Table(new string[] {
                            "Business Structure",
                            "Name of Business",
                            "DBA"});
                table1825.AddRow(new string[] {
                            "Corporation",
                            "Whitestone Titles",
                            "ROL"});
#line 96
 testRunner.Then("user fills out A Quick Introduction page with these values:", ((string)(null)), table1825, "Then ");
#line hidden
#line 99
 testRunner.Then("user verifies the appearance of the PL Business Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1826 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1826.AddRow(new string[] {
                            "What year was your business started?",
                            "2000"});
                table1826.AddRow(new string[] {
                            "What is your estimated gross annual revenue?",
                            "50000"});
#line 100
 testRunner.And("user fills out the PL Business Details page with these values:", ((string)(null)), table1826, "And ");
#line hidden
#line 104
 testRunner.And("user verifies the appearance of the PL Coverage Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1827 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1827.AddRow(new string[] {
                            "When should your policy start?",
                            ""});
                table1827.AddRow(new string[] {
                            "Do you currently have a Professional Liability (E&O) policy in effect?",
                            "Yes"});
                table1827.AddRow(new string[] {
                            "Does your current policy have a retroactive date?",
                            "No"});
                table1827.AddRow(new string[] {
                            "Which option best describes your current professional liability policy?",
                            "This was my first policy."});
                table1827.AddRow(new string[] {
                            "How many Professional Liability (E&O) claims have you had in the past 3 years, if" +
                                " any?",
                            "5+"});
#line 105
 testRunner.And("user fills out the PL Coverage Details page with these values:", ((string)(null)), table1827, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1828 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1828.AddRow(new string[] {
                            "In the past 3 years, has any party threatened or made claims for damages or other" +
                                " legal remedies against you or against any business entity with which you or any" +
                                " other business owner have been associated as owner, principal, officer, or empl" +
                                "oyee?",
                            "No"});
#line 112
 testRunner.Then("user fills out the PL Your Services page", ((string)(null)), table1828, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1829 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1829.AddRow(new string[] {
                            "First Name",
                            "Marty"});
                table1829.AddRow(new string[] {
                            "Last Name",
                            "Mailbox"});
                table1829.AddRow(new string[] {
                            "Address",
                            "123 Fake st"});
                table1829.AddRow(new string[] {
                            "City",
                            "Minneapolis"});
                table1829.AddRow(new string[] {
                            "Use as Mailing Address",
                            "Yes"});
                table1829.AddRow(new string[] {
                            "Email",
                            "test@biz.com"});
                table1829.AddRow(new string[] {
                            "Business Phone",
                            "3172491913"});
#line 115
 testRunner.Then("user fills out About You page with these values:", ((string)(null)), table1829, "Then ");
#line hidden
#line 124
 testRunner.Then("user verifies the PL decline page appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
