// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.Unit.PL
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PL_GenerateProposalEmail_CyberRE_UFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PL_GenerateProposalEmail_CyberRE_U.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Unit/PL", "PL_GenerateProposalEmail_CyberRE_U", "User Story 81898: Staging Regression | Create Test Case | PL | Generate Proposal " +
                    "Email | Cyber + Real Estate", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PL_GenerateProposalEmail_CyberRE_U")))
            {
                global::ApolloQAAutomation.Features.Unit.PL.PL_GenerateProposalEmail_CyberRE_UFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("PL Generate Proposal Email Cyber Real Estate issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PL_GenerateProposalEmail_CyberRE_U")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Cyber")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RealEstate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Issued")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Staging")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PA")]
        public void PLGenerateProposalEmailCyberRealEstateIssued()
        {
            string[] tagsOfScenario = new string[] {
                    "Cyber",
                    "RealEstate",
                    "Issued",
                    "Regression",
                    "PL",
                    "Service",
                    "Staging",
                    "PA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PL Generate Proposal Email Cyber Real Estate issued", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1736 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1736.AddRow(new string[] {
                            "Real Estate Agent",
                            "3",
                            "I Lease a Space From Others",
                            "",
                            "17404",
                            "PL"});
#line 7
 testRunner.Given("user starts a quote with:", ((string)(null)), table1736, "Given ");
#line hidden
#line 10
 testRunner.Then("user verifies the appearance of the PL A Quick Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1737 = new TechTalk.SpecFlow.Table(new string[] {
                            "Business Structure",
                            "Name of Business",
                            "Business Address",
                            "DBA",
                            "LLC"});
                table1737.AddRow(new string[] {
                            "Partnership",
                            "Test PL Cyber and Real Estate",
                            "1060 Church Rd",
                            "Test LLC in DBA",
                            "No"});
#line 11
 testRunner.Then("user fills out A Quick Introduction page with these values:", ((string)(null)), table1737, "Then ");
#line hidden
#line 14
 testRunner.Then("user verifies the appearance of the PL Business Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1738 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1738.AddRow(new string[] {
                            "What year was your business started?",
                            "2020"});
                table1738.AddRow(new string[] {
                            "What is your estimated gross annual revenue?",
                            "400,000"});
                table1738.AddRow(new string[] {
                            "Do you use a written contract or statement of work (SOW)?",
                            "Always"});
                table1738.AddRow(new string[] {
                            "Who signs off on the terms & conditions for written contracts or statements of wo" +
                                "rk (SOW)?",
                            "Outside"});
#line 15
 testRunner.Then("user fills out the PL Business Details page with these values:", ((string)(null)), table1738, "Then ");
#line hidden
#line 21
 testRunner.Then("user verifies the appearance of the PL Coverage Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1739 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1739.AddRow(new string[] {
                            "When should your policy start?",
                            ""});
                table1739.AddRow(new string[] {
                            "Do you currently have an Errors & Omissions policy in effect?",
                            "Yes"});
                table1739.AddRow(new string[] {
                            "Does your current policy have a retroactive date?",
                            "I Don\'t Know"});
                table1739.AddRow(new string[] {
                            "How many Professional Liability (E&O) claims have you had in the past 3 years, if" +
                                " any?",
                            "0"});
#line 22
 testRunner.Then("user fills out the PL Coverage Details page with these values:", ((string)(null)), table1739, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1740 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1740.AddRow(new string[] {
                            "Do you collect private data?",
                            "No"});
                table1740.AddRow(new string[] {
                            "What percentage of revenue comes from sales of commercial properties or vacant la" +
                                "nd?",
                            "1%-49%"});
                table1740.AddRow(new string[] {
                            "What percentage of revenue comes from short sales?",
                            "0%"});
                table1740.AddRow(new string[] {
                            "Does your business own any properties?",
                            "No"});
                table1740.AddRow(new string[] {
                            "Does your business manage any properties?",
                            "No"});
                table1740.AddRow(new string[] {
                            "Do you provide appraisals?",
                            "No"});
                table1740.AddRow(new string[] {
                            "Do you provide any title related services such as closing agent, escrow agent, ti" +
                                "tle abstractor, title agent, or title search?",
                            "No"});
                table1740.AddRow(new string[] {
                            "In the past 3 years, has any party threatened or made claims for damages or other" +
                                " legal remedies against you or against any business entity with which you or any" +
                                " other business owner have been associated as owner, principal, officer, or empl" +
                                "oyee?",
                            "No"});
#line 28
 testRunner.Then("user fills out the PL Your Services page", ((string)(null)), table1740, "Then ");
#line hidden
#line 38
 testRunner.Then("user verifies the appearance of the PL About You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1741 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1741.AddRow(new string[] {
                            "First Name",
                            "TestF"});
                table1741.AddRow(new string[] {
                            "Last Name",
                            "TestL"});
                table1741.AddRow(new string[] {
                            "Address",
                            "100 Test Road"});
                table1741.AddRow(new string[] {
                            "Apt/Suite",
                            ""});
                table1741.AddRow(new string[] {
                            "City",
                            "York"});
                table1741.AddRow(new string[] {
                            "Use as Mailing Address",
                            "Yes"});
                table1741.AddRow(new string[] {
                            "Email",
                            "Test@biBERK.com"});
                table1741.AddRow(new string[] {
                            "Business Phone",
                            "(123)123-1321"});
                table1741.AddRow(new string[] {
                            "Ext",
                            "1234"});
                table1741.AddRow(new string[] {
                            "Website/Social",
                            ""});
#line 39
 testRunner.Then("user fills out About You page with these values:", ((string)(null)), table1741, "Then ");
#line hidden
#line 51
 testRunner.Then("user verifies the appearance of the PL Summary page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("user verifies the following defualt PL quote values: Deductible PO, Limits PO, Li" +
                        "mits Agg, Plus Deductible PO, Plus Limits PO, Plus Limits Agg, Plus CL Agg", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.Then("user verifies that the following coverages are displayed in the details of their " +
                        "PL Plus Quote: E&O,Cyber,Real Estate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1742 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1742.AddRow(new string[] {
                            "Deductible PO",
                            "$5,000"});
                table1742.AddRow(new string[] {
                            "Limits PO",
                            "$300,000"});
                table1742.AddRow(new string[] {
                            "Limits Agg",
                            "$500,000"});
                table1742.AddRow(new string[] {
                            "Plus CL Agg",
                            "$1,000,000"});
#line 54
 testRunner.Then("user adjusts their  -  quote with these values:", ((string)(null)), table1742, "Then ");
#line hidden
#line 60
 testRunner.Then("user verifies the PL Email Your Quote modal appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.Then("user selects their Yearly - Plus Quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
