// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.Unit.Other
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DeclineTestFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "DeclineTest.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Unit/Other", "DeclineTest", "Just to test the updated mapings pages work; will delete after ADHOC run", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DeclineTest")))
            {
                global::BiBerkLOB.Features.Unit.Other.DeclineTestFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CA_Actor gets declined making a policy for California")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclineTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hospitality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Declined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Cali")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FMCSA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYADHOC")]
        public void CA_ActorGetsDeclinedMakingAPolicyForCalifornia()
        {
            string[] tagsOfScenario = new string[] {
                    "Hospitality",
                    "Declined",
                    "Regression",
                    "Cali",
                    "CA",
                    "FMCSA",
                    "SYADHOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CA_Actor gets declined making a policy for California", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1268 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1268.AddRow(new string[] {
                            "Actor",
                            "2",
                            "I Lease a Space From Others",
                            "Vehicles",
                            "96039",
                            "CA"});
#line 7
 testRunner.Given("user starts a quote with:", ((string)(null)), table1268, "Given ");
#line hidden
#line 10
 testRunner.Then("user verifies the appearance of the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1269 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name of Business",
                            "DBA",
                            "Policy Start Date"});
                table1269.AddRow(new string[] {
                            "TEST CA DECLINE",
                            "",
                            ""});
#line 11
 testRunner.Then("user fills in the Start Your Quote page with these values:", ((string)(null)), table1269, "Then ");
#line hidden
#line 14
 testRunner.Then("user clicks continue from the Start Your Quote page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
    testRunner.Then("user verifies the appearance of the Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1270 = new TechTalk.SpecFlow.Table(new string[] {
                            "Year Business Started",
                            "How Business Structured",
                            "Address1",
                            "Address2",
                            "City",
                            "Select an Address"});
                table1270.AddRow(new string[] {
                            "2006",
                            "Partnership",
                            "100 Main St",
                            "",
                            "Happy Camp",
                            "Original"});
#line 16
 testRunner.And("user fills in the Introduction page with these values:", ((string)(null)), table1270, "And ");
#line hidden
#line 19
 testRunner.Then("user clicks continue from CA Introduction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.Then("user verifies the appearance of the Vehicles page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1271 = new TechTalk.SpecFlow.Table(new string[] {
                            "No VIN",
                            "Type Insure",
                            "Year",
                            "Make",
                            "Model",
                            "Parking Address",
                            "Vehicle Worth"});
                table1271.AddRow(new string[] {
                            "",
                            "SUV",
                            "2009",
                            "GMC",
                            "YUKON XL",
                            "California",
                            "18000"});
#line 21
 testRunner.And("user creates a vehicle or trailer with variable values:", ((string)(null)), table1271, "And ");
#line hidden
#line 24
 testRunner.Then("user clicks Let\'s Continue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("User verifies appearance of the Drivers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1272 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DLState",
                            "DOB",
                            "CDL",
                            "ILDDC",
                            "ILViolation",
                            "ILDLRevoked",
                            "Accident",
                            "DLNumber"});
                table1272.AddRow(new string[] {
                            "TEST FN",
                            "TEST LN",
                            "CA",
                            "05/15/1945",
                            "",
                            "",
                            "",
                            "",
                            "Yes",
                            "C1234567"});
#line 26
 testRunner.And("user creates a driver with these values:", ((string)(null)), table1272, "And ");
#line hidden
#line 29
 testRunner.Then("user clicks continue from the Drivers page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.Then("user verifies the appearance of the Drivers Incidents page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1273 = new TechTalk.SpecFlow.Table(new string[] {
                            "Driver",
                            "Date",
                            "Incident Type",
                            "At Fault"});
                table1273.AddRow(new string[] {
                            "TEST FN TEST LN",
                            "11/18/2020",
                            "Accident",
                            "No"});
#line 31
 testRunner.Then("user adds incidents with the following values:", ((string)(null)), table1273, "Then ");
#line hidden
#line 34
 testRunner.Then("user continues to the Operations page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1274 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1274.AddRow(new string[] {
                            "What is the furthest any of your vehicles travel in any one direction from their " +
                                "home base?",
                            "50 miles or less"});
                table1274.AddRow(new string[] {
                            "How many auto insurance claims did your business file in the last 3 years?",
                            "0"});
#line 35
 testRunner.Then("user fills out the Operations page:", ((string)(null)), table1274, "Then ");
#line hidden
#line 39
 testRunner.Then("user continues to the Contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.Then("user verifies appearance of the contacts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1275 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1275.AddRow(new string[] {
                            "First Name",
                            "TEST FN"});
                table1275.AddRow(new string[] {
                            "Last Name",
                            "TEST LN"});
                table1275.AddRow(new string[] {
                            "Business Email",
                            "QAAutomation@biberk.com"});
                table1275.AddRow(new string[] {
                            "Business Phone",
                            "(123) 123-1321"});
                table1275.AddRow(new string[] {
                            "Business Website",
                            ""});
                table1275.AddRow(new string[] {
                            "Business has an account manager",
                            ""});
                table1275.AddRow(new string[] {
                            "Owner\'s First Name",
                            "TEST FN"});
                table1275.AddRow(new string[] {
                            "Owner\'s Last Name",
                            "TEST LN"});
                table1275.AddRow(new string[] {
                            "Owner\'s Address",
                            "100 Main St"});
                table1275.AddRow(new string[] {
                            "Owner\'s Address 2",
                            ""});
                table1275.AddRow(new string[] {
                            "Owner\'s Zip Code",
                            "96039"});
                table1275.AddRow(new string[] {
                            "Owner\'s City",
                            "Happy Camp"});
                table1275.AddRow(new string[] {
                            "Owner\'s State",
                            "California"});
                table1275.AddRow(new string[] {
                            "Select an Address",
                            "Original"});
#line 41
 testRunner.And("user enters contact information:", ((string)(null)), table1275, "And ");
#line hidden
#line 57
 testRunner.Then("user verifies the CA decline page appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Registered Nurse Declined policy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclineTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HealthCare")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYADHOC")]
        public void RegisteredNurseDeclinedPolicy()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression",
                    "PL",
                    "HealthCare",
                    "SYADHOC"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Registered Nurse Declined policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1276 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1276.AddRow(new string[] {
                            "Registered Nurse",
                            "2",
                            "I Lease a Space From Others",
                            "",
                            "58108",
                            "PL"});
#line 61
 testRunner.Given("user starts a quote with:", ((string)(null)), table1276, "Given ");
#line hidden
#line 64
 testRunner.Then("user verifies the appearance of the PL A Quick Introduction page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1277 = new TechTalk.SpecFlow.Table(new string[] {
                            "Business Structure",
                            "Name of Business",
                            "DBA"});
                table1277.AddRow(new string[] {
                            "Corporation",
                            "Nurse",
                            "No"});
#line 65
 testRunner.Then("user fills out A Quick Introduction page with these values:", ((string)(null)), table1277, "Then ");
#line hidden
#line 68
 testRunner.Then("user verifies the appearance of the PL Business Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1278 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1278.AddRow(new string[] {
                            "What year was your business started?",
                            "2010"});
                table1278.AddRow(new string[] {
                            "How many healthcare professionals work for your business?",
                            "2"});
                table1278.AddRow(new string[] {
                            "How many health students work for your business?",
                            "0"});
#line 69
 testRunner.Then("user fills out the PL Business Details page with these values:", ((string)(null)), table1278, "Then ");
#line hidden
#line 74
 testRunner.Then("user verifies the appearance of the PL Coverage Details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1279 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1279.AddRow(new string[] {
                            "When should your policy start?",
                            ""});
                table1279.AddRow(new string[] {
                            "Do you currently have a Professional Liability (E&O) policy in effect?",
                            "Yes"});
                table1279.AddRow(new string[] {
                            "Does your current policy have a retroactive date?",
                            "No"});
                table1279.AddRow(new string[] {
                            "Which option best describes your current professional liability policy?",
                            "This was my first policy."});
                table1279.AddRow(new string[] {
                            "How many Professional Liability (E&O) claims have you had in the past 3 years, if" +
                                " any?",
                            "0"});
#line 75
 testRunner.Then("user fills out the PL Coverage Details page with these values:", ((string)(null)), table1279, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1280 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1280.AddRow(new string[] {
                            "Are any business owner(s) or staff an MD (Medical Doctor)?",
                            "No"});
                table1280.AddRow(new string[] {
                            "Do you provide facial injection, fillers, or laser treatment services?",
                            "No"});
                table1280.AddRow(new string[] {
                            "Do you assist with any surgeries?",
                            "No"});
                table1280.AddRow(new string[] {
                            "Are any of the business owner(s) or staff Intensive Care Unit (ICU) specialists?",
                            "No"});
                table1280.AddRow(new string[] {
                            "Do you assist with labor/delivery of babies?",
                            "No"});
                table1280.AddRow(new string[] {
                            "Do you administer or assist with general anesthesia or deep sedation?",
                            "Yes"});
                table1280.AddRow(new string[] {
                            "Is all general anesthesia or deep sedation work done in a hospital or accredited " +
                                "facility?",
                            "No"});
                table1280.AddRow(new string[] {
                            "Do you practice any radiology or medical dosimetry?",
                            "No"});
                table1280.AddRow(new string[] {
                            "Are you a nurse practitioner?",
                            "No"});
                table1280.AddRow(new string[] {
                            "Are you a Physicians Assistant?",
                            "No"});
                table1280.AddRow(new string[] {
                            "In the past 3 years, has any party threatened or made claims for damages or other" +
                                " legal remedies against you or against any business entity with which you or any" +
                                " other business owner have been associated as owner, principal, officer, or empl" +
                                "oyee?",
                            "No"});
#line 82
 testRunner.Then("user fills out the PL Your Services page", ((string)(null)), table1280, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1281 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1281.AddRow(new string[] {
                            "First Name",
                            "Test"});
                table1281.AddRow(new string[] {
                            "Last Name",
                            "EJ"});
                table1281.AddRow(new string[] {
                            "Address",
                            "12 East St"});
                table1281.AddRow(new string[] {
                            "Apt/Suite",
                            "3"});
                table1281.AddRow(new string[] {
                            "City",
                            "Fargo"});
                table1281.AddRow(new string[] {
                            "Use as Mailing Address",
                            "No"});
                table1281.AddRow(new string[] {
                            "Mailing Address",
                            "12 East St"});
                table1281.AddRow(new string[] {
                            "Mailing Apt/Suite",
                            "3"});
                table1281.AddRow(new string[] {
                            "Mailing ZIP",
                            "58108"});
                table1281.AddRow(new string[] {
                            "Mailing City",
                            "Fargo"});
                table1281.AddRow(new string[] {
                            "Email",
                            "abc@bargain.com"});
                table1281.AddRow(new string[] {
                            "Business Phone",
                            "3213212321"});
                table1281.AddRow(new string[] {
                            "Ext",
                            "123"});
                table1281.AddRow(new string[] {
                            "Website/Social",
                            "www.tester.com"});
#line 95
 testRunner.Then("user fills out About You page with these values:", ((string)(null)), table1281, "Then ");
#line hidden
#line 111
 testRunner.Then("user verifies the PL decline page appearance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
