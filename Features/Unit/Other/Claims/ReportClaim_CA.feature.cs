// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Features.Unit.Other.Claims
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReportClaim_CAFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ReportClaim_CA.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Unit/Other/Claims", "ReportClaim_CA", "Verify Reporting a Claim scenario for Comm Auto.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ReportClaim_CA")))
            {
                global::ApolloQAAutomation.Features.Unit.Other.Claims.ReportClaim_CAFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Report a Claim for CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReportClaim_CA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Claims")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CA")]
        public void ReportAClaimForCA()
        {
            string[] tagsOfScenario = new string[] {
                    "Claims",
                    "Unit",
                    "CA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report a Claim for CA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("user has navigated to the following URL within the host environment: policyholder" +
                        "s/claims/Commercial-auto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Then("user validates the CA Claim page elements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.And("user verifies the CA Claims page error messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1618 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1618.AddRow(new string[] {
                            "Policy Number",
                            "N9WC606830"});
                table1618.AddRow(new string[] {
                            "Business Name",
                            "TestingB"});
                table1618.AddRow(new string[] {
                            "First Name",
                            "TestF"});
                table1618.AddRow(new string[] {
                            "Last Name",
                            "TestL"});
                table1618.AddRow(new string[] {
                            "Phone",
                            "8407673450"});
                table1618.AddRow(new string[] {
                            "How to Connect",
                            "testemail@gmail.com"});
                table1618.AddRow(new string[] {
                            "Driver First Name",
                            "testf"});
                table1618.AddRow(new string[] {
                            "Driver Last Name",
                            "testl"});
                table1618.AddRow(new string[] {
                            "Driver Address",
                            "1633 Page St"});
                table1618.AddRow(new string[] {
                            "ZIP Code",
                            "80823"});
                table1618.AddRow(new string[] {
                            "City",
                            "Karval"});
                table1618.AddRow(new string[] {
                            "Driver Phone",
                            "5874595555"});
                table1618.AddRow(new string[] {
                            "Date of Loss",
                            "08/01/2023"});
                table1618.AddRow(new string[] {
                            "Location of Loss",
                            "Karval"});
                table1618.AddRow(new string[] {
                            "Year",
                            "1997"});
                table1618.AddRow(new string[] {
                            "Make",
                            "ACURA"});
                table1618.AddRow(new string[] {
                            "Short Description",
                            "This is the Report Claims description"});
#line 9
 testRunner.When("user fills out the CA Claims page with these values:", ((string)(null)), table1618, "When ");
#line hidden
#line 28
 testRunner.And("user clicks on the CA Submit Claim Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.Then("user verifies the Claims Submitted page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
