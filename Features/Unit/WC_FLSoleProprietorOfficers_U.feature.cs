// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BiBerkLOB.Features.Unit
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WC_FLSoleProprietorOfficers_UFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "WC_FLSoleProprietorOfficers_U.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Unit", "WC_FLSoleProprietorOfficers_U", "Task 92752 Verification that a WC policy for a floridia individual requires the u" +
                    "ser to include an officer.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WC_FLSoleProprietorOfficers_U")))
            {
                global::BiBerkLOB.Features.Unit.WC_FLSoleProprietorOfficers_UFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WC_FLSoleProprietorOfficers_U Verifying that Florida sole proprietors in the serv" +
            "ices industry would have to include officers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WC_FLSoleProprietorOfficers_U")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("FL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Unit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Service")]
        public void WC_FLSoleProprietorOfficers_UVerifyingThatFloridaSoleProprietorsInTheServicesIndustryWouldHaveToIncludeOfficers()
        {
            string[] tagsOfScenario = new string[] {
                    "WC",
                    "FL",
                    "Regression",
                    "Unit",
                    "Service"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WC_FLSoleProprietorOfficers_U Verifying that Florida sole proprietors in the serv" +
                    "ices industry would have to include officers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1317 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "Own or Lease",
                            "ZIP Code",
                            "LOB"});
                table1317.AddRow(new string[] {
                            "Boiler Inspection",
                            "4",
                            "I Own a Property & Lease to Others",
                            "",
                            "32205",
                            "WC"});
#line 7
 testRunner.Given("user starts a quote with:", ((string)(null)), table1317, "Given ");
#line hidden
#line 10
 testRunner.Then("user verifies the appearance of the WC About You Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1318 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question",
                            "Answer"});
                table1318.AddRow(new string[] {
                            "When do you want your policy to start?",
                            ""});
                table1318.AddRow(new string[] {
                            "When did you start your business?",
                            "Been around a while, started 10 or more years ago"});
                table1318.AddRow(new string[] {
                            "How is your business structured?",
                            "Individual/Sole Proprietor"});
                table1318.AddRow(new string[] {
                            "What is the total annual payroll for W-2 employees? (exclude business owners/offi" +
                                "cers)",
                            "50,000"});
                table1318.AddRow(new string[] {
                            "Are there any cost estimators on staff that wouldn\'t do any direct physical work?" +
                                "",
                            "no"});
                table1318.AddRow(new string[] {
                            "Do any employees only do general office work and rarely travel?",
                            "no"});
                table1318.AddRow(new string[] {
                            "Do you use any subcontractors or pay any workers using IRS Form 1099?",
                            "no"});
                table1318.AddRow(new string[] {
                            "Insured First Name",
                            "Indi"});
                table1318.AddRow(new string[] {
                            "Insured Last Name",
                            "Vidual"});
                table1318.AddRow(new string[] {
                            "Address",
                            "2902 Riverside Ave;Jacksonville"});
                table1318.AddRow(new string[] {
                            "Email",
                            "BoilerInspection@Test123.com"});
                table1318.AddRow(new string[] {
                            "Phone",
                            "777-777-7777"});
#line 11
 testRunner.Then("user fills out the WC About You page with these values:", ((string)(null)), table1318, "Then ");
#line hidden
#line 25
 testRunner.Then("user verifies the appearance of the WC Owners and Officers Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1319 = new TechTalk.SpecFlow.Table(new string[] {
                            "Option"});
                table1319.AddRow(new string[] {
                            "please choose"});
                table1319.AddRow(new string[] {
                            "1"});
#line 26
 testRunner.Then("user verifies that the How many owners/officers does your business have? dropdown" +
                        " options are equivalent to the following:", ((string)(null)), table1319, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
