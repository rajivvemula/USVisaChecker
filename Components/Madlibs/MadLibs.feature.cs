// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQAAutomation.Components.Madlibs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MadLibsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "newWindow",
                "casey"};
        
#line 1 "MadLibs.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Components/Madlibs", "MadLibs", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "MadLibs")))
            {
                global::ApolloQAAutomation.Components.Madlibs.MadLibsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Madlibs Test - Granular")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MadLibs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("newWindow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("casey")]
        public void MadlibsTest_Granular()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Madlibs Test - Granular", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("user lands on biBerk homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("user clicks Get a Quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("URL contains get-a-quote", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
 testRunner.When("user enters flor for AutoComplete input field What\'s your industry?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Option Text"});
                table1.AddRow(new string[] {
                            "Floriculture: No Trees"});
                table1.AddRow(new string[] {
                            "Floriculture: With Trees"});
                table1.AddRow(new string[] {
                            "Florist"});
                table1.AddRow(new string[] {
                            "Florist Wholesaler"});
#line 11
 testRunner.Then("AutoComplete input field displays following options", ((string)(null)), table1, "Then ");
#line hidden
#line 17
 testRunner.When("user selects AutoComplete option Florist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Display Text",
                            "Field Type",
                            "Value"});
                table2.AddRow(new string[] {
                            "What\'s your industry?",
                            "Autocomplete",
                            "Florist"});
#line 18
 testRunner.Then("the following fields have values", ((string)(null)), table2, "Then ");
#line hidden
#line 21
 testRunner.When("user clicks Let\'s Go! button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Tile Text"});
                table3.AddRow(new string[] {
                            "Yes, I have employees"});
                table3.AddRow(new string[] {
                            "No, just the owner(s)"});
#line 22
 testRunner.Then("TileSet Do you have any employees? contains the following tiles", ((string)(null)), table3, "Then ");
#line hidden
#line 26
 testRunner.When("user selects tile for Yes, I have employees", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then("tile Yes, I have employees is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.When("user clicks Next button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.When("user enters employee count of 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.When("user clicks Next button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Tile Text"});
                table4.AddRow(new string[] {
                            "I Run My Business Out of My Home"});
                table4.AddRow(new string[] {
                            "I Lease a Space From Others"});
                table4.AddRow(new string[] {
                            "I Work at a Job Site"});
                table4.AddRow(new string[] {
                            "I Run My Business From Property I Own"});
                table4.AddRow(new string[] {
                            "I Own a Property & Lease to Others"});
#line 31
 testRunner.Then("TileSet Where does your business operate? contains the following tiles", ((string)(null)), table4, "Then ");
#line hidden
#line 38
 testRunner.When("user selects tile for I Run My Business Out of My Home", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then("tile I Run My Business Out of My Home is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.When("user clicks Next button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.When("user enters ZIP code 18704", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.When("user clicks Next button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "LOB Name"});
                table5.AddRow(new string[] {
                            "Workers\' Compensation"});
                table5.AddRow(new string[] {
                            "Workers\' Compensation Rewrite"});
                table5.AddRow(new string[] {
                            "General Liability"});
                table5.AddRow(new string[] {
                            "General Liability + Property"});
#line 43
 testRunner.Then("the following LOBs are available", ((string)(null)), table5, "Then ");
#line hidden
#line 49
 testRunner.When("user selects LOB as Workers\' Compensation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("URL contains get-wc/businessinfo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void MadlibsTest_ScenarioOutlineExampleWithCondensedSteps(string industry, string employees, string location, string zIPCode, string lOB, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Industry", industry);
            argumentsOfScenario.Add("Employees", employees);
            argumentsOfScenario.Add("Location", location);
            argumentsOfScenario.Add("ZIP Code", zIPCode);
            argumentsOfScenario.Add("LOB", lOB);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Madlibs Test - Scenario Outline example with condensed steps", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry",
                            "Employees",
                            "Location",
                            "ZIP Code",
                            "LOB"});
                table6.AddRow(new string[] {
                            string.Format("{0}", industry),
                            string.Format("{0}", employees),
                            string.Format("{0}", location),
                            string.Format("{0}", zIPCode),
                            string.Format("{0}", lOB)});
#line 54
 testRunner.Given("user starts a new quote with below values", ((string)(null)), table6, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Madlibs Test - Scenario Outline example with condensed steps: Florist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MadLibs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("newWindow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("casey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Florist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Industry", "Florist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employees", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Location", "I Run My Business From Property I Own")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZIP Code", "18704")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LOB", "Workers\' Compensation")]
        public void MadlibsTest_ScenarioOutlineExampleWithCondensedSteps_Florist()
        {
#line 53
this.MadlibsTest_ScenarioOutlineExampleWithCondensedSteps("Florist", "5", "I Run My Business From Property I Own", "18704", "Workers\' Compensation", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Madlibs Test - Scenario Outline example with condensed steps: Software Developmen" +
            "t")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MadLibs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("newWindow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("casey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Software Development")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Industry", "Software Development")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employees", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Location", "I Lease a Space From Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZIP Code", "18702")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LOB", "Professional Liability (E&O)")]
        public void MadlibsTest_ScenarioOutlineExampleWithCondensedSteps_SoftwareDevelopment()
        {
#line 53
this.MadlibsTest_ScenarioOutlineExampleWithCondensedSteps("Software Development", "2", "I Lease a Space From Others", "18702", "Professional Liability (E&O)", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Madlibs Test - Scenario Outline example with condensed steps: Automatic Car Wash")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MadLibs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("newWindow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("casey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Automatic Car Wash")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Industry", "Automatic Car Wash")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employees", "13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Location", "I Own a Property & Lease to Others")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZIP Code", "18705")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LOB", "General Liability")]
        public void MadlibsTest_ScenarioOutlineExampleWithCondensedSteps_AutomaticCarWash()
        {
#line 53
this.MadlibsTest_ScenarioOutlineExampleWithCondensedSteps("Automatic Car Wash", "13", "I Own a Property & Lease to Others", "18705", "General Liability", ((string[])(null)));
#line hidden
        }
        
        public virtual void MadlibsTest_ScenarioOutlineExampleWithCondensedStepsAlternative(string industry, string employees, string location, string zIPCode, string lOB, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Industry", industry);
            argumentsOfScenario.Add("Employees", employees);
            argumentsOfScenario.Add("Location", location);
            argumentsOfScenario.Add("ZIP Code", zIPCode);
            argumentsOfScenario.Add("LOB", lOB);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Madlibs Test - Scenario Outline example with condensed steps (Alternative)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
 testRunner.Given(string.Format("user starts a new quote with {0}, {1}, {2}, {3}, {4}", industry, employees, location, zIPCode, lOB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Madlibs Test - Scenario Outline example with condensed steps (Alternative): Banan" +
            "a Wholesaler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MadLibs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("newWindow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("casey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Banana Wholesaler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Industry", "Banana Wholesaler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employees", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Location", "I Run My Business From Property I Own")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ZIP Code", "18704")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LOB", "General Liability + Property")]
        public void MadlibsTest_ScenarioOutlineExampleWithCondensedStepsAlternative_BananaWholesaler()
        {
#line 65
this.MadlibsTest_ScenarioOutlineExampleWithCondensedStepsAlternative("Banana Wholesaler", "7", "I Run My Business From Property I Own", "18704", "General Liability + Property", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
