// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQA.TestCases.Regression
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("20636_CreatePolicyHeader")]
    public partial class _20636_CreatePolicyHeaderFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "20636_CreatePolicyHeader.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TestCases/Regression", "20636_CreatePolicyHeader", "\tVerify Policy header details with expanded mode and collapsed mode", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC_01 Verify Policy Headers details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("10086", "ACME", "Pre-Submission", "07/13/2020", "07/13/2021", "Commercial Auto", "Berkshire Hathaway Direct Insurance Company", "A Master Organization", "Unassigned", "N/A", "0", null)]
        public virtual void TC_01VerifyPolicyHeadersDetails(string policyNumber, string businessName, string status, string effectiveDate, string expirationDate, string lineOfBusiness, string carrier, string agency, string underwriter, string products, string alerts, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Policy Number", policyNumber);
            argumentsOfScenario.Add("Business Name", businessName);
            argumentsOfScenario.Add("Status", status);
            argumentsOfScenario.Add("Effective Date", effectiveDate);
            argumentsOfScenario.Add("Expiration Date", expirationDate);
            argumentsOfScenario.Add("Line of Business", lineOfBusiness);
            argumentsOfScenario.Add("Carrier", carrier);
            argumentsOfScenario.Add("Agency", agency);
            argumentsOfScenario.Add("Underwriter", underwriter);
            argumentsOfScenario.Add("Products", products);
            argumentsOfScenario.Add("Alerts", alerts);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC_01 Verify Policy Headers details", null, tagsOfScenario, argumentsOfScenario);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
testRunner.Given("user landed biBerk homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
testRunner.When("user click on Policy CTA then user landed Policy grid page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
testRunner.And(string.Format("user clicks on existing \"{0}\" then user landed Policy details page", policyNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
testRunner.Then(string.Format("user verify \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{4}\", \"{5}\", \"{6}\", \"{7}\", \"{8}\",\"{9}\" a" +
                            "nd \"{10}\"", policyNumber, businessName, status, effectiveDate, expirationDate, lineOfBusiness, carrier, agency, underwriter, products, alerts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC_02 Verify Policy headers details with collapsed view")]
        [NUnit.Framework.TestCaseAttribute("10086", "ACME", "Pre-Submission", "07/13/2020", "07/13/2021", "0", null)]
        public virtual void TC_02VerifyPolicyHeadersDetailsWithCollapsedView(string policyNumber, string businessName, string status, string effectiveDate, string expirationDate, string alerts, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Policy Number", policyNumber);
            argumentsOfScenario.Add("Business Name", businessName);
            argumentsOfScenario.Add("Status", status);
            argumentsOfScenario.Add("Effective Date", effectiveDate);
            argumentsOfScenario.Add("Expiration Date", expirationDate);
            argumentsOfScenario.Add("Alerts", alerts);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC_02 Verify Policy headers details with collapsed view", null, tagsOfScenario, argumentsOfScenario);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
testRunner.When("user clicks on Chevron CTA then Policy Header should be displayed as collpased vi" +
                        "ew", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
testRunner.Then(string.Format("user verify collapsed view \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{4}\" and \"{5}\"", policyNumber, businessName, status, effectiveDate, expirationDate, alerts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC_03 Verify when user navigates any others page Policy haeders should be dsiplay" +
            "ed as collpased view")]
        [NUnit.Framework.TestCaseAttribute("10086", "ACME", "Pre-Submission", "07/13/2020", "07/13/2021", "0", null)]
        public virtual void TC_03VerifyWhenUserNavigatesAnyOthersPagePolicyHaedersShouldBeDsiplayedAsCollpasedView(string policyNumber, string businessName, string status, string effectiveDate, string expirationDate, string alerts, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Policy Number", policyNumber);
            argumentsOfScenario.Add("Business Name", businessName);
            argumentsOfScenario.Add("Status", status);
            argumentsOfScenario.Add("Effective Date", effectiveDate);
            argumentsOfScenario.Add("Expiration Date", expirationDate);
            argumentsOfScenario.Add("Alerts", alerts);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC_03 Verify when user navigates any others page Policy haeders should be dsiplay" +
                    "ed as collpased view", null, tagsOfScenario, argumentsOfScenario);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
testRunner.When("user clicks on page then user landed realted page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
testRunner.Then(string.Format("user verify collapsed view \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{4}\" and \"{5}\"", policyNumber, businessName, status, effectiveDate, expirationDate, alerts), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
