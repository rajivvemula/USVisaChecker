// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQA.Features.Quote
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Business Infomration Section", Description="\tAs a user I want to make sure Business Information section is working correctly", SourceFile="Features\\Quote\\Quote_BusinessInformation.feature", SourceLine=0)]
    public partial class BusinessInfomrationSectionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Quote_BusinessInformation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Quote", "Business Infomration Section", "\tAs a user I want to make sure Business Information section is working correctly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Business Information Load", new string[] {
                "SmokeTest",
                "Quote"}, SourceLine=4)]
        public virtual void BusinessInformationLoad()
        {
            string[] tagsOfScenario = new string[] {
                    "SmokeTest",
                    "Quote"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Business Information Load", null, tagsOfScenario, argumentsOfScenario);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("user is successfully logged into biberk", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("User Navigates to Quote latest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.And("User Navigates to Business Information Section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Display Name",
                            "Field Type"});
                table10.AddRow(new string[] {
                            "Business Name",
                            "Input"});
                table10.AddRow(new string[] {
                            "DBA",
                            "Input"});
                table10.AddRow(new string[] {
                            "Organization Type",
                            "Dropdown"});
                table10.AddRow(new string[] {
                            "Tax ID Type",
                            "Input"});
                table10.AddRow(new string[] {
                            "Tax ID No",
                            "Input"});
                table10.AddRow(new string[] {
                            "Description of Operations",
                            "Input"});
                table10.AddRow(new string[] {
                            "Business Phone No",
                            "Input"});
                table10.AddRow(new string[] {
                            "Business Email Address",
                            "Input"});
                table10.AddRow(new string[] {
                            "Business Website",
                            "Input"});
                table10.AddRow(new string[] {
                            "Keyword",
                            "Input"});
                table10.AddRow(new string[] {
                            "Class Taxonomy",
                            "Input"});
                table10.AddRow(new string[] {
                            "Year Business Started",
                            "Input"});
                table10.AddRow(new string[] {
                            "Year Ownership Started",
                            "Input"});
#line 9
 testRunner.Then("The following Organization Fields should be displayed", ((string)(null)), table10, "Then ");
#line hidden
#line 24
 testRunner.And("Physical Address field should be blank", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("National Credit Score should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Business Information Add Address", new string[] {
                "SmokeTest",
                "Quote"}, SourceLine=29)]
        public virtual void BusinessInformationAddAddress()
        {
            string[] tagsOfScenario = new string[] {
                    "SmokeTest",
                    "Quote"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Business Information Add Address", null, tagsOfScenario, argumentsOfScenario);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("user is successfully logged into biberk", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When("User Navigates to Quote latest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.And("User Navigates to Business Information Section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("user clicks Physical Address Dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("user clicks Add Address Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Display Name",
                            "Field Type",
                            "Field Value"});
                table11.AddRow(new string[] {
                            "Street Address Line 1",
                            "Input",
                            "618 E. Laurel St"});
                table11.AddRow(new string[] {
                            "Street Address Line 2",
                            "Input",
                            ""});
                table11.AddRow(new string[] {
                            "City",
                            "Input",
                            "Springfield"});
                table11.AddRow(new string[] {
                            "State / Province / Region",
                            "Dropdown",
                            "IL"});
                table11.AddRow(new string[] {
                            "Zip / Postal Code",
                            "Input",
                            "62703"});
                table11.AddRow(new string[] {
                            "Country",
                            "Dropdown",
                            "United States"});
#line 36
 testRunner.And("user enters the following address", ((string)(null)), table11, "And ");
#line hidden
#line 44
 testRunner.And("user saves the address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.Then("Dropdown should contain the previously entered address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
