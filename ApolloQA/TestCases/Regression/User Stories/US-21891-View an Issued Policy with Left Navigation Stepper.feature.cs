// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQA.TestCases.Regression.UserStories
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("US-21891-View an Issued Policy with Left Navigation Stepper")]
    public partial class US_21891_ViewAnIssuedPolicyWithLeftNavigationStepperFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "US-21891-View an Issued Policy with Left Navigation Stepper.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TestCases/Regression/User Stories", "US-21891-View an Issued Policy with Left Navigation Stepper", "\tAs an underwriter, \r\n\tI want to be able to view an issued Policy \r\n\twith the Lef" +
                    "t Navigation stepper.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC01 Verify Policy Left Nav Exists")]
        public virtual void TC01VerifyPolicyLeftNavExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC01 Verify Policy Left Nav Exists", null, tagsOfScenario, argumentsOfScenario);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("User is on Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("User navigates to policy ID 10562", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table54.AddRow(new string[] {
                            "a",
                            "Business Information"});
                table54.AddRow(new string[] {
                            "b",
                            "Contacts"});
                table54.AddRow(new string[] {
                            "c",
                            "UW Questions"});
                table54.AddRow(new string[] {
                            "d",
                            "Additional Questions"});
                table54.AddRow(new string[] {
                            "e",
                            "Drivers"});
                table54.AddRow(new string[] {
                            "f",
                            "Vehicles"});
                table54.AddRow(new string[] {
                            "g",
                            "Additional Interests"});
                table54.AddRow(new string[] {
                            "h",
                            "Coverages List Test"});
                table54.AddRow(new string[] {
                            "i",
                            "Rating Worksheet"});
                table54.AddRow(new string[] {
                            "j",
                            "Documents"});
                table54.AddRow(new string[] {
                            "k",
                            "Activities"});
                table54.AddRow(new string[] {
                            "l",
                            "Loss History"});
                table54.AddRow(new string[] {
                            "m",
                            "Policy History"});
                table54.AddRow(new string[] {
                            "n",
                            "Summary"});
#line 11
 testRunner.Then("Verify sidetab is present", ((string)(null)), table54, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC02 Verify each tab within policy left nav is working")]
        [NUnit.Framework.TestCaseAttribute("a", "Business Information", null)]
        [NUnit.Framework.TestCaseAttribute("b", "Contacts", null)]
        [NUnit.Framework.TestCaseAttribute("c", "UW Questions", null)]
        [NUnit.Framework.TestCaseAttribute("d", "Additional Questions", null)]
        [NUnit.Framework.TestCaseAttribute("e", "Drivers", null)]
        [NUnit.Framework.TestCaseAttribute("f", "Vehicles", null)]
        [NUnit.Framework.TestCaseAttribute("g", "Additional Interests", null)]
        [NUnit.Framework.TestCaseAttribute("h", "Coverages List Test", null)]
        [NUnit.Framework.TestCaseAttribute("i", "Rating Worksheet", null)]
        [NUnit.Framework.TestCaseAttribute("j", "Documents", null)]
        [NUnit.Framework.TestCaseAttribute("k", "Activities", null)]
        [NUnit.Framework.TestCaseAttribute("m", "Policy History", null)]
        public virtual void TC02VerifyEachTabWithinPolicyLeftNavIsWorking(string key, string tab, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Key", key);
            argumentsOfScenario.Add("Tab", tab);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC02 Verify each tab within policy left nav is working", null, tagsOfScenario, argumentsOfScenario);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.When(string.Format("User navigates to {0} SideTab", tab), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then(string.Format("{0} page is displayed", tab), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
