// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApolloQA.TestCases.Regression.UserStories
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("US-13749 - Adding a vehicle - verifying accuracy via VinTelligence")]
    public partial class US_13749_AddingAVehicle_VerifyingAccuracyViaVinTelligenceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "US-13749 - Adding a vehicle - verifying accuracy via VinTelligence.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TestCases/Regression/User Stories", "US-13749 - Adding a vehicle - verifying accuracy via VinTelligence", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 Navigate to existing Organization")]
        public virtual void _1NavigateToExistingOrganization()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 Navigate to existing Organization", null, tagsOfScenario, argumentsOfScenario);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
 testRunner.Given("User is on Apollo Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
 testRunner.When("I enter organization name Casey IL Test Org 1023 in the search field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.And("I click the first search result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.Then("I should be directed to organization Casey IL Test Org 1023", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2 Add a vehicle using a valid VIN")]
        public virtual void _2AddAVehicleUsingAValidVIN()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2 Add a vehicle using a valid VIN", null, tagsOfScenario, argumentsOfScenario);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.When("User navigates to Vehicles SideTab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.And("User clicks orgVehicleAdd button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("New Vehicle modal is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Name",
                            "Field Type",
                            "Value"});
                table25.AddRow(new string[] {
                            "VIN",
                            "Input",
                            "Random"});
#line 23
 testRunner.When("User enters following values", ((string)(null)), table25, "When ");
#line hidden
#line 26
 testRunner.And("User clicks orgVehicleVerifyVIN button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Name",
                            "Field Type",
                            "Value"});
                table26.AddRow(new string[] {
                            "Year",
                            "Input",
                            "Any"});
                table26.AddRow(new string[] {
                            "Make",
                            "Input",
                            "Any"});
                table26.AddRow(new string[] {
                            "Model",
                            "Input",
                            "Any"});
#line 27
 testRunner.Then("the following fields have values", ((string)(null)), table26, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Name",
                            "Field Type",
                            "Value"});
                table27.AddRow(new string[] {
                            "Vehicle Trim",
                            "Input",
                            "Sport"});
                table27.AddRow(new string[] {
                            "Body Category",
                            "Dropdown",
                            "Cars, Pickup, or SUV"});
                table27.AddRow(new string[] {
                            "Body Subcategory",
                            "Dropdown",
                            "Random"});
                table27.AddRow(new string[] {
                            "Seating Capacity",
                            "Dropdown",
                            "Random"});
                table27.AddRow(new string[] {
                            "Gross Vehicle Weight",
                            "Dropdown",
                            "Random"});
                table27.AddRow(new string[] {
                            "Cost New",
                            "Input",
                            "$ 22,000.00"});
                table27.AddRow(new string[] {
                            "Estimated Current Value",
                            "Input",
                            "$ 14,000.00"});
                table27.AddRow(new string[] {
                            "Additional Modifications",
                            "Input",
                            "Test comment."});
                table27.AddRow(new string[] {
                            "Stated Amount",
                            "Input",
                            "$ 12,000.00"});
#line 32
 testRunner.When("User enters following values", ((string)(null)), table27, "When ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Name",
                            "Field Type",
                            "Value"});
                table28.AddRow(new string[] {
                            "Vehicle Trim",
                            "Input",
                            "Sport"});
                table28.AddRow(new string[] {
                            "Body Category",
                            "Dropdown",
                            "Any"});
                table28.AddRow(new string[] {
                            "Additional Modifications",
                            "Input",
                            "Test comment."});
                table28.AddRow(new string[] {
                            "Stated Amount",
                            "Input",
                            "$ 12,000.00"});
#line 43
 testRunner.Then("the following fields have values", ((string)(null)), table28, "Then ");
#line hidden
#line 49
 testRunner.When("User clicks orgVehicleSave button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("Verify correct toast Vehicle saved is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3 Verify vehicle was added to Vehicle grid")]
        public virtual void _3VerifyVehicleWasAddedToVehicleGrid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3 Verify vehicle was added to Vehicle grid", null, tagsOfScenario, argumentsOfScenario);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Value"});
                table29.AddRow(new string[] {
                            "VIN",
                            "Last Random"});
                table29.AddRow(new string[] {
                            "VIN",
                            "1C6RR6FPXDS586955"});
                table29.AddRow(new string[] {
                            "VIN",
                            "WMWSV3C56BTY10265"});
#line 53
 testRunner.Then("Verify Grid contains entry with column equals value", ((string)(null)), table29, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Value",
                            "Option"});
                table30.AddRow(new string[] {
                            "VIN",
                            "Last Random",
                            "View"});
#line 58
 testRunner.When("User clicks Grid ellipsis option for entry with column equals value", ((string)(null)), table30, "When ");
#line hidden
#line 61
 testRunner.Then("View Vehicle modal is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Name",
                            "Field Type",
                            "Value"});
                table31.AddRow(new string[] {
                            "VIN",
                            "Input",
                            "Last Random"});
                table31.AddRow(new string[] {
                            "Vehicle Trim",
                            "Input",
                            "Sport"});
                table31.AddRow(new string[] {
                            "Body Category",
                            "Dropdown",
                            "Cars, Pickup, or SUV"});
                table31.AddRow(new string[] {
                            "Body Subcategory",
                            "Dropdown",
                            "Any"});
                table31.AddRow(new string[] {
                            "Seating Capacity",
                            "Dropdown",
                            "Any"});
                table31.AddRow(new string[] {
                            "Gross Vehicle Weight",
                            "Dropdown",
                            "Any"});
                table31.AddRow(new string[] {
                            "Cost New",
                            "Input",
                            "$ 22,000.00"});
                table31.AddRow(new string[] {
                            "Estimated Current Value",
                            "Input",
                            "$ 14,000.00"});
                table31.AddRow(new string[] {
                            "Additional Modifications",
                            "Input",
                            "Test comment."});
#line 62
 testRunner.And("the following fields have values", ((string)(null)), table31, "And ");
#line hidden
#line 73
 testRunner.When("User clicks buttonCancel button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
