using ApolloQA.Source.Driver;
using ApolloQA.Source.Helpers;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using TechTalk.SpecFlow;

namespace ApolloQA.StepDefinition.Rating
{
    [Binding]
    public class Algorithms_KeywordsSteps
    {
        public IEnumerable<string> keywords;

        [When(@"user loads all Keywords from the DB")]
        public void WhenUserLoadsAllKeywordsFromTheDB()
        {
            keywords = SQL.executeQuery("SELECT Name  FROM [reference].[Keyword]").Select(it=> (string)it["Name"]);
        }
        
        [Then(@"All Keywords are added to this file for (.*)")]
        public void ThenAllKeywordsAreAddedToThisFileFor(string state)
        {
            string FILEPATH = Path.Combine(Setup.SourceDir, "Features\\Rating\\Keywords.feature");

            string CUTSTRING = $"#AUTOGENERATED BELOW THIS FOR STATE {state}";
            string CUTSTRINGEND = $"#AUTOGENERATED ABOVE THIS FOR STATE {state}";

            var featureFile = File.ReadAllText(FILEPATH);

            string result;
            String PersistedBelow = null;
            if (featureFile.Contains(CUTSTRING))
            {
                result = featureFile.Substring(0, featureFile.IndexOf(CUTSTRING));
                PersistedBelow = featureFile.Substring(featureFile.IndexOf(CUTSTRINGEND) + CUTSTRING.Length);
            }
            else
            {
                result = featureFile;
            }

            result += "\n"+ CUTSTRING +"\n";
            foreach(var keyword in keywords)
            {
                result += $"| {state} | {keyword} | \n";
            }
            result += "\n"+CUTSTRINGEND + "\n";

            result += PersistedBelow;

            File.WriteAllText(FILEPATH, result);

        }
    }
}
